/* tslint:disable */
/* eslint-disable */
/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact-email@something.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AboutUsListResponse
 */
export interface AboutUsListResponse {
    /**
     * 
     * @type {Array<AboutUsListResponseDataItem>}
     * @memberof AboutUsListResponse
     */
    'data'?: Array<AboutUsListResponseDataItem>;
    /**
     * 
     * @type {AboutUsListResponseMeta}
     * @memberof AboutUsListResponse
     */
    'meta'?: AboutUsListResponseMeta;
}
/**
 * 
 * @export
 * @interface AboutUsListResponseDataItem
 */
export interface AboutUsListResponseDataItem {
    /**
     * 
     * @type {number}
     * @memberof AboutUsListResponseDataItem
     */
    'id'?: number;
    /**
     * 
     * @type {AboutUsListResponseDataItemAttributes}
     * @memberof AboutUsListResponseDataItem
     */
    'attributes'?: AboutUsListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface AboutUsListResponseDataItemAttributes
 */
export interface AboutUsListResponseDataItemAttributes {
    /**
     * 
     * @type {AboutUsLocalizationResponseBanner}
     * @memberof AboutUsListResponseDataItemAttributes
     */
    'banner'?: AboutUsLocalizationResponseBanner;
    /**
     * 
     * @type {Array<SectionsSubPageComponent>}
     * @memberof AboutUsListResponseDataItemAttributes
     */
    'subPages'?: Array<SectionsSubPageComponent>;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof AboutUsListResponseDataItemAttributes
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {Date}
     * @memberof AboutUsListResponseDataItemAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AboutUsListResponseDataItemAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof AboutUsListResponseDataItemAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof AboutUsListResponseDataItemAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsListResponseDataItemAttributesLocalizations}
     * @memberof AboutUsListResponseDataItemAttributes
     */
    'localizations'?: AboutUsListResponseDataItemAttributesLocalizations;
    /**
     * 
     * @type {string}
     * @memberof AboutUsListResponseDataItemAttributes
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface AboutUsListResponseDataItemAttributesLocalizations
 */
export interface AboutUsListResponseDataItemAttributesLocalizations {
    /**
     * 
     * @type {Array<AboutUsListResponseDataItemLocalized>}
     * @memberof AboutUsListResponseDataItemAttributesLocalizations
     */
    'data'?: Array<AboutUsListResponseDataItemLocalized>;
}
/**
 * 
 * @export
 * @interface AboutUsListResponseDataItemLocalized
 */
export interface AboutUsListResponseDataItemLocalized {
    /**
     * 
     * @type {number}
     * @memberof AboutUsListResponseDataItemLocalized
     */
    'id'?: number;
    /**
     * 
     * @type {AboutUsResponseDataObjectLocalizedAttributes}
     * @memberof AboutUsListResponseDataItemLocalized
     */
    'attributes'?: AboutUsResponseDataObjectLocalizedAttributes;
}
/**
 * 
 * @export
 * @interface AboutUsListResponseMeta
 */
export interface AboutUsListResponseMeta {
    /**
     * 
     * @type {AboutUsListResponseMetaPagination}
     * @memberof AboutUsListResponseMeta
     */
    'pagination'?: AboutUsListResponseMetaPagination;
}
/**
 * 
 * @export
 * @interface AboutUsListResponseMetaPagination
 */
export interface AboutUsListResponseMetaPagination {
    /**
     * 
     * @type {number}
     * @memberof AboutUsListResponseMetaPagination
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof AboutUsListResponseMetaPagination
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof AboutUsListResponseMetaPagination
     */
    'pageCount'?: number;
    /**
     * 
     * @type {number}
     * @memberof AboutUsListResponseMetaPagination
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface AboutUsLocalizationRequest
 */
export interface AboutUsLocalizationRequest {
    /**
     * 
     * @type {AboutUsLocalizationRequestBanner}
     * @memberof AboutUsLocalizationRequest
     */
    'banner'?: AboutUsLocalizationRequestBanner;
    /**
     * 
     * @type {Array<SectionsSubPageComponent>}
     * @memberof AboutUsLocalizationRequest
     */
    'subPages'?: Array<SectionsSubPageComponent>;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof AboutUsLocalizationRequest
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationRequest
     */
    'locale': string;
}
/**
 * @type AboutUsLocalizationRequestBanner
 * @export
 */
export type AboutUsLocalizationRequestBanner = number | string;

/**
 * 
 * @export
 * @interface AboutUsLocalizationResponse
 */
export interface AboutUsLocalizationResponse {
    /**
     * 
     * @type {number}
     * @memberof AboutUsLocalizationResponse
     */
    'id'?: number;
    /**
     * 
     * @type {AboutUsLocalizationResponseBanner}
     * @memberof AboutUsLocalizationResponse
     */
    'banner'?: AboutUsLocalizationResponseBanner;
    /**
     * 
     * @type {Array<SectionsSubPageComponent>}
     * @memberof AboutUsLocalizationResponse
     */
    'subPages'?: Array<SectionsSubPageComponent>;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof AboutUsLocalizationResponse
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {Date}
     * @memberof AboutUsLocalizationResponse
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AboutUsLocalizationResponse
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof AboutUsLocalizationResponse
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof AboutUsLocalizationResponse
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseLocalizations}
     * @memberof AboutUsLocalizationResponse
     */
    'localizations'?: AboutUsLocalizationResponseLocalizations;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponse
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface AboutUsLocalizationResponseBanner
 */
export interface AboutUsLocalizationResponseBanner {
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerData}
     * @memberof AboutUsLocalizationResponseBanner
     */
    'data'?: AboutUsLocalizationResponseBannerData;
}
/**
 * 
 * @export
 * @interface AboutUsLocalizationResponseBannerData
 */
export interface AboutUsLocalizationResponseBannerData {
    /**
     * 
     * @type {number}
     * @memberof AboutUsLocalizationResponseBannerData
     */
    'id'?: number;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributes}
     * @memberof AboutUsLocalizationResponseBannerData
     */
    'attributes'?: AboutUsLocalizationResponseBannerDataAttributes;
}
/**
 * 
 * @export
 * @interface AboutUsLocalizationResponseBannerDataAttributes
 */
export interface AboutUsLocalizationResponseBannerDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributes
     */
    'alternativeText'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributes
     */
    'caption'?: string;
    /**
     * 
     * @type {number}
     * @memberof AboutUsLocalizationResponseBannerDataAttributes
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof AboutUsLocalizationResponseBannerDataAttributes
     */
    'height'?: number;
    /**
     * 
     * @type {any}
     * @memberof AboutUsLocalizationResponseBannerDataAttributes
     */
    'formats'?: any;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributes
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributes
     */
    'ext'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributes
     */
    'mime'?: string;
    /**
     * 
     * @type {number}
     * @memberof AboutUsLocalizationResponseBannerDataAttributes
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributes
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributes
     */
    'previewUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributes
     */
    'provider'?: string;
    /**
     * 
     * @type {any}
     * @memberof AboutUsLocalizationResponseBannerDataAttributes
     */
    'provider_metadata'?: any;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesRelated}
     * @memberof AboutUsLocalizationResponseBannerDataAttributes
     */
    'related'?: AboutUsLocalizationResponseBannerDataAttributesRelated;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolder}
     * @memberof AboutUsLocalizationResponseBannerDataAttributes
     */
    'folder'?: AboutUsLocalizationResponseBannerDataAttributesFolder;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributes
     */
    'folderPath'?: string;
    /**
     * 
     * @type {Date}
     * @memberof AboutUsLocalizationResponseBannerDataAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AboutUsLocalizationResponseBannerDataAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof AboutUsLocalizationResponseBannerDataAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof AboutUsLocalizationResponseBannerDataAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}
/**
 * 
 * @export
 * @interface AboutUsLocalizationResponseBannerDataAttributesFolder
 */
export interface AboutUsLocalizationResponseBannerDataAttributesFolder {
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderData}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolder
     */
    'data'?: AboutUsLocalizationResponseBannerDataAttributesFolderData;
}
/**
 * 
 * @export
 * @interface AboutUsLocalizationResponseBannerDataAttributesFolderData
 */
export interface AboutUsLocalizationResponseBannerDataAttributesFolderData {
    /**
     * 
     * @type {number}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderData
     */
    'id'?: number;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributes}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderData
     */
    'attributes'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributes;
}
/**
 * 
 * @export
 * @interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributes
 */
export interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributes
     */
    'pathId'?: number;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributes
     */
    'parent'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesRelated}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributes
     */
    'children'?: AboutUsLocalizationResponseBannerDataAttributesRelated;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFiles}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributes
     */
    'files'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFiles;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributes
     */
    'path'?: string;
    /**
     * 
     * @type {Date}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}
/**
 * 
 * @export
 * @interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFiles
 */
export interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFiles {
    /**
     * 
     * @type {Array<AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInner>}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFiles
     */
    'data'?: Array<AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInner>;
}
/**
 * 
 * @export
 * @interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInner
 */
export interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInner {
    /**
     * 
     * @type {number}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInner
     */
    'id'?: number;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributes}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInner
     */
    'attributes'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributes;
}
/**
 * 
 * @export
 * @interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributes
 */
export interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributes {
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'alternativeText'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'caption'?: string;
    /**
     * 
     * @type {number}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'height'?: number;
    /**
     * 
     * @type {any}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'formats'?: any;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'ext'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'mime'?: string;
    /**
     * 
     * @type {number}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'previewUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'provider'?: string;
    /**
     * 
     * @type {any}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'provider_metadata'?: any;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesRelated}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'related'?: AboutUsLocalizationResponseBannerDataAttributesRelated;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'folder'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'folderPath'?: string;
    /**
     * 
     * @type {Date}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}
/**
 * 
 * @export
 * @interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy
 */
export interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy {
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByData}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy
     */
    'data'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByData;
}
/**
 * 
 * @export
 * @interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByData
 */
export interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByData {
    /**
     * 
     * @type {number}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByData
     */
    'id'?: number;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByData
     */
    'attributes'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes;
}
/**
 * 
 * @export
 * @interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
 */
export interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'firstname'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'lastname'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'resetPasswordToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'registrationToken'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRoles}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'roles'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRoles;
    /**
     * 
     * @type {boolean}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'preferedLanguage'?: string;
    /**
     * 
     * @type {Date}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}
/**
 * 
 * @export
 * @interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRoles
 */
export interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRoles {
    /**
     * 
     * @type {Array<AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInner>}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRoles
     */
    'data'?: Array<AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInner>;
}
/**
 * 
 * @export
 * @interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInner
 */
export interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInner {
    /**
     * 
     * @type {number}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInner
     */
    'id'?: number;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInner
     */
    'attributes'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes;
}
/**
 * 
 * @export
 * @interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
 */
export interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes {
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
     */
    'description'?: string;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesRelated}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
     */
    'users'?: AboutUsLocalizationResponseBannerDataAttributesRelated;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissions}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
     */
    'permissions'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissions;
    /**
     * 
     * @type {Date}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}
/**
 * 
 * @export
 * @interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissions
 */
export interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissions {
    /**
     * 
     * @type {Array<AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner>}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissions
     */
    'data'?: Array<AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner>;
}
/**
 * 
 * @export
 * @interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner
 */
export interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner {
    /**
     * 
     * @type {number}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner
     */
    'id'?: number;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner
     */
    'attributes'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes;
}
/**
 * 
 * @export
 * @interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
 */
export interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes {
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
     */
    'action'?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
     */
    'subject'?: string;
    /**
     * 
     * @type {any}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
     */
    'properties'?: any;
    /**
     * 
     * @type {any}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
     */
    'conditions'?: any;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
     */
    'role'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {Date}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}
/**
 * 
 * @export
 * @interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent
 */
export interface AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent {
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesRelatedDataInner}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent
     */
    'data'?: AboutUsLocalizationResponseBannerDataAttributesRelatedDataInner;
}
/**
 * 
 * @export
 * @interface AboutUsLocalizationResponseBannerDataAttributesRelated
 */
export interface AboutUsLocalizationResponseBannerDataAttributesRelated {
    /**
     * 
     * @type {Array<AboutUsLocalizationResponseBannerDataAttributesRelatedDataInner>}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesRelated
     */
    'data'?: Array<AboutUsLocalizationResponseBannerDataAttributesRelatedDataInner>;
}
/**
 * 
 * @export
 * @interface AboutUsLocalizationResponseBannerDataAttributesRelatedDataInner
 */
export interface AboutUsLocalizationResponseBannerDataAttributesRelatedDataInner {
    /**
     * 
     * @type {number}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesRelatedDataInner
     */
    'id'?: number;
    /**
     * 
     * @type {object}
     * @memberof AboutUsLocalizationResponseBannerDataAttributesRelatedDataInner
     */
    'attributes'?: object;
}
/**
 * 
 * @export
 * @interface AboutUsLocalizationResponseLocalizations
 */
export interface AboutUsLocalizationResponseLocalizations {
    /**
     * 
     * @type {Array<any>}
     * @memberof AboutUsLocalizationResponseLocalizations
     */
    'data'?: Array<any>;
}
/**
 * 
 * @export
 * @interface AboutUsRequest
 */
export interface AboutUsRequest {
    /**
     * 
     * @type {AboutUsRequestData}
     * @memberof AboutUsRequest
     */
    'data': AboutUsRequestData;
}
/**
 * 
 * @export
 * @interface AboutUsRequestData
 */
export interface AboutUsRequestData {
    /**
     * 
     * @type {AboutUsLocalizationRequestBanner}
     * @memberof AboutUsRequestData
     */
    'banner'?: AboutUsLocalizationRequestBanner;
    /**
     * 
     * @type {Array<SectionsSubPageComponent>}
     * @memberof AboutUsRequestData
     */
    'subPages'?: Array<SectionsSubPageComponent>;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof AboutUsRequestData
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof AboutUsRequestData
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface AboutUsResponse
 */
export interface AboutUsResponse {
    /**
     * 
     * @type {AboutUsResponseDataObject}
     * @memberof AboutUsResponse
     */
    'data'?: AboutUsResponseDataObject;
    /**
     * 
     * @type {object}
     * @memberof AboutUsResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface AboutUsResponseDataObject
 */
export interface AboutUsResponseDataObject {
    /**
     * 
     * @type {number}
     * @memberof AboutUsResponseDataObject
     */
    'id'?: number;
    /**
     * 
     * @type {AboutUsResponseDataObjectAttributes}
     * @memberof AboutUsResponseDataObject
     */
    'attributes'?: AboutUsResponseDataObjectAttributes;
}
/**
 * 
 * @export
 * @interface AboutUsResponseDataObjectAttributes
 */
export interface AboutUsResponseDataObjectAttributes {
    /**
     * 
     * @type {AboutUsLocalizationResponseBanner}
     * @memberof AboutUsResponseDataObjectAttributes
     */
    'banner'?: AboutUsLocalizationResponseBanner;
    /**
     * 
     * @type {Array<SectionsSubPageComponent>}
     * @memberof AboutUsResponseDataObjectAttributes
     */
    'subPages'?: Array<SectionsSubPageComponent>;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof AboutUsResponseDataObjectAttributes
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {Date}
     * @memberof AboutUsResponseDataObjectAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AboutUsResponseDataObjectAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof AboutUsResponseDataObjectAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof AboutUsResponseDataObjectAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsResponseDataObjectAttributesLocalizations}
     * @memberof AboutUsResponseDataObjectAttributes
     */
    'localizations'?: AboutUsResponseDataObjectAttributesLocalizations;
    /**
     * 
     * @type {string}
     * @memberof AboutUsResponseDataObjectAttributes
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface AboutUsResponseDataObjectAttributesLocalizations
 */
export interface AboutUsResponseDataObjectAttributesLocalizations {
    /**
     * 
     * @type {Array<AboutUsResponseDataObjectLocalized>}
     * @memberof AboutUsResponseDataObjectAttributesLocalizations
     */
    'data'?: Array<AboutUsResponseDataObjectLocalized>;
}
/**
 * 
 * @export
 * @interface AboutUsResponseDataObjectLocalized
 */
export interface AboutUsResponseDataObjectLocalized {
    /**
     * 
     * @type {number}
     * @memberof AboutUsResponseDataObjectLocalized
     */
    'id'?: number;
    /**
     * 
     * @type {AboutUsResponseDataObjectLocalizedAttributes}
     * @memberof AboutUsResponseDataObjectLocalized
     */
    'attributes'?: AboutUsResponseDataObjectLocalizedAttributes;
}
/**
 * 
 * @export
 * @interface AboutUsResponseDataObjectLocalizedAttributes
 */
export interface AboutUsResponseDataObjectLocalizedAttributes {
    /**
     * 
     * @type {AboutUsLocalizationResponseBanner}
     * @memberof AboutUsResponseDataObjectLocalizedAttributes
     */
    'banner'?: AboutUsLocalizationResponseBanner;
    /**
     * 
     * @type {Array<SectionsSubPageComponent>}
     * @memberof AboutUsResponseDataObjectLocalizedAttributes
     */
    'subPages'?: Array<SectionsSubPageComponent>;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof AboutUsResponseDataObjectLocalizedAttributes
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {Date}
     * @memberof AboutUsResponseDataObjectLocalizedAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AboutUsResponseDataObjectLocalizedAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof AboutUsResponseDataObjectLocalizedAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof AboutUsResponseDataObjectLocalizedAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseLocalizations}
     * @memberof AboutUsResponseDataObjectLocalizedAttributes
     */
    'localizations'?: AboutUsLocalizationResponseLocalizations;
    /**
     * 
     * @type {string}
     * @memberof AboutUsResponseDataObjectLocalizedAttributes
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface AgencyListResponse
 */
export interface AgencyListResponse {
    /**
     * 
     * @type {Array<AgencyListResponseDataItem>}
     * @memberof AgencyListResponse
     */
    'data'?: Array<AgencyListResponseDataItem>;
    /**
     * 
     * @type {AboutUsListResponseMeta}
     * @memberof AgencyListResponse
     */
    'meta'?: AboutUsListResponseMeta;
}
/**
 * 
 * @export
 * @interface AgencyListResponseDataItem
 */
export interface AgencyListResponseDataItem {
    /**
     * 
     * @type {number}
     * @memberof AgencyListResponseDataItem
     */
    'id'?: number;
    /**
     * 
     * @type {AgencyListResponseDataItemAttributes}
     * @memberof AgencyListResponseDataItem
     */
    'attributes'?: AgencyListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface AgencyListResponseDataItemAttributes
 */
export interface AgencyListResponseDataItemAttributes {
    /**
     * 
     * @type {string}
     * @memberof AgencyListResponseDataItemAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgencyListResponseDataItemAttributes
     */
    'provine'?: AgencyListResponseDataItemAttributesProvineEnum;
    /**
     * 
     * @type {string}
     * @memberof AgencyListResponseDataItemAttributes
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgencyListResponseDataItemAttributes
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {Date}
     * @memberof AgencyListResponseDataItemAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AgencyListResponseDataItemAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof AgencyListResponseDataItemAttributes
     */
    'publishedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy}
     * @memberof AgencyListResponseDataItemAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof AgencyListResponseDataItemAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}

export const AgencyListResponseDataItemAttributesProvineEnum = {
    ThnhPhHNi: 'Thành phố Hà Nội',
    TnhHGiang: 'Tỉnh Hà Giang',
    TnhCaoBng: 'Tỉnh Cao Bằng',
    TnhBcKn: 'Tỉnh Bắc Kạn',
    TnhTuynQuang: 'Tỉnh Tuyên Quang',
    TnhLoCai: 'Tỉnh Lào Cai',
    TnhInBin: 'Tỉnh Điện Biên',
    TnhLaiChu: 'Tỉnh Lai Châu',
    TnhSnLa: 'Tỉnh Sơn La',
    TnhYnBi: 'Tỉnh Yên Bái',
    TnhHoBnh: 'Tỉnh Hoà Bình',
    TnhThiNguyn: 'Tỉnh Thái Nguyên',
    TnhLngSn: 'Tỉnh Lạng Sơn',
    TnhQungNinh: 'Tỉnh Quảng Ninh',
    TnhBcGiang: 'Tỉnh Bắc Giang',
    TnhPhTh: 'Tỉnh Phú Thọ',
    TnhVnhPhc: 'Tỉnh Vĩnh Phúc',
    TnhBcNinh: 'Tỉnh Bắc Ninh',
    TnhHiDng: 'Tỉnh Hải Dương',
    ThnhPhHiPhng: 'Thành phố Hải Phòng',
    TnhHngYn: 'Tỉnh Hưng Yên',
    TnhThiBnh: 'Tỉnh Thái Bình',
    TnhHNam: 'Tỉnh Hà Nam',
    TnhNamNh: 'Tỉnh Nam Định',
    TnhNinhBnh: 'Tỉnh Ninh Bình',
    TnhThanhHa: 'Tỉnh Thanh Hóa',
    TnhNghAn: 'Tỉnh Nghệ An',
    TnhHTnh: 'Tỉnh Hà Tĩnh',
    TnhQungBnh: 'Tỉnh Quảng Bình',
    TnhQungTr: 'Tỉnh Quảng Trị',
    TnhThaThinHu: 'Tỉnh Thừa Thiên Huế',
    ThnhPhNng: 'Thành phố Đà Nẵng',
    TnhQungNam: 'Tỉnh Quảng Nam',
    TnhQungNgi: 'Tỉnh Quảng Ngãi',
    TnhBnhNh: 'Tỉnh Bình Định',
    TnhPhYn: 'Tỉnh Phú Yên',
    TnhKhnhHa: 'Tỉnh Khánh Hòa',
    TnhNinhThun: 'Tỉnh Ninh Thuận',
    TnhBnhThun: 'Tỉnh Bình Thuận',
    TnhKonTum: 'Tỉnh Kon Tum',
    TnhGiaLai: 'Tỉnh Gia Lai',
    TnhKLk: 'Tỉnh Đắk Lắk',
    TnhKNng: 'Tỉnh Đắk Nông',
    TnhLmNg: 'Tỉnh Lâm Đồng',
    TnhBnhPhc: 'Tỉnh Bình Phước',
    TnhTyNinh: 'Tỉnh Tây Ninh',
    TnhBnhDng: 'Tỉnh Bình Dương',
    TnhNgNai: 'Tỉnh Đồng Nai',
    TnhBRaVngTu: 'Tỉnh Bà Rịa - Vũng Tàu',
    ThnhPhHChMinh: 'Thành phố Hồ Chí Minh',
    TnhLongAn: 'Tỉnh Long An',
    TnhTinGiang: 'Tỉnh Tiền Giang',
    TnhBnTre: 'Tỉnh Bến Tre',
    TnhTrVinh: 'Tỉnh Trà Vinh',
    TnhVnhLong: 'Tỉnh Vĩnh Long',
    TnhNgThp: 'Tỉnh Đồng Tháp',
    TnhAnGiang: 'Tỉnh An Giang',
    TnhKinGiang: 'Tỉnh Kiên Giang',
    ThnhPhCnTh: 'Thành phố Cần Thơ',
    TnhHuGiang: 'Tỉnh Hậu Giang',
    TnhScTrng: 'Tỉnh Sóc Trăng',
    TnhBcLiu: 'Tỉnh Bạc Liêu',
    TnhCMau: 'Tỉnh Cà Mau'
} as const;

export type AgencyListResponseDataItemAttributesProvineEnum = typeof AgencyListResponseDataItemAttributesProvineEnum[keyof typeof AgencyListResponseDataItemAttributesProvineEnum];

/**
 * 
 * @export
 * @interface AgencyRequest
 */
export interface AgencyRequest {
    /**
     * 
     * @type {AgencyRequestData}
     * @memberof AgencyRequest
     */
    'data': AgencyRequestData;
}
/**
 * 
 * @export
 * @interface AgencyRequestData
 */
export interface AgencyRequestData {
    /**
     * 
     * @type {string}
     * @memberof AgencyRequestData
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgencyRequestData
     */
    'provine'?: AgencyRequestDataProvineEnum;
    /**
     * 
     * @type {string}
     * @memberof AgencyRequestData
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof AgencyRequestData
     */
    'phoneNumber'?: string;
}

export const AgencyRequestDataProvineEnum = {
    ThnhPhHNi: 'Thành phố Hà Nội',
    TnhHGiang: 'Tỉnh Hà Giang',
    TnhCaoBng: 'Tỉnh Cao Bằng',
    TnhBcKn: 'Tỉnh Bắc Kạn',
    TnhTuynQuang: 'Tỉnh Tuyên Quang',
    TnhLoCai: 'Tỉnh Lào Cai',
    TnhInBin: 'Tỉnh Điện Biên',
    TnhLaiChu: 'Tỉnh Lai Châu',
    TnhSnLa: 'Tỉnh Sơn La',
    TnhYnBi: 'Tỉnh Yên Bái',
    TnhHoBnh: 'Tỉnh Hoà Bình',
    TnhThiNguyn: 'Tỉnh Thái Nguyên',
    TnhLngSn: 'Tỉnh Lạng Sơn',
    TnhQungNinh: 'Tỉnh Quảng Ninh',
    TnhBcGiang: 'Tỉnh Bắc Giang',
    TnhPhTh: 'Tỉnh Phú Thọ',
    TnhVnhPhc: 'Tỉnh Vĩnh Phúc',
    TnhBcNinh: 'Tỉnh Bắc Ninh',
    TnhHiDng: 'Tỉnh Hải Dương',
    ThnhPhHiPhng: 'Thành phố Hải Phòng',
    TnhHngYn: 'Tỉnh Hưng Yên',
    TnhThiBnh: 'Tỉnh Thái Bình',
    TnhHNam: 'Tỉnh Hà Nam',
    TnhNamNh: 'Tỉnh Nam Định',
    TnhNinhBnh: 'Tỉnh Ninh Bình',
    TnhThanhHa: 'Tỉnh Thanh Hóa',
    TnhNghAn: 'Tỉnh Nghệ An',
    TnhHTnh: 'Tỉnh Hà Tĩnh',
    TnhQungBnh: 'Tỉnh Quảng Bình',
    TnhQungTr: 'Tỉnh Quảng Trị',
    TnhThaThinHu: 'Tỉnh Thừa Thiên Huế',
    ThnhPhNng: 'Thành phố Đà Nẵng',
    TnhQungNam: 'Tỉnh Quảng Nam',
    TnhQungNgi: 'Tỉnh Quảng Ngãi',
    TnhBnhNh: 'Tỉnh Bình Định',
    TnhPhYn: 'Tỉnh Phú Yên',
    TnhKhnhHa: 'Tỉnh Khánh Hòa',
    TnhNinhThun: 'Tỉnh Ninh Thuận',
    TnhBnhThun: 'Tỉnh Bình Thuận',
    TnhKonTum: 'Tỉnh Kon Tum',
    TnhGiaLai: 'Tỉnh Gia Lai',
    TnhKLk: 'Tỉnh Đắk Lắk',
    TnhKNng: 'Tỉnh Đắk Nông',
    TnhLmNg: 'Tỉnh Lâm Đồng',
    TnhBnhPhc: 'Tỉnh Bình Phước',
    TnhTyNinh: 'Tỉnh Tây Ninh',
    TnhBnhDng: 'Tỉnh Bình Dương',
    TnhNgNai: 'Tỉnh Đồng Nai',
    TnhBRaVngTu: 'Tỉnh Bà Rịa - Vũng Tàu',
    ThnhPhHChMinh: 'Thành phố Hồ Chí Minh',
    TnhLongAn: 'Tỉnh Long An',
    TnhTinGiang: 'Tỉnh Tiền Giang',
    TnhBnTre: 'Tỉnh Bến Tre',
    TnhTrVinh: 'Tỉnh Trà Vinh',
    TnhVnhLong: 'Tỉnh Vĩnh Long',
    TnhNgThp: 'Tỉnh Đồng Tháp',
    TnhAnGiang: 'Tỉnh An Giang',
    TnhKinGiang: 'Tỉnh Kiên Giang',
    ThnhPhCnTh: 'Thành phố Cần Thơ',
    TnhHuGiang: 'Tỉnh Hậu Giang',
    TnhScTrng: 'Tỉnh Sóc Trăng',
    TnhBcLiu: 'Tỉnh Bạc Liêu',
    TnhCMau: 'Tỉnh Cà Mau'
} as const;

export type AgencyRequestDataProvineEnum = typeof AgencyRequestDataProvineEnum[keyof typeof AgencyRequestDataProvineEnum];

/**
 * 
 * @export
 * @interface AgencyResponse
 */
export interface AgencyResponse {
    /**
     * 
     * @type {AgencyResponseDataObject}
     * @memberof AgencyResponse
     */
    'data'?: AgencyResponseDataObject;
    /**
     * 
     * @type {object}
     * @memberof AgencyResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface AgencyResponseDataObject
 */
export interface AgencyResponseDataObject {
    /**
     * 
     * @type {number}
     * @memberof AgencyResponseDataObject
     */
    'id'?: number;
    /**
     * 
     * @type {AgencyListResponseDataItemAttributes}
     * @memberof AgencyResponseDataObject
     */
    'attributes'?: AgencyListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface AuthChangePasswordPostRequest
 */
export interface AuthChangePasswordPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthChangePasswordPostRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof AuthChangePasswordPostRequest
     */
    'currentPassword': string;
    /**
     * 
     * @type {string}
     * @memberof AuthChangePasswordPostRequest
     */
    'passwordConfirmation': string;
}
/**
 * 
 * @export
 * @interface AuthForgotPasswordPostRequest
 */
export interface AuthForgotPasswordPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthForgotPasswordPostRequest
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface AuthLocalPostRequest
 */
export interface AuthLocalPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthLocalPostRequest
     */
    'identifier'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthLocalPostRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface AuthLocalRegisterPostRequest
 */
export interface AuthLocalRegisterPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthLocalRegisterPostRequest
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthLocalRegisterPostRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthLocalRegisterPostRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface AuthResetPasswordPostRequest
 */
export interface AuthResetPasswordPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthResetPasswordPostRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthResetPasswordPostRequest
     */
    'passwordConfirmation'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthResetPasswordPostRequest
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface AuthSendEmailConfirmationPost200Response
 */
export interface AuthSendEmailConfirmationPost200Response {
    /**
     * 
     * @type {string}
     * @memberof AuthSendEmailConfirmationPost200Response
     */
    'email'?: string;
    /**
     * 
     * @type {Enum}
     * @memberof AuthSendEmailConfirmationPost200Response
     */
    'sent'?: AuthSendEmailConfirmationPost200ResponseSentEnum;
}

export const AuthSendEmailConfirmationPost200ResponseSentEnum = {
    True: 'true'
} as const;

export type AuthSendEmailConfirmationPost200ResponseSentEnum = typeof AuthSendEmailConfirmationPost200ResponseSentEnum[keyof typeof AuthSendEmailConfirmationPost200ResponseSentEnum];

/**
 * 
 * @export
 * @interface BlogListResponse
 */
export interface BlogListResponse {
    /**
     * 
     * @type {Array<BlogListResponseDataItem>}
     * @memberof BlogListResponse
     */
    'data'?: Array<BlogListResponseDataItem>;
    /**
     * 
     * @type {AboutUsListResponseMeta}
     * @memberof BlogListResponse
     */
    'meta'?: AboutUsListResponseMeta;
}
/**
 * 
 * @export
 * @interface BlogListResponseDataItem
 */
export interface BlogListResponseDataItem {
    /**
     * 
     * @type {number}
     * @memberof BlogListResponseDataItem
     */
    'id'?: number;
    /**
     * 
     * @type {BlogListResponseDataItemAttributes}
     * @memberof BlogListResponseDataItem
     */
    'attributes'?: BlogListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface BlogListResponseDataItemAttributes
 */
export interface BlogListResponseDataItemAttributes {
    /**
     * 
     * @type {string}
     * @memberof BlogListResponseDataItemAttributes
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogListResponseDataItemAttributes
     */
    'content'?: string;
    /**
     * 
     * @type {BlogLocalizationResponseBlogType}
     * @memberof BlogListResponseDataItemAttributes
     */
    'blog_type'?: BlogLocalizationResponseBlogType;
    /**
     * 
     * @type {SectionsSubPageComponentFeaturesInnerImage}
     * @memberof BlogListResponseDataItemAttributes
     */
    'thumbnail'?: SectionsSubPageComponentFeaturesInnerImage;
    /**
     * 
     * @type {string}
     * @memberof BlogListResponseDataItemAttributes
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogListResponseDataItemAttributes
     */
    'shortDescription'?: string;
    /**
     * 
     * @type {BlogLocalizationResponseTags}
     * @memberof BlogListResponseDataItemAttributes
     */
    'tags'?: BlogLocalizationResponseTags;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof BlogListResponseDataItemAttributes
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {Date}
     * @memberof BlogListResponseDataItemAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BlogListResponseDataItemAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BlogListResponseDataItemAttributes
     */
    'publishedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof BlogListResponseDataItemAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof BlogListResponseDataItemAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {BlogListResponseDataItemAttributesLocalizations}
     * @memberof BlogListResponseDataItemAttributes
     */
    'localizations'?: BlogListResponseDataItemAttributesLocalizations;
    /**
     * 
     * @type {string}
     * @memberof BlogListResponseDataItemAttributes
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface BlogListResponseDataItemAttributesLocalizations
 */
export interface BlogListResponseDataItemAttributesLocalizations {
    /**
     * 
     * @type {Array<BlogListResponseDataItemLocalized>}
     * @memberof BlogListResponseDataItemAttributesLocalizations
     */
    'data'?: Array<BlogListResponseDataItemLocalized>;
}
/**
 * 
 * @export
 * @interface BlogListResponseDataItemLocalized
 */
export interface BlogListResponseDataItemLocalized {
    /**
     * 
     * @type {number}
     * @memberof BlogListResponseDataItemLocalized
     */
    'id'?: number;
    /**
     * 
     * @type {BlogResponseDataObjectLocalizedAttributes}
     * @memberof BlogListResponseDataItemLocalized
     */
    'attributes'?: BlogResponseDataObjectLocalizedAttributes;
}
/**
 * 
 * @export
 * @interface BlogLocalizationRequest
 */
export interface BlogLocalizationRequest {
    /**
     * 
     * @type {string}
     * @memberof BlogLocalizationRequest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof BlogLocalizationRequest
     */
    'content'?: string;
    /**
     * 
     * @type {AboutUsLocalizationRequestBanner}
     * @memberof BlogLocalizationRequest
     */
    'blog_type'?: AboutUsLocalizationRequestBanner;
    /**
     * 
     * @type {AboutUsLocalizationRequestBanner}
     * @memberof BlogLocalizationRequest
     */
    'thumbnail'?: AboutUsLocalizationRequestBanner;
    /**
     * 
     * @type {string}
     * @memberof BlogLocalizationRequest
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogLocalizationRequest
     */
    'shortDescription'?: string;
    /**
     * 
     * @type {Array<AboutUsLocalizationRequestBanner>}
     * @memberof BlogLocalizationRequest
     */
    'tags'?: Array<AboutUsLocalizationRequestBanner>;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof BlogLocalizationRequest
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof BlogLocalizationRequest
     */
    'locale': string;
}
/**
 * 
 * @export
 * @interface BlogLocalizationResponse
 */
export interface BlogLocalizationResponse {
    /**
     * 
     * @type {number}
     * @memberof BlogLocalizationResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BlogLocalizationResponse
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogLocalizationResponse
     */
    'content'?: string;
    /**
     * 
     * @type {BlogLocalizationResponseBlogType}
     * @memberof BlogLocalizationResponse
     */
    'blog_type'?: BlogLocalizationResponseBlogType;
    /**
     * 
     * @type {SectionsSubPageComponentFeaturesInnerImage}
     * @memberof BlogLocalizationResponse
     */
    'thumbnail'?: SectionsSubPageComponentFeaturesInnerImage;
    /**
     * 
     * @type {string}
     * @memberof BlogLocalizationResponse
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogLocalizationResponse
     */
    'shortDescription'?: string;
    /**
     * 
     * @type {BlogLocalizationResponseTags}
     * @memberof BlogLocalizationResponse
     */
    'tags'?: BlogLocalizationResponseTags;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof BlogLocalizationResponse
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {Date}
     * @memberof BlogLocalizationResponse
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BlogLocalizationResponse
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BlogLocalizationResponse
     */
    'publishedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof BlogLocalizationResponse
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof BlogLocalizationResponse
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseLocalizations}
     * @memberof BlogLocalizationResponse
     */
    'localizations'?: AboutUsLocalizationResponseLocalizations;
    /**
     * 
     * @type {string}
     * @memberof BlogLocalizationResponse
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface BlogLocalizationResponseBlogType
 */
export interface BlogLocalizationResponseBlogType {
    /**
     * 
     * @type {BlogLocalizationResponseBlogTypeData}
     * @memberof BlogLocalizationResponseBlogType
     */
    'data'?: BlogLocalizationResponseBlogTypeData;
}
/**
 * 
 * @export
 * @interface BlogLocalizationResponseBlogTypeData
 */
export interface BlogLocalizationResponseBlogTypeData {
    /**
     * 
     * @type {number}
     * @memberof BlogLocalizationResponseBlogTypeData
     */
    'id'?: number;
    /**
     * 
     * @type {BlogLocalizationResponseBlogTypeDataAttributes}
     * @memberof BlogLocalizationResponseBlogTypeData
     */
    'attributes'?: BlogLocalizationResponseBlogTypeDataAttributes;
}
/**
 * 
 * @export
 * @interface BlogLocalizationResponseBlogTypeDataAttributes
 */
export interface BlogLocalizationResponseBlogTypeDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof BlogLocalizationResponseBlogTypeDataAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogLocalizationResponseBlogTypeDataAttributes
     */
    'slug'?: string;
    /**
     * 
     * @type {BlogLocalizationResponseBlogTypeDataAttributesMeta}
     * @memberof BlogLocalizationResponseBlogTypeDataAttributes
     */
    'meta'?: BlogLocalizationResponseBlogTypeDataAttributesMeta;
    /**
     * 
     * @type {Date}
     * @memberof BlogLocalizationResponseBlogTypeDataAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BlogLocalizationResponseBlogTypeDataAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof BlogLocalizationResponseBlogTypeDataAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof BlogLocalizationResponseBlogTypeDataAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseLocalizations}
     * @memberof BlogLocalizationResponseBlogTypeDataAttributes
     */
    'localizations'?: AboutUsLocalizationResponseLocalizations;
    /**
     * 
     * @type {string}
     * @memberof BlogLocalizationResponseBlogTypeDataAttributes
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface BlogLocalizationResponseBlogTypeDataAttributesMeta
 */
export interface BlogLocalizationResponseBlogTypeDataAttributesMeta {
    /**
     * 
     * @type {number}
     * @memberof BlogLocalizationResponseBlogTypeDataAttributesMeta
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BlogLocalizationResponseBlogTypeDataAttributesMeta
     */
    'metaDescription'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogLocalizationResponseBlogTypeDataAttributesMeta
     */
    'keywords'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogLocalizationResponseBlogTypeDataAttributesMeta
     */
    'metaRobots'?: string;
    /**
     * 
     * @type {any}
     * @memberof BlogLocalizationResponseBlogTypeDataAttributesMeta
     */
    'structuredData'?: any;
    /**
     * 
     * @type {string}
     * @memberof BlogLocalizationResponseBlogTypeDataAttributesMeta
     */
    'metaViewport'?: string;
    /**
     * 
     * @type {AboutUsLocalizationResponseBanner}
     * @memberof BlogLocalizationResponseBlogTypeDataAttributesMeta
     */
    'metaImage'?: AboutUsLocalizationResponseBanner;
    /**
     * 
     * @type {string}
     * @memberof BlogLocalizationResponseBlogTypeDataAttributesMeta
     */
    'metaTitle'?: string;
}
/**
 * 
 * @export
 * @interface BlogLocalizationResponseTags
 */
export interface BlogLocalizationResponseTags {
    /**
     * 
     * @type {Array<BlogLocalizationResponseTagsDataInner>}
     * @memberof BlogLocalizationResponseTags
     */
    'data'?: Array<BlogLocalizationResponseTagsDataInner>;
}
/**
 * 
 * @export
 * @interface BlogLocalizationResponseTagsDataInner
 */
export interface BlogLocalizationResponseTagsDataInner {
    /**
     * 
     * @type {number}
     * @memberof BlogLocalizationResponseTagsDataInner
     */
    'id'?: number;
    /**
     * 
     * @type {BlogLocalizationResponseTagsDataInnerAttributes}
     * @memberof BlogLocalizationResponseTagsDataInner
     */
    'attributes'?: BlogLocalizationResponseTagsDataInnerAttributes;
}
/**
 * 
 * @export
 * @interface BlogLocalizationResponseTagsDataInnerAttributes
 */
export interface BlogLocalizationResponseTagsDataInnerAttributes {
    /**
     * 
     * @type {string}
     * @memberof BlogLocalizationResponseTagsDataInnerAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {Date}
     * @memberof BlogLocalizationResponseTagsDataInnerAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BlogLocalizationResponseTagsDataInnerAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BlogLocalizationResponseTagsDataInnerAttributes
     */
    'publishedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof BlogLocalizationResponseTagsDataInnerAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof BlogLocalizationResponseTagsDataInnerAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}
/**
 * 
 * @export
 * @interface BlogRequest
 */
export interface BlogRequest {
    /**
     * 
     * @type {BlogRequestData}
     * @memberof BlogRequest
     */
    'data': BlogRequestData;
}
/**
 * 
 * @export
 * @interface BlogRequestData
 */
export interface BlogRequestData {
    /**
     * 
     * @type {string}
     * @memberof BlogRequestData
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof BlogRequestData
     */
    'content'?: string;
    /**
     * 
     * @type {AboutUsLocalizationRequestBanner}
     * @memberof BlogRequestData
     */
    'blog_type'?: AboutUsLocalizationRequestBanner;
    /**
     * 
     * @type {AboutUsLocalizationRequestBanner}
     * @memberof BlogRequestData
     */
    'thumbnail'?: AboutUsLocalizationRequestBanner;
    /**
     * 
     * @type {string}
     * @memberof BlogRequestData
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogRequestData
     */
    'shortDescription'?: string;
    /**
     * 
     * @type {Array<AboutUsLocalizationRequestBanner>}
     * @memberof BlogRequestData
     */
    'tags'?: Array<AboutUsLocalizationRequestBanner>;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof BlogRequestData
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof BlogRequestData
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface BlogResponse
 */
export interface BlogResponse {
    /**
     * 
     * @type {BlogResponseDataObject}
     * @memberof BlogResponse
     */
    'data'?: BlogResponseDataObject;
    /**
     * 
     * @type {object}
     * @memberof BlogResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface BlogResponseDataObject
 */
export interface BlogResponseDataObject {
    /**
     * 
     * @type {number}
     * @memberof BlogResponseDataObject
     */
    'id'?: number;
    /**
     * 
     * @type {BlogResponseDataObjectAttributes}
     * @memberof BlogResponseDataObject
     */
    'attributes'?: BlogResponseDataObjectAttributes;
}
/**
 * 
 * @export
 * @interface BlogResponseDataObjectAttributes
 */
export interface BlogResponseDataObjectAttributes {
    /**
     * 
     * @type {string}
     * @memberof BlogResponseDataObjectAttributes
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogResponseDataObjectAttributes
     */
    'content'?: string;
    /**
     * 
     * @type {BlogLocalizationResponseBlogType}
     * @memberof BlogResponseDataObjectAttributes
     */
    'blog_type'?: BlogLocalizationResponseBlogType;
    /**
     * 
     * @type {SectionsSubPageComponentFeaturesInnerImage}
     * @memberof BlogResponseDataObjectAttributes
     */
    'thumbnail'?: SectionsSubPageComponentFeaturesInnerImage;
    /**
     * 
     * @type {string}
     * @memberof BlogResponseDataObjectAttributes
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogResponseDataObjectAttributes
     */
    'shortDescription'?: string;
    /**
     * 
     * @type {BlogLocalizationResponseTags}
     * @memberof BlogResponseDataObjectAttributes
     */
    'tags'?: BlogLocalizationResponseTags;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof BlogResponseDataObjectAttributes
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {Date}
     * @memberof BlogResponseDataObjectAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BlogResponseDataObjectAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BlogResponseDataObjectAttributes
     */
    'publishedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof BlogResponseDataObjectAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof BlogResponseDataObjectAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {BlogResponseDataObjectAttributesLocalizations}
     * @memberof BlogResponseDataObjectAttributes
     */
    'localizations'?: BlogResponseDataObjectAttributesLocalizations;
    /**
     * 
     * @type {string}
     * @memberof BlogResponseDataObjectAttributes
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface BlogResponseDataObjectAttributesLocalizations
 */
export interface BlogResponseDataObjectAttributesLocalizations {
    /**
     * 
     * @type {Array<BlogResponseDataObjectLocalized>}
     * @memberof BlogResponseDataObjectAttributesLocalizations
     */
    'data'?: Array<BlogResponseDataObjectLocalized>;
}
/**
 * 
 * @export
 * @interface BlogResponseDataObjectLocalized
 */
export interface BlogResponseDataObjectLocalized {
    /**
     * 
     * @type {number}
     * @memberof BlogResponseDataObjectLocalized
     */
    'id'?: number;
    /**
     * 
     * @type {BlogResponseDataObjectLocalizedAttributes}
     * @memberof BlogResponseDataObjectLocalized
     */
    'attributes'?: BlogResponseDataObjectLocalizedAttributes;
}
/**
 * 
 * @export
 * @interface BlogResponseDataObjectLocalizedAttributes
 */
export interface BlogResponseDataObjectLocalizedAttributes {
    /**
     * 
     * @type {string}
     * @memberof BlogResponseDataObjectLocalizedAttributes
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogResponseDataObjectLocalizedAttributes
     */
    'content'?: string;
    /**
     * 
     * @type {BlogLocalizationResponseBlogType}
     * @memberof BlogResponseDataObjectLocalizedAttributes
     */
    'blog_type'?: BlogLocalizationResponseBlogType;
    /**
     * 
     * @type {SectionsSubPageComponentFeaturesInnerImage}
     * @memberof BlogResponseDataObjectLocalizedAttributes
     */
    'thumbnail'?: SectionsSubPageComponentFeaturesInnerImage;
    /**
     * 
     * @type {string}
     * @memberof BlogResponseDataObjectLocalizedAttributes
     */
    'slug'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogResponseDataObjectLocalizedAttributes
     */
    'shortDescription'?: string;
    /**
     * 
     * @type {BlogLocalizationResponseTags}
     * @memberof BlogResponseDataObjectLocalizedAttributes
     */
    'tags'?: BlogLocalizationResponseTags;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof BlogResponseDataObjectLocalizedAttributes
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {Date}
     * @memberof BlogResponseDataObjectLocalizedAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BlogResponseDataObjectLocalizedAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BlogResponseDataObjectLocalizedAttributes
     */
    'publishedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof BlogResponseDataObjectLocalizedAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof BlogResponseDataObjectLocalizedAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseLocalizations}
     * @memberof BlogResponseDataObjectLocalizedAttributes
     */
    'localizations'?: AboutUsLocalizationResponseLocalizations;
    /**
     * 
     * @type {string}
     * @memberof BlogResponseDataObjectLocalizedAttributes
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface BlogTypeListResponse
 */
export interface BlogTypeListResponse {
    /**
     * 
     * @type {Array<BlogTypeListResponseDataItem>}
     * @memberof BlogTypeListResponse
     */
    'data'?: Array<BlogTypeListResponseDataItem>;
    /**
     * 
     * @type {AboutUsListResponseMeta}
     * @memberof BlogTypeListResponse
     */
    'meta'?: AboutUsListResponseMeta;
}
/**
 * 
 * @export
 * @interface BlogTypeListResponseDataItem
 */
export interface BlogTypeListResponseDataItem {
    /**
     * 
     * @type {number}
     * @memberof BlogTypeListResponseDataItem
     */
    'id'?: number;
    /**
     * 
     * @type {BlogTypeListResponseDataItemAttributes}
     * @memberof BlogTypeListResponseDataItem
     */
    'attributes'?: BlogTypeListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface BlogTypeListResponseDataItemAttributes
 */
export interface BlogTypeListResponseDataItemAttributes {
    /**
     * 
     * @type {string}
     * @memberof BlogTypeListResponseDataItemAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogTypeListResponseDataItemAttributes
     */
    'slug'?: string;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof BlogTypeListResponseDataItemAttributes
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {Date}
     * @memberof BlogTypeListResponseDataItemAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BlogTypeListResponseDataItemAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof BlogTypeListResponseDataItemAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof BlogTypeListResponseDataItemAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {BlogTypeListResponseDataItemAttributesLocalizations}
     * @memberof BlogTypeListResponseDataItemAttributes
     */
    'localizations'?: BlogTypeListResponseDataItemAttributesLocalizations;
    /**
     * 
     * @type {string}
     * @memberof BlogTypeListResponseDataItemAttributes
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface BlogTypeListResponseDataItemAttributesLocalizations
 */
export interface BlogTypeListResponseDataItemAttributesLocalizations {
    /**
     * 
     * @type {Array<BlogTypeListResponseDataItemLocalized>}
     * @memberof BlogTypeListResponseDataItemAttributesLocalizations
     */
    'data'?: Array<BlogTypeListResponseDataItemLocalized>;
}
/**
 * 
 * @export
 * @interface BlogTypeListResponseDataItemLocalized
 */
export interface BlogTypeListResponseDataItemLocalized {
    /**
     * 
     * @type {number}
     * @memberof BlogTypeListResponseDataItemLocalized
     */
    'id'?: number;
    /**
     * 
     * @type {BlogTypeResponseDataObjectLocalizedAttributes}
     * @memberof BlogTypeListResponseDataItemLocalized
     */
    'attributes'?: BlogTypeResponseDataObjectLocalizedAttributes;
}
/**
 * 
 * @export
 * @interface BlogTypeLocalizationRequest
 */
export interface BlogTypeLocalizationRequest {
    /**
     * 
     * @type {string}
     * @memberof BlogTypeLocalizationRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogTypeLocalizationRequest
     */
    'slug'?: string;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof BlogTypeLocalizationRequest
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof BlogTypeLocalizationRequest
     */
    'locale': string;
}
/**
 * 
 * @export
 * @interface BlogTypeLocalizationResponse
 */
export interface BlogTypeLocalizationResponse {
    /**
     * 
     * @type {number}
     * @memberof BlogTypeLocalizationResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BlogTypeLocalizationResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogTypeLocalizationResponse
     */
    'slug'?: string;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof BlogTypeLocalizationResponse
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {Date}
     * @memberof BlogTypeLocalizationResponse
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BlogTypeLocalizationResponse
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof BlogTypeLocalizationResponse
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof BlogTypeLocalizationResponse
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseLocalizations}
     * @memberof BlogTypeLocalizationResponse
     */
    'localizations'?: AboutUsLocalizationResponseLocalizations;
    /**
     * 
     * @type {string}
     * @memberof BlogTypeLocalizationResponse
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface BlogTypeRequest
 */
export interface BlogTypeRequest {
    /**
     * 
     * @type {BlogTypeRequestData}
     * @memberof BlogTypeRequest
     */
    'data': BlogTypeRequestData;
}
/**
 * 
 * @export
 * @interface BlogTypeRequestData
 */
export interface BlogTypeRequestData {
    /**
     * 
     * @type {string}
     * @memberof BlogTypeRequestData
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogTypeRequestData
     */
    'slug'?: string;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof BlogTypeRequestData
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof BlogTypeRequestData
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface BlogTypeResponse
 */
export interface BlogTypeResponse {
    /**
     * 
     * @type {BlogTypeResponseDataObject}
     * @memberof BlogTypeResponse
     */
    'data'?: BlogTypeResponseDataObject;
    /**
     * 
     * @type {object}
     * @memberof BlogTypeResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface BlogTypeResponseDataObject
 */
export interface BlogTypeResponseDataObject {
    /**
     * 
     * @type {number}
     * @memberof BlogTypeResponseDataObject
     */
    'id'?: number;
    /**
     * 
     * @type {BlogTypeResponseDataObjectAttributes}
     * @memberof BlogTypeResponseDataObject
     */
    'attributes'?: BlogTypeResponseDataObjectAttributes;
}
/**
 * 
 * @export
 * @interface BlogTypeResponseDataObjectAttributes
 */
export interface BlogTypeResponseDataObjectAttributes {
    /**
     * 
     * @type {string}
     * @memberof BlogTypeResponseDataObjectAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogTypeResponseDataObjectAttributes
     */
    'slug'?: string;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof BlogTypeResponseDataObjectAttributes
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {Date}
     * @memberof BlogTypeResponseDataObjectAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BlogTypeResponseDataObjectAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof BlogTypeResponseDataObjectAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof BlogTypeResponseDataObjectAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {BlogTypeResponseDataObjectAttributesLocalizations}
     * @memberof BlogTypeResponseDataObjectAttributes
     */
    'localizations'?: BlogTypeResponseDataObjectAttributesLocalizations;
    /**
     * 
     * @type {string}
     * @memberof BlogTypeResponseDataObjectAttributes
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface BlogTypeResponseDataObjectAttributesLocalizations
 */
export interface BlogTypeResponseDataObjectAttributesLocalizations {
    /**
     * 
     * @type {Array<BlogTypeResponseDataObjectLocalized>}
     * @memberof BlogTypeResponseDataObjectAttributesLocalizations
     */
    'data'?: Array<BlogTypeResponseDataObjectLocalized>;
}
/**
 * 
 * @export
 * @interface BlogTypeResponseDataObjectLocalized
 */
export interface BlogTypeResponseDataObjectLocalized {
    /**
     * 
     * @type {number}
     * @memberof BlogTypeResponseDataObjectLocalized
     */
    'id'?: number;
    /**
     * 
     * @type {BlogTypeResponseDataObjectLocalizedAttributes}
     * @memberof BlogTypeResponseDataObjectLocalized
     */
    'attributes'?: BlogTypeResponseDataObjectLocalizedAttributes;
}
/**
 * 
 * @export
 * @interface BlogTypeResponseDataObjectLocalizedAttributes
 */
export interface BlogTypeResponseDataObjectLocalizedAttributes {
    /**
     * 
     * @type {string}
     * @memberof BlogTypeResponseDataObjectLocalizedAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof BlogTypeResponseDataObjectLocalizedAttributes
     */
    'slug'?: string;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof BlogTypeResponseDataObjectLocalizedAttributes
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {Date}
     * @memberof BlogTypeResponseDataObjectLocalizedAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof BlogTypeResponseDataObjectLocalizedAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof BlogTypeResponseDataObjectLocalizedAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof BlogTypeResponseDataObjectLocalizedAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseLocalizations}
     * @memberof BlogTypeResponseDataObjectLocalizedAttributes
     */
    'localizations'?: AboutUsLocalizationResponseLocalizations;
    /**
     * 
     * @type {string}
     * @memberof BlogTypeResponseDataObjectLocalizedAttributes
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface ElementsFeatureComponent
 */
export interface ElementsFeatureComponent {
    /**
     * 
     * @type {number}
     * @memberof ElementsFeatureComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ElementsFeatureComponent
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ElementsFeatureComponent
     */
    'subTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof ElementsFeatureComponent
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof ElementsFeatureComponent
     */
    'imagePosition'?: ElementsFeatureComponentImagePositionEnum;
    /**
     * 
     * @type {SectionsSubPageComponentFeaturesInnerImage}
     * @memberof ElementsFeatureComponent
     */
    'image'?: SectionsSubPageComponentFeaturesInnerImage;
    /**
     * 
     * @type {SectionsSubPageComponentFeaturesInnerImage}
     * @memberof ElementsFeatureComponent
     */
    'image2'?: SectionsSubPageComponentFeaturesInnerImage;
    /**
     * 
     * @type {string}
     * @memberof ElementsFeatureComponent
     */
    'content2'?: string;
    /**
     * 
     * @type {string}
     * @memberof ElementsFeatureComponent
     */
    'buttonTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof ElementsFeatureComponent
     */
    'buttonUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof ElementsFeatureComponent
     */
    'name2'?: string;
    /**
     * 
     * @type {string}
     * @memberof ElementsFeatureComponent
     */
    'subTitle2'?: string;
}

export const ElementsFeatureComponentImagePositionEnum = {
    Left: 'left',
    Right: 'right',
    Center: 'center'
} as const;

export type ElementsFeatureComponentImagePositionEnum = typeof ElementsFeatureComponentImagePositionEnum[keyof typeof ElementsFeatureComponentImagePositionEnum];

/**
 * 
 * @export
 * @interface ElementsHeroComponent
 */
export interface ElementsHeroComponent {
    /**
     * 
     * @type {number}
     * @memberof ElementsHeroComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ElementsHeroComponent
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ElementsHeroComponent
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ElementsHeroComponent
     */
    'subTitle'?: string;
    /**
     * 
     * @type {AboutUsLocalizationResponseBanner}
     * @memberof ElementsHeroComponent
     */
    'picture'?: AboutUsLocalizationResponseBanner;
    /**
     * 
     * @type {ElementsHeroComponentButton}
     * @memberof ElementsHeroComponent
     */
    'button'?: ElementsHeroComponentButton;
}
/**
 * 
 * @export
 * @interface ElementsHeroComponentButton
 */
export interface ElementsHeroComponentButton {
    /**
     * 
     * @type {number}
     * @memberof ElementsHeroComponentButton
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ElementsHeroComponentButton
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ElementsHeroComponentButton
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface ElementsSocialComponent
 */
export interface ElementsSocialComponent {
    /**
     * 
     * @type {number}
     * @memberof ElementsSocialComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ElementsSocialComponent
     */
    'facebook'?: string;
    /**
     * 
     * @type {string}
     * @memberof ElementsSocialComponent
     */
    'youtube'?: string;
    /**
     * 
     * @type {string}
     * @memberof ElementsSocialComponent
     */
    'tiktok'?: string;
    /**
     * 
     * @type {string}
     * @memberof ElementsSocialComponent
     */
    'zalo'?: string;
}
/**
 * @type ErrorData
 * @export
 */
export type ErrorData = Array<object> | object;

/**
 * 
 * @export
 * @interface ErrorError
 */
export interface ErrorError {
    /**
     * 
     * @type {number}
     * @memberof ErrorError
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorError
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorError
     */
    'message'?: string;
    /**
     * 
     * @type {object}
     * @memberof ErrorError
     */
    'details'?: object;
}
/**
 * 
 * @export
 * @interface FaqListResponse
 */
export interface FaqListResponse {
    /**
     * 
     * @type {Array<FaqListResponseDataItem>}
     * @memberof FaqListResponse
     */
    'data'?: Array<FaqListResponseDataItem>;
    /**
     * 
     * @type {AboutUsListResponseMeta}
     * @memberof FaqListResponse
     */
    'meta'?: AboutUsListResponseMeta;
}
/**
 * 
 * @export
 * @interface FaqListResponseDataItem
 */
export interface FaqListResponseDataItem {
    /**
     * 
     * @type {number}
     * @memberof FaqListResponseDataItem
     */
    'id'?: number;
    /**
     * 
     * @type {FaqListResponseDataItemAttributes}
     * @memberof FaqListResponseDataItem
     */
    'attributes'?: FaqListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface FaqListResponseDataItemAttributes
 */
export interface FaqListResponseDataItemAttributes {
    /**
     * 
     * @type {string}
     * @memberof FaqListResponseDataItemAttributes
     */
    'question'?: string;
    /**
     * 
     * @type {string}
     * @memberof FaqListResponseDataItemAttributes
     */
    'answer'?: string;
    /**
     * 
     * @type {Date}
     * @memberof FaqListResponseDataItemAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof FaqListResponseDataItemAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof FaqListResponseDataItemAttributes
     */
    'publishedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy}
     * @memberof FaqListResponseDataItemAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof FaqListResponseDataItemAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}
/**
 * 
 * @export
 * @interface FaqRequest
 */
export interface FaqRequest {
    /**
     * 
     * @type {FaqRequestData}
     * @memberof FaqRequest
     */
    'data': FaqRequestData;
}
/**
 * 
 * @export
 * @interface FaqRequestData
 */
export interface FaqRequestData {
    /**
     * 
     * @type {string}
     * @memberof FaqRequestData
     */
    'question'?: string;
    /**
     * 
     * @type {string}
     * @memberof FaqRequestData
     */
    'answer'?: string;
}
/**
 * 
 * @export
 * @interface FaqResponse
 */
export interface FaqResponse {
    /**
     * 
     * @type {FaqResponseDataObject}
     * @memberof FaqResponse
     */
    'data'?: FaqResponseDataObject;
    /**
     * 
     * @type {object}
     * @memberof FaqResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface FaqResponseDataObject
 */
export interface FaqResponseDataObject {
    /**
     * 
     * @type {number}
     * @memberof FaqResponseDataObject
     */
    'id'?: number;
    /**
     * 
     * @type {FaqListResponseDataItemAttributes}
     * @memberof FaqResponseDataObject
     */
    'attributes'?: FaqListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface GlobalListResponse
 */
export interface GlobalListResponse {
    /**
     * 
     * @type {Array<GlobalListResponseDataItem>}
     * @memberof GlobalListResponse
     */
    'data'?: Array<GlobalListResponseDataItem>;
    /**
     * 
     * @type {AboutUsListResponseMeta}
     * @memberof GlobalListResponse
     */
    'meta'?: AboutUsListResponseMeta;
}
/**
 * 
 * @export
 * @interface GlobalListResponseDataItem
 */
export interface GlobalListResponseDataItem {
    /**
     * 
     * @type {number}
     * @memberof GlobalListResponseDataItem
     */
    'id'?: number;
    /**
     * 
     * @type {GlobalListResponseDataItemAttributes}
     * @memberof GlobalListResponseDataItem
     */
    'attributes'?: GlobalListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface GlobalListResponseDataItemAttributes
 */
export interface GlobalListResponseDataItemAttributes {
    /**
     * 
     * @type {AboutUsLocalizationResponseBanner}
     * @memberof GlobalListResponseDataItemAttributes
     */
    'logo'?: AboutUsLocalizationResponseBanner;
    /**
     * 
     * @type {string}
     * @memberof GlobalListResponseDataItemAttributes
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof GlobalListResponseDataItemAttributes
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof GlobalListResponseDataItemAttributes
     */
    'hotline'?: string;
    /**
     * 
     * @type {ElementsSocialComponent}
     * @memberof GlobalListResponseDataItemAttributes
     */
    'social'?: ElementsSocialComponent;
    /**
     * 
     * @type {string}
     * @memberof GlobalListResponseDataItemAttributes
     */
    'companyName'?: string;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof GlobalListResponseDataItemAttributes
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof GlobalListResponseDataItemAttributes
     */
    'email'?: string;
    /**
     * 
     * @type {Date}
     * @memberof GlobalListResponseDataItemAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof GlobalListResponseDataItemAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof GlobalListResponseDataItemAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof GlobalListResponseDataItemAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {GlobalListResponseDataItemAttributesLocalizations}
     * @memberof GlobalListResponseDataItemAttributes
     */
    'localizations'?: GlobalListResponseDataItemAttributesLocalizations;
    /**
     * 
     * @type {string}
     * @memberof GlobalListResponseDataItemAttributes
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface GlobalListResponseDataItemAttributesLocalizations
 */
export interface GlobalListResponseDataItemAttributesLocalizations {
    /**
     * 
     * @type {Array<GlobalListResponseDataItemLocalized>}
     * @memberof GlobalListResponseDataItemAttributesLocalizations
     */
    'data'?: Array<GlobalListResponseDataItemLocalized>;
}
/**
 * 
 * @export
 * @interface GlobalListResponseDataItemLocalized
 */
export interface GlobalListResponseDataItemLocalized {
    /**
     * 
     * @type {number}
     * @memberof GlobalListResponseDataItemLocalized
     */
    'id'?: number;
    /**
     * 
     * @type {GlobalResponseDataObjectLocalizedAttributes}
     * @memberof GlobalListResponseDataItemLocalized
     */
    'attributes'?: GlobalResponseDataObjectLocalizedAttributes;
}
/**
 * 
 * @export
 * @interface GlobalLocalizationRequest
 */
export interface GlobalLocalizationRequest {
    /**
     * 
     * @type {AboutUsLocalizationRequestBanner}
     * @memberof GlobalLocalizationRequest
     */
    'logo'?: AboutUsLocalizationRequestBanner;
    /**
     * 
     * @type {string}
     * @memberof GlobalLocalizationRequest
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof GlobalLocalizationRequest
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof GlobalLocalizationRequest
     */
    'hotline'?: string;
    /**
     * 
     * @type {ElementsSocialComponent}
     * @memberof GlobalLocalizationRequest
     */
    'social'?: ElementsSocialComponent;
    /**
     * 
     * @type {string}
     * @memberof GlobalLocalizationRequest
     */
    'companyName'?: string;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof GlobalLocalizationRequest
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof GlobalLocalizationRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof GlobalLocalizationRequest
     */
    'locale': string;
}
/**
 * 
 * @export
 * @interface GlobalLocalizationResponse
 */
export interface GlobalLocalizationResponse {
    /**
     * 
     * @type {number}
     * @memberof GlobalLocalizationResponse
     */
    'id'?: number;
    /**
     * 
     * @type {AboutUsLocalizationResponseBanner}
     * @memberof GlobalLocalizationResponse
     */
    'logo'?: AboutUsLocalizationResponseBanner;
    /**
     * 
     * @type {string}
     * @memberof GlobalLocalizationResponse
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof GlobalLocalizationResponse
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof GlobalLocalizationResponse
     */
    'hotline'?: string;
    /**
     * 
     * @type {ElementsSocialComponent}
     * @memberof GlobalLocalizationResponse
     */
    'social'?: ElementsSocialComponent;
    /**
     * 
     * @type {string}
     * @memberof GlobalLocalizationResponse
     */
    'companyName'?: string;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof GlobalLocalizationResponse
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof GlobalLocalizationResponse
     */
    'email'?: string;
    /**
     * 
     * @type {Date}
     * @memberof GlobalLocalizationResponse
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof GlobalLocalizationResponse
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof GlobalLocalizationResponse
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof GlobalLocalizationResponse
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseLocalizations}
     * @memberof GlobalLocalizationResponse
     */
    'localizations'?: AboutUsLocalizationResponseLocalizations;
    /**
     * 
     * @type {string}
     * @memberof GlobalLocalizationResponse
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface GlobalRequest
 */
export interface GlobalRequest {
    /**
     * 
     * @type {GlobalRequestData}
     * @memberof GlobalRequest
     */
    'data': GlobalRequestData;
}
/**
 * 
 * @export
 * @interface GlobalRequestData
 */
export interface GlobalRequestData {
    /**
     * 
     * @type {AboutUsLocalizationRequestBanner}
     * @memberof GlobalRequestData
     */
    'logo'?: AboutUsLocalizationRequestBanner;
    /**
     * 
     * @type {string}
     * @memberof GlobalRequestData
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof GlobalRequestData
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof GlobalRequestData
     */
    'hotline'?: string;
    /**
     * 
     * @type {ElementsSocialComponent}
     * @memberof GlobalRequestData
     */
    'social'?: ElementsSocialComponent;
    /**
     * 
     * @type {string}
     * @memberof GlobalRequestData
     */
    'companyName'?: string;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof GlobalRequestData
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof GlobalRequestData
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof GlobalRequestData
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface GlobalResponse
 */
export interface GlobalResponse {
    /**
     * 
     * @type {GlobalResponseDataObject}
     * @memberof GlobalResponse
     */
    'data'?: GlobalResponseDataObject;
    /**
     * 
     * @type {object}
     * @memberof GlobalResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface GlobalResponseDataObject
 */
export interface GlobalResponseDataObject {
    /**
     * 
     * @type {number}
     * @memberof GlobalResponseDataObject
     */
    'id'?: number;
    /**
     * 
     * @type {GlobalResponseDataObjectAttributes}
     * @memberof GlobalResponseDataObject
     */
    'attributes'?: GlobalResponseDataObjectAttributes;
}
/**
 * 
 * @export
 * @interface GlobalResponseDataObjectAttributes
 */
export interface GlobalResponseDataObjectAttributes {
    /**
     * 
     * @type {AboutUsLocalizationResponseBanner}
     * @memberof GlobalResponseDataObjectAttributes
     */
    'logo'?: AboutUsLocalizationResponseBanner;
    /**
     * 
     * @type {string}
     * @memberof GlobalResponseDataObjectAttributes
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof GlobalResponseDataObjectAttributes
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof GlobalResponseDataObjectAttributes
     */
    'hotline'?: string;
    /**
     * 
     * @type {ElementsSocialComponent}
     * @memberof GlobalResponseDataObjectAttributes
     */
    'social'?: ElementsSocialComponent;
    /**
     * 
     * @type {string}
     * @memberof GlobalResponseDataObjectAttributes
     */
    'companyName'?: string;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof GlobalResponseDataObjectAttributes
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof GlobalResponseDataObjectAttributes
     */
    'email'?: string;
    /**
     * 
     * @type {Date}
     * @memberof GlobalResponseDataObjectAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof GlobalResponseDataObjectAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof GlobalResponseDataObjectAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof GlobalResponseDataObjectAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {GlobalResponseDataObjectAttributesLocalizations}
     * @memberof GlobalResponseDataObjectAttributes
     */
    'localizations'?: GlobalResponseDataObjectAttributesLocalizations;
    /**
     * 
     * @type {string}
     * @memberof GlobalResponseDataObjectAttributes
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface GlobalResponseDataObjectAttributesLocalizations
 */
export interface GlobalResponseDataObjectAttributesLocalizations {
    /**
     * 
     * @type {Array<GlobalResponseDataObjectLocalized>}
     * @memberof GlobalResponseDataObjectAttributesLocalizations
     */
    'data'?: Array<GlobalResponseDataObjectLocalized>;
}
/**
 * 
 * @export
 * @interface GlobalResponseDataObjectLocalized
 */
export interface GlobalResponseDataObjectLocalized {
    /**
     * 
     * @type {number}
     * @memberof GlobalResponseDataObjectLocalized
     */
    'id'?: number;
    /**
     * 
     * @type {GlobalResponseDataObjectLocalizedAttributes}
     * @memberof GlobalResponseDataObjectLocalized
     */
    'attributes'?: GlobalResponseDataObjectLocalizedAttributes;
}
/**
 * 
 * @export
 * @interface GlobalResponseDataObjectLocalizedAttributes
 */
export interface GlobalResponseDataObjectLocalizedAttributes {
    /**
     * 
     * @type {AboutUsLocalizationResponseBanner}
     * @memberof GlobalResponseDataObjectLocalizedAttributes
     */
    'logo'?: AboutUsLocalizationResponseBanner;
    /**
     * 
     * @type {string}
     * @memberof GlobalResponseDataObjectLocalizedAttributes
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof GlobalResponseDataObjectLocalizedAttributes
     */
    'phoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof GlobalResponseDataObjectLocalizedAttributes
     */
    'hotline'?: string;
    /**
     * 
     * @type {ElementsSocialComponent}
     * @memberof GlobalResponseDataObjectLocalizedAttributes
     */
    'social'?: ElementsSocialComponent;
    /**
     * 
     * @type {string}
     * @memberof GlobalResponseDataObjectLocalizedAttributes
     */
    'companyName'?: string;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof GlobalResponseDataObjectLocalizedAttributes
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof GlobalResponseDataObjectLocalizedAttributes
     */
    'email'?: string;
    /**
     * 
     * @type {Date}
     * @memberof GlobalResponseDataObjectLocalizedAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof GlobalResponseDataObjectLocalizedAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof GlobalResponseDataObjectLocalizedAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof GlobalResponseDataObjectLocalizedAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseLocalizations}
     * @memberof GlobalResponseDataObjectLocalizedAttributes
     */
    'localizations'?: AboutUsLocalizationResponseLocalizations;
    /**
     * 
     * @type {string}
     * @memberof GlobalResponseDataObjectLocalizedAttributes
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface HomePageListResponse
 */
export interface HomePageListResponse {
    /**
     * 
     * @type {Array<HomePageListResponseDataItem>}
     * @memberof HomePageListResponse
     */
    'data'?: Array<HomePageListResponseDataItem>;
    /**
     * 
     * @type {AboutUsListResponseMeta}
     * @memberof HomePageListResponse
     */
    'meta'?: AboutUsListResponseMeta;
}
/**
 * 
 * @export
 * @interface HomePageListResponseDataItem
 */
export interface HomePageListResponseDataItem {
    /**
     * 
     * @type {number}
     * @memberof HomePageListResponseDataItem
     */
    'id'?: number;
    /**
     * 
     * @type {HomePageListResponseDataItemAttributes}
     * @memberof HomePageListResponseDataItem
     */
    'attributes'?: HomePageListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface HomePageListResponseDataItemAttributes
 */
export interface HomePageListResponseDataItemAttributes {
    /**
     * 
     * @type {Array<ElementsHeroComponent>}
     * @memberof HomePageListResponseDataItemAttributes
     */
    'heroBanner'?: Array<ElementsHeroComponent>;
    /**
     * 
     * @type {Array<ElementsFeatureComponent>}
     * @memberof HomePageListResponseDataItemAttributes
     */
    'features'?: Array<ElementsFeatureComponent>;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof HomePageListResponseDataItemAttributes
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {Date}
     * @memberof HomePageListResponseDataItemAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof HomePageListResponseDataItemAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof HomePageListResponseDataItemAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof HomePageListResponseDataItemAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {HomePageListResponseDataItemAttributesLocalizations}
     * @memberof HomePageListResponseDataItemAttributes
     */
    'localizations'?: HomePageListResponseDataItemAttributesLocalizations;
    /**
     * 
     * @type {string}
     * @memberof HomePageListResponseDataItemAttributes
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface HomePageListResponseDataItemAttributesLocalizations
 */
export interface HomePageListResponseDataItemAttributesLocalizations {
    /**
     * 
     * @type {Array<HomePageListResponseDataItemLocalized>}
     * @memberof HomePageListResponseDataItemAttributesLocalizations
     */
    'data'?: Array<HomePageListResponseDataItemLocalized>;
}
/**
 * 
 * @export
 * @interface HomePageListResponseDataItemLocalized
 */
export interface HomePageListResponseDataItemLocalized {
    /**
     * 
     * @type {number}
     * @memberof HomePageListResponseDataItemLocalized
     */
    'id'?: number;
    /**
     * 
     * @type {HomePageResponseDataObjectLocalizedAttributes}
     * @memberof HomePageListResponseDataItemLocalized
     */
    'attributes'?: HomePageResponseDataObjectLocalizedAttributes;
}
/**
 * 
 * @export
 * @interface HomePageLocalizationRequest
 */
export interface HomePageLocalizationRequest {
    /**
     * 
     * @type {Array<ElementsHeroComponent>}
     * @memberof HomePageLocalizationRequest
     */
    'heroBanner'?: Array<ElementsHeroComponent>;
    /**
     * 
     * @type {Array<ElementsFeatureComponent>}
     * @memberof HomePageLocalizationRequest
     */
    'features'?: Array<ElementsFeatureComponent>;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof HomePageLocalizationRequest
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof HomePageLocalizationRequest
     */
    'locale': string;
}
/**
 * 
 * @export
 * @interface HomePageLocalizationResponse
 */
export interface HomePageLocalizationResponse {
    /**
     * 
     * @type {number}
     * @memberof HomePageLocalizationResponse
     */
    'id'?: number;
    /**
     * 
     * @type {Array<ElementsHeroComponent>}
     * @memberof HomePageLocalizationResponse
     */
    'heroBanner'?: Array<ElementsHeroComponent>;
    /**
     * 
     * @type {Array<ElementsFeatureComponent>}
     * @memberof HomePageLocalizationResponse
     */
    'features'?: Array<ElementsFeatureComponent>;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof HomePageLocalizationResponse
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {Date}
     * @memberof HomePageLocalizationResponse
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof HomePageLocalizationResponse
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof HomePageLocalizationResponse
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof HomePageLocalizationResponse
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseLocalizations}
     * @memberof HomePageLocalizationResponse
     */
    'localizations'?: AboutUsLocalizationResponseLocalizations;
    /**
     * 
     * @type {string}
     * @memberof HomePageLocalizationResponse
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface HomePageRequest
 */
export interface HomePageRequest {
    /**
     * 
     * @type {HomePageRequestData}
     * @memberof HomePageRequest
     */
    'data': HomePageRequestData;
}
/**
 * 
 * @export
 * @interface HomePageRequestData
 */
export interface HomePageRequestData {
    /**
     * 
     * @type {Array<ElementsHeroComponent>}
     * @memberof HomePageRequestData
     */
    'heroBanner'?: Array<ElementsHeroComponent>;
    /**
     * 
     * @type {Array<ElementsFeatureComponent>}
     * @memberof HomePageRequestData
     */
    'features'?: Array<ElementsFeatureComponent>;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof HomePageRequestData
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof HomePageRequestData
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface HomePageResponse
 */
export interface HomePageResponse {
    /**
     * 
     * @type {HomePageResponseDataObject}
     * @memberof HomePageResponse
     */
    'data'?: HomePageResponseDataObject;
    /**
     * 
     * @type {object}
     * @memberof HomePageResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface HomePageResponseDataObject
 */
export interface HomePageResponseDataObject {
    /**
     * 
     * @type {number}
     * @memberof HomePageResponseDataObject
     */
    'id'?: number;
    /**
     * 
     * @type {HomePageResponseDataObjectAttributes}
     * @memberof HomePageResponseDataObject
     */
    'attributes'?: HomePageResponseDataObjectAttributes;
}
/**
 * 
 * @export
 * @interface HomePageResponseDataObjectAttributes
 */
export interface HomePageResponseDataObjectAttributes {
    /**
     * 
     * @type {Array<ElementsHeroComponent>}
     * @memberof HomePageResponseDataObjectAttributes
     */
    'heroBanner'?: Array<ElementsHeroComponent>;
    /**
     * 
     * @type {Array<ElementsFeatureComponent>}
     * @memberof HomePageResponseDataObjectAttributes
     */
    'features'?: Array<ElementsFeatureComponent>;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof HomePageResponseDataObjectAttributes
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {Date}
     * @memberof HomePageResponseDataObjectAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof HomePageResponseDataObjectAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof HomePageResponseDataObjectAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof HomePageResponseDataObjectAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {HomePageResponseDataObjectAttributesLocalizations}
     * @memberof HomePageResponseDataObjectAttributes
     */
    'localizations'?: HomePageResponseDataObjectAttributesLocalizations;
    /**
     * 
     * @type {string}
     * @memberof HomePageResponseDataObjectAttributes
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface HomePageResponseDataObjectAttributesLocalizations
 */
export interface HomePageResponseDataObjectAttributesLocalizations {
    /**
     * 
     * @type {Array<HomePageResponseDataObjectLocalized>}
     * @memberof HomePageResponseDataObjectAttributesLocalizations
     */
    'data'?: Array<HomePageResponseDataObjectLocalized>;
}
/**
 * 
 * @export
 * @interface HomePageResponseDataObjectLocalized
 */
export interface HomePageResponseDataObjectLocalized {
    /**
     * 
     * @type {number}
     * @memberof HomePageResponseDataObjectLocalized
     */
    'id'?: number;
    /**
     * 
     * @type {HomePageResponseDataObjectLocalizedAttributes}
     * @memberof HomePageResponseDataObjectLocalized
     */
    'attributes'?: HomePageResponseDataObjectLocalizedAttributes;
}
/**
 * 
 * @export
 * @interface HomePageResponseDataObjectLocalizedAttributes
 */
export interface HomePageResponseDataObjectLocalizedAttributes {
    /**
     * 
     * @type {Array<ElementsHeroComponent>}
     * @memberof HomePageResponseDataObjectLocalizedAttributes
     */
    'heroBanner'?: Array<ElementsHeroComponent>;
    /**
     * 
     * @type {Array<ElementsFeatureComponent>}
     * @memberof HomePageResponseDataObjectLocalizedAttributes
     */
    'features'?: Array<ElementsFeatureComponent>;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof HomePageResponseDataObjectLocalizedAttributes
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {Date}
     * @memberof HomePageResponseDataObjectLocalizedAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof HomePageResponseDataObjectLocalizedAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof HomePageResponseDataObjectLocalizedAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof HomePageResponseDataObjectLocalizedAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseLocalizations}
     * @memberof HomePageResponseDataObjectLocalizedAttributes
     */
    'localizations'?: AboutUsLocalizationResponseLocalizations;
    /**
     * 
     * @type {string}
     * @memberof HomePageResponseDataObjectLocalizedAttributes
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {ErrorData}
     * @memberof ModelError
     */
    'data'?: ErrorData | null;
    /**
     * 
     * @type {ErrorError}
     * @memberof ModelError
     */
    'error': ErrorError;
}
/**
 * 
 * @export
 * @interface PartnerListResponse
 */
export interface PartnerListResponse {
    /**
     * 
     * @type {Array<PartnerListResponseDataItem>}
     * @memberof PartnerListResponse
     */
    'data'?: Array<PartnerListResponseDataItem>;
    /**
     * 
     * @type {AboutUsListResponseMeta}
     * @memberof PartnerListResponse
     */
    'meta'?: AboutUsListResponseMeta;
}
/**
 * 
 * @export
 * @interface PartnerListResponseDataItem
 */
export interface PartnerListResponseDataItem {
    /**
     * 
     * @type {number}
     * @memberof PartnerListResponseDataItem
     */
    'id'?: number;
    /**
     * 
     * @type {PartnerListResponseDataItemAttributes}
     * @memberof PartnerListResponseDataItem
     */
    'attributes'?: PartnerListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface PartnerListResponseDataItemAttributes
 */
export interface PartnerListResponseDataItemAttributes {
    /**
     * 
     * @type {string}
     * @memberof PartnerListResponseDataItemAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {AboutUsLocalizationResponseBanner}
     * @memberof PartnerListResponseDataItemAttributes
     */
    'logo'?: AboutUsLocalizationResponseBanner;
    /**
     * 
     * @type {string}
     * @memberof PartnerListResponseDataItemAttributes
     */
    'url'?: string;
    /**
     * 
     * @type {Date}
     * @memberof PartnerListResponseDataItemAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PartnerListResponseDataItemAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof PartnerListResponseDataItemAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof PartnerListResponseDataItemAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}
/**
 * 
 * @export
 * @interface PartnerRequest
 */
export interface PartnerRequest {
    /**
     * 
     * @type {PartnerRequestData}
     * @memberof PartnerRequest
     */
    'data': PartnerRequestData;
}
/**
 * 
 * @export
 * @interface PartnerRequestData
 */
export interface PartnerRequestData {
    /**
     * 
     * @type {string}
     * @memberof PartnerRequestData
     */
    'name'?: string;
    /**
     * 
     * @type {AboutUsLocalizationRequestBanner}
     * @memberof PartnerRequestData
     */
    'logo'?: AboutUsLocalizationRequestBanner;
    /**
     * 
     * @type {string}
     * @memberof PartnerRequestData
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface PartnerResponse
 */
export interface PartnerResponse {
    /**
     * 
     * @type {PartnerResponseDataObject}
     * @memberof PartnerResponse
     */
    'data'?: PartnerResponseDataObject;
    /**
     * 
     * @type {object}
     * @memberof PartnerResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface PartnerResponseDataObject
 */
export interface PartnerResponseDataObject {
    /**
     * 
     * @type {number}
     * @memberof PartnerResponseDataObject
     */
    'id'?: number;
    /**
     * 
     * @type {PartnerListResponseDataItemAttributes}
     * @memberof PartnerResponseDataObject
     */
    'attributes'?: PartnerListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface ProductCategoryListResponse
 */
export interface ProductCategoryListResponse {
    /**
     * 
     * @type {Array<ProductCategoryListResponseDataItem>}
     * @memberof ProductCategoryListResponse
     */
    'data'?: Array<ProductCategoryListResponseDataItem>;
    /**
     * 
     * @type {AboutUsListResponseMeta}
     * @memberof ProductCategoryListResponse
     */
    'meta'?: AboutUsListResponseMeta;
}
/**
 * 
 * @export
 * @interface ProductCategoryListResponseDataItem
 */
export interface ProductCategoryListResponseDataItem {
    /**
     * 
     * @type {number}
     * @memberof ProductCategoryListResponseDataItem
     */
    'id'?: number;
    /**
     * 
     * @type {ProductCategoryListResponseDataItemAttributes}
     * @memberof ProductCategoryListResponseDataItem
     */
    'attributes'?: ProductCategoryListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface ProductCategoryListResponseDataItemAttributes
 */
export interface ProductCategoryListResponseDataItemAttributes {
    /**
     * 
     * @type {string}
     * @memberof ProductCategoryListResponseDataItemAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProductCategoryListResponseDataItemAttributes
     */
    'hot'?: boolean;
    /**
     * 
     * @type {AboutUsLocalizationResponseBanner}
     * @memberof ProductCategoryListResponseDataItemAttributes
     */
    'icon'?: AboutUsLocalizationResponseBanner;
    /**
     * 
     * @type {string}
     * @memberof ProductCategoryListResponseDataItemAttributes
     */
    'slug'?: string;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof ProductCategoryListResponseDataItemAttributes
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {Date}
     * @memberof ProductCategoryListResponseDataItemAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ProductCategoryListResponseDataItemAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof ProductCategoryListResponseDataItemAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof ProductCategoryListResponseDataItemAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}
/**
 * 
 * @export
 * @interface ProductCategoryRequest
 */
export interface ProductCategoryRequest {
    /**
     * 
     * @type {ProductCategoryRequestData}
     * @memberof ProductCategoryRequest
     */
    'data': ProductCategoryRequestData;
}
/**
 * 
 * @export
 * @interface ProductCategoryRequestData
 */
export interface ProductCategoryRequestData {
    /**
     * 
     * @type {string}
     * @memberof ProductCategoryRequestData
     */
    'name': string;
    /**
     * 
     * @type {boolean}
     * @memberof ProductCategoryRequestData
     */
    'hot'?: boolean;
    /**
     * 
     * @type {AboutUsLocalizationRequestBanner}
     * @memberof ProductCategoryRequestData
     */
    'icon'?: AboutUsLocalizationRequestBanner;
    /**
     * 
     * @type {string}
     * @memberof ProductCategoryRequestData
     */
    'slug'?: string;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof ProductCategoryRequestData
     */
    'meta'?: SharedSeoComponent;
}
/**
 * 
 * @export
 * @interface ProductCategoryResponse
 */
export interface ProductCategoryResponse {
    /**
     * 
     * @type {ProductCategoryResponseDataObject}
     * @memberof ProductCategoryResponse
     */
    'data'?: ProductCategoryResponseDataObject;
    /**
     * 
     * @type {object}
     * @memberof ProductCategoryResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface ProductCategoryResponseDataObject
 */
export interface ProductCategoryResponseDataObject {
    /**
     * 
     * @type {number}
     * @memberof ProductCategoryResponseDataObject
     */
    'id'?: number;
    /**
     * 
     * @type {ProductCategoryListResponseDataItemAttributes}
     * @memberof ProductCategoryResponseDataObject
     */
    'attributes'?: ProductCategoryListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface SectionsSubPageComponent
 */
export interface SectionsSubPageComponent {
    /**
     * 
     * @type {number}
     * @memberof SectionsSubPageComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SectionsSubPageComponent
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SectionsSubPageComponent
     */
    'description'?: string;
    /**
     * 
     * @type {Array<SectionsSubPageComponentFeaturesInner>}
     * @memberof SectionsSubPageComponent
     */
    'features'?: Array<SectionsSubPageComponentFeaturesInner>;
}
/**
 * 
 * @export
 * @interface SectionsSubPageComponentFeaturesInner
 */
export interface SectionsSubPageComponentFeaturesInner {
    /**
     * 
     * @type {number}
     * @memberof SectionsSubPageComponentFeaturesInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SectionsSubPageComponentFeaturesInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SectionsSubPageComponentFeaturesInner
     */
    'subTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof SectionsSubPageComponentFeaturesInner
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof SectionsSubPageComponentFeaturesInner
     */
    'imagePosition'?: SectionsSubPageComponentFeaturesInnerImagePositionEnum;
    /**
     * 
     * @type {SectionsSubPageComponentFeaturesInnerImage}
     * @memberof SectionsSubPageComponentFeaturesInner
     */
    'image'?: SectionsSubPageComponentFeaturesInnerImage;
    /**
     * 
     * @type {SectionsSubPageComponentFeaturesInnerImage}
     * @memberof SectionsSubPageComponentFeaturesInner
     */
    'image2'?: SectionsSubPageComponentFeaturesInnerImage;
    /**
     * 
     * @type {string}
     * @memberof SectionsSubPageComponentFeaturesInner
     */
    'content2'?: string;
    /**
     * 
     * @type {string}
     * @memberof SectionsSubPageComponentFeaturesInner
     */
    'buttonTitle'?: string;
    /**
     * 
     * @type {string}
     * @memberof SectionsSubPageComponentFeaturesInner
     */
    'buttonUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof SectionsSubPageComponentFeaturesInner
     */
    'name2'?: string;
    /**
     * 
     * @type {string}
     * @memberof SectionsSubPageComponentFeaturesInner
     */
    'subTitle2'?: string;
}

export const SectionsSubPageComponentFeaturesInnerImagePositionEnum = {
    Left: 'left',
    Right: 'right',
    Center: 'center'
} as const;

export type SectionsSubPageComponentFeaturesInnerImagePositionEnum = typeof SectionsSubPageComponentFeaturesInnerImagePositionEnum[keyof typeof SectionsSubPageComponentFeaturesInnerImagePositionEnum];

/**
 * 
 * @export
 * @interface SectionsSubPageComponentFeaturesInnerImage
 */
export interface SectionsSubPageComponentFeaturesInnerImage {
    /**
     * 
     * @type {SectionsSubPageComponentFeaturesInnerImageData}
     * @memberof SectionsSubPageComponentFeaturesInnerImage
     */
    'data'?: SectionsSubPageComponentFeaturesInnerImageData;
}
/**
 * 
 * @export
 * @interface SectionsSubPageComponentFeaturesInnerImageData
 */
export interface SectionsSubPageComponentFeaturesInnerImageData {
    /**
     * 
     * @type {number}
     * @memberof SectionsSubPageComponentFeaturesInnerImageData
     */
    'id'?: number;
    /**
     * 
     * @type {SectionsSubPageComponentFeaturesInnerImageDataAttributes}
     * @memberof SectionsSubPageComponentFeaturesInnerImageData
     */
    'attributes'?: SectionsSubPageComponentFeaturesInnerImageDataAttributes;
}
/**
 * 
 * @export
 * @interface SectionsSubPageComponentFeaturesInnerImageDataAttributes
 */
export interface SectionsSubPageComponentFeaturesInnerImageDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof SectionsSubPageComponentFeaturesInnerImageDataAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SectionsSubPageComponentFeaturesInnerImageDataAttributes
     */
    'alternativeText'?: string;
    /**
     * 
     * @type {string}
     * @memberof SectionsSubPageComponentFeaturesInnerImageDataAttributes
     */
    'caption'?: string;
    /**
     * 
     * @type {number}
     * @memberof SectionsSubPageComponentFeaturesInnerImageDataAttributes
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof SectionsSubPageComponentFeaturesInnerImageDataAttributes
     */
    'height'?: number;
    /**
     * 
     * @type {any}
     * @memberof SectionsSubPageComponentFeaturesInnerImageDataAttributes
     */
    'formats'?: any;
    /**
     * 
     * @type {string}
     * @memberof SectionsSubPageComponentFeaturesInnerImageDataAttributes
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof SectionsSubPageComponentFeaturesInnerImageDataAttributes
     */
    'ext'?: string;
    /**
     * 
     * @type {string}
     * @memberof SectionsSubPageComponentFeaturesInnerImageDataAttributes
     */
    'mime'?: string;
    /**
     * 
     * @type {number}
     * @memberof SectionsSubPageComponentFeaturesInnerImageDataAttributes
     */
    'size'?: number;
    /**
     * 
     * @type {string}
     * @memberof SectionsSubPageComponentFeaturesInnerImageDataAttributes
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof SectionsSubPageComponentFeaturesInnerImageDataAttributes
     */
    'previewUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof SectionsSubPageComponentFeaturesInnerImageDataAttributes
     */
    'provider'?: string;
    /**
     * 
     * @type {any}
     * @memberof SectionsSubPageComponentFeaturesInnerImageDataAttributes
     */
    'provider_metadata'?: any;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesRelated}
     * @memberof SectionsSubPageComponentFeaturesInnerImageDataAttributes
     */
    'related'?: AboutUsLocalizationResponseBannerDataAttributesRelated;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof SectionsSubPageComponentFeaturesInnerImageDataAttributes
     */
    'folder'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {string}
     * @memberof SectionsSubPageComponentFeaturesInnerImageDataAttributes
     */
    'folderPath'?: string;
    /**
     * 
     * @type {Date}
     * @memberof SectionsSubPageComponentFeaturesInnerImageDataAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof SectionsSubPageComponentFeaturesInnerImageDataAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof SectionsSubPageComponentFeaturesInnerImageDataAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof SectionsSubPageComponentFeaturesInnerImageDataAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}
/**
 * 
 * @export
 * @interface SharedSeoComponent
 */
export interface SharedSeoComponent {
    /**
     * 
     * @type {number}
     * @memberof SharedSeoComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SharedSeoComponent
     */
    'metaDescription'?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedSeoComponent
     */
    'keywords'?: string;
    /**
     * 
     * @type {string}
     * @memberof SharedSeoComponent
     */
    'metaRobots'?: string;
    /**
     * 
     * @type {any}
     * @memberof SharedSeoComponent
     */
    'structuredData'?: any;
    /**
     * 
     * @type {string}
     * @memberof SharedSeoComponent
     */
    'metaViewport'?: string;
    /**
     * 
     * @type {SectionsSubPageComponentFeaturesInnerImage}
     * @memberof SharedSeoComponent
     */
    'metaImage'?: SectionsSubPageComponentFeaturesInnerImage;
    /**
     * 
     * @type {string}
     * @memberof SharedSeoComponent
     */
    'metaTitle'?: string;
}
/**
 * 
 * @export
 * @interface TagListResponse
 */
export interface TagListResponse {
    /**
     * 
     * @type {Array<TagListResponseDataItem>}
     * @memberof TagListResponse
     */
    'data'?: Array<TagListResponseDataItem>;
    /**
     * 
     * @type {AboutUsListResponseMeta}
     * @memberof TagListResponse
     */
    'meta'?: AboutUsListResponseMeta;
}
/**
 * 
 * @export
 * @interface TagListResponseDataItem
 */
export interface TagListResponseDataItem {
    /**
     * 
     * @type {number}
     * @memberof TagListResponseDataItem
     */
    'id'?: number;
    /**
     * 
     * @type {TagListResponseDataItemAttributes}
     * @memberof TagListResponseDataItem
     */
    'attributes'?: TagListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface TagListResponseDataItemAttributes
 */
export interface TagListResponseDataItemAttributes {
    /**
     * 
     * @type {string}
     * @memberof TagListResponseDataItemAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {Date}
     * @memberof TagListResponseDataItemAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TagListResponseDataItemAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TagListResponseDataItemAttributes
     */
    'publishedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy}
     * @memberof TagListResponseDataItemAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof TagListResponseDataItemAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}
/**
 * 
 * @export
 * @interface TagRequest
 */
export interface TagRequest {
    /**
     * 
     * @type {TagRequestData}
     * @memberof TagRequest
     */
    'data': TagRequestData;
}
/**
 * 
 * @export
 * @interface TagRequestData
 */
export interface TagRequestData {
    /**
     * 
     * @type {string}
     * @memberof TagRequestData
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface TagResponse
 */
export interface TagResponse {
    /**
     * 
     * @type {TagResponseDataObject}
     * @memberof TagResponse
     */
    'data'?: TagResponseDataObject;
    /**
     * 
     * @type {object}
     * @memberof TagResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface TagResponseDataObject
 */
export interface TagResponseDataObject {
    /**
     * 
     * @type {number}
     * @memberof TagResponseDataObject
     */
    'id'?: number;
    /**
     * 
     * @type {TagListResponseDataItemAttributes}
     * @memberof TagResponseDataObject
     */
    'attributes'?: TagListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface TeamListResponse
 */
export interface TeamListResponse {
    /**
     * 
     * @type {Array<TeamListResponseDataItem>}
     * @memberof TeamListResponse
     */
    'data'?: Array<TeamListResponseDataItem>;
    /**
     * 
     * @type {AboutUsListResponseMeta}
     * @memberof TeamListResponse
     */
    'meta'?: AboutUsListResponseMeta;
}
/**
 * 
 * @export
 * @interface TeamListResponseDataItem
 */
export interface TeamListResponseDataItem {
    /**
     * 
     * @type {number}
     * @memberof TeamListResponseDataItem
     */
    'id'?: number;
    /**
     * 
     * @type {TeamListResponseDataItemAttributes}
     * @memberof TeamListResponseDataItem
     */
    'attributes'?: TeamListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface TeamListResponseDataItemAttributes
 */
export interface TeamListResponseDataItemAttributes {
    /**
     * 
     * @type {string}
     * @memberof TeamListResponseDataItemAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamListResponseDataItemAttributes
     */
    'title'?: string;
    /**
     * 
     * @type {AboutUsLocalizationResponseBanner}
     * @memberof TeamListResponseDataItemAttributes
     */
    'image'?: AboutUsLocalizationResponseBanner;
    /**
     * 
     * @type {number}
     * @memberof TeamListResponseDataItemAttributes
     */
    'priority'?: number;
    /**
     * 
     * @type {string}
     * @memberof TeamListResponseDataItemAttributes
     */
    'description'?: string;
    /**
     * 
     * @type {Date}
     * @memberof TeamListResponseDataItemAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeamListResponseDataItemAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof TeamListResponseDataItemAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof TeamListResponseDataItemAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}
/**
 * 
 * @export
 * @interface TeamRequest
 */
export interface TeamRequest {
    /**
     * 
     * @type {TeamRequestData}
     * @memberof TeamRequest
     */
    'data': TeamRequestData;
}
/**
 * 
 * @export
 * @interface TeamRequestData
 */
export interface TeamRequestData {
    /**
     * 
     * @type {string}
     * @memberof TeamRequestData
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamRequestData
     */
    'title'?: string;
    /**
     * 
     * @type {AboutUsLocalizationRequestBanner}
     * @memberof TeamRequestData
     */
    'image'?: AboutUsLocalizationRequestBanner;
    /**
     * 
     * @type {number}
     * @memberof TeamRequestData
     */
    'priority'?: number;
    /**
     * 
     * @type {string}
     * @memberof TeamRequestData
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface TeamResponse
 */
export interface TeamResponse {
    /**
     * 
     * @type {TeamResponseDataObject}
     * @memberof TeamResponse
     */
    'data'?: TeamResponseDataObject;
    /**
     * 
     * @type {object}
     * @memberof TeamResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface TeamResponseDataObject
 */
export interface TeamResponseDataObject {
    /**
     * 
     * @type {number}
     * @memberof TeamResponseDataObject
     */
    'id'?: number;
    /**
     * 
     * @type {TeamListResponseDataItemAttributes}
     * @memberof TeamResponseDataObject
     */
    'attributes'?: TeamListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface TestimonialListResponse
 */
export interface TestimonialListResponse {
    /**
     * 
     * @type {Array<TestimonialListResponseDataItem>}
     * @memberof TestimonialListResponse
     */
    'data'?: Array<TestimonialListResponseDataItem>;
    /**
     * 
     * @type {AboutUsListResponseMeta}
     * @memberof TestimonialListResponse
     */
    'meta'?: AboutUsListResponseMeta;
}
/**
 * 
 * @export
 * @interface TestimonialListResponseDataItem
 */
export interface TestimonialListResponseDataItem {
    /**
     * 
     * @type {number}
     * @memberof TestimonialListResponseDataItem
     */
    'id'?: number;
    /**
     * 
     * @type {TestimonialListResponseDataItemAttributes}
     * @memberof TestimonialListResponseDataItem
     */
    'attributes'?: TestimonialListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface TestimonialListResponseDataItemAttributes
 */
export interface TestimonialListResponseDataItemAttributes {
    /**
     * 
     * @type {string}
     * @memberof TestimonialListResponseDataItemAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TestimonialListResponseDataItemAttributes
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof TestimonialListResponseDataItemAttributes
     */
    'comment'?: string;
    /**
     * 
     * @type {AboutUsLocalizationResponseBanner}
     * @memberof TestimonialListResponseDataItemAttributes
     */
    'avatar'?: AboutUsLocalizationResponseBanner;
    /**
     * 
     * @type {Date}
     * @memberof TestimonialListResponseDataItemAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TestimonialListResponseDataItemAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TestimonialListResponseDataItemAttributes
     */
    'publishedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof TestimonialListResponseDataItemAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof TestimonialListResponseDataItemAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {TestimonialListResponseDataItemAttributesLocalizations}
     * @memberof TestimonialListResponseDataItemAttributes
     */
    'localizations'?: TestimonialListResponseDataItemAttributesLocalizations;
    /**
     * 
     * @type {string}
     * @memberof TestimonialListResponseDataItemAttributes
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface TestimonialListResponseDataItemAttributesLocalizations
 */
export interface TestimonialListResponseDataItemAttributesLocalizations {
    /**
     * 
     * @type {Array<TestimonialListResponseDataItemLocalized>}
     * @memberof TestimonialListResponseDataItemAttributesLocalizations
     */
    'data'?: Array<TestimonialListResponseDataItemLocalized>;
}
/**
 * 
 * @export
 * @interface TestimonialListResponseDataItemLocalized
 */
export interface TestimonialListResponseDataItemLocalized {
    /**
     * 
     * @type {number}
     * @memberof TestimonialListResponseDataItemLocalized
     */
    'id'?: number;
    /**
     * 
     * @type {TestimonialResponseDataObjectLocalizedAttributes}
     * @memberof TestimonialListResponseDataItemLocalized
     */
    'attributes'?: TestimonialResponseDataObjectLocalizedAttributes;
}
/**
 * 
 * @export
 * @interface TestimonialLocalizationRequest
 */
export interface TestimonialLocalizationRequest {
    /**
     * 
     * @type {string}
     * @memberof TestimonialLocalizationRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TestimonialLocalizationRequest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof TestimonialLocalizationRequest
     */
    'comment'?: string;
    /**
     * 
     * @type {AboutUsLocalizationRequestBanner}
     * @memberof TestimonialLocalizationRequest
     */
    'avatar'?: AboutUsLocalizationRequestBanner;
    /**
     * 
     * @type {string}
     * @memberof TestimonialLocalizationRequest
     */
    'locale': string;
}
/**
 * 
 * @export
 * @interface TestimonialLocalizationResponse
 */
export interface TestimonialLocalizationResponse {
    /**
     * 
     * @type {number}
     * @memberof TestimonialLocalizationResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TestimonialLocalizationResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TestimonialLocalizationResponse
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof TestimonialLocalizationResponse
     */
    'comment'?: string;
    /**
     * 
     * @type {AboutUsLocalizationResponseBanner}
     * @memberof TestimonialLocalizationResponse
     */
    'avatar'?: AboutUsLocalizationResponseBanner;
    /**
     * 
     * @type {Date}
     * @memberof TestimonialLocalizationResponse
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TestimonialLocalizationResponse
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TestimonialLocalizationResponse
     */
    'publishedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof TestimonialLocalizationResponse
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof TestimonialLocalizationResponse
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseLocalizations}
     * @memberof TestimonialLocalizationResponse
     */
    'localizations'?: AboutUsLocalizationResponseLocalizations;
    /**
     * 
     * @type {string}
     * @memberof TestimonialLocalizationResponse
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface TestimonialRequest
 */
export interface TestimonialRequest {
    /**
     * 
     * @type {TestimonialRequestData}
     * @memberof TestimonialRequest
     */
    'data': TestimonialRequestData;
}
/**
 * 
 * @export
 * @interface TestimonialRequestData
 */
export interface TestimonialRequestData {
    /**
     * 
     * @type {string}
     * @memberof TestimonialRequestData
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TestimonialRequestData
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof TestimonialRequestData
     */
    'comment'?: string;
    /**
     * 
     * @type {AboutUsLocalizationRequestBanner}
     * @memberof TestimonialRequestData
     */
    'avatar'?: AboutUsLocalizationRequestBanner;
    /**
     * 
     * @type {string}
     * @memberof TestimonialRequestData
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface TestimonialResponse
 */
export interface TestimonialResponse {
    /**
     * 
     * @type {TestimonialResponseDataObject}
     * @memberof TestimonialResponse
     */
    'data'?: TestimonialResponseDataObject;
    /**
     * 
     * @type {object}
     * @memberof TestimonialResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface TestimonialResponseDataObject
 */
export interface TestimonialResponseDataObject {
    /**
     * 
     * @type {number}
     * @memberof TestimonialResponseDataObject
     */
    'id'?: number;
    /**
     * 
     * @type {TestimonialResponseDataObjectAttributes}
     * @memberof TestimonialResponseDataObject
     */
    'attributes'?: TestimonialResponseDataObjectAttributes;
}
/**
 * 
 * @export
 * @interface TestimonialResponseDataObjectAttributes
 */
export interface TestimonialResponseDataObjectAttributes {
    /**
     * 
     * @type {string}
     * @memberof TestimonialResponseDataObjectAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TestimonialResponseDataObjectAttributes
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof TestimonialResponseDataObjectAttributes
     */
    'comment'?: string;
    /**
     * 
     * @type {AboutUsLocalizationResponseBanner}
     * @memberof TestimonialResponseDataObjectAttributes
     */
    'avatar'?: AboutUsLocalizationResponseBanner;
    /**
     * 
     * @type {Date}
     * @memberof TestimonialResponseDataObjectAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TestimonialResponseDataObjectAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TestimonialResponseDataObjectAttributes
     */
    'publishedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof TestimonialResponseDataObjectAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof TestimonialResponseDataObjectAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {TestimonialResponseDataObjectAttributesLocalizations}
     * @memberof TestimonialResponseDataObjectAttributes
     */
    'localizations'?: TestimonialResponseDataObjectAttributesLocalizations;
    /**
     * 
     * @type {string}
     * @memberof TestimonialResponseDataObjectAttributes
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface TestimonialResponseDataObjectAttributesLocalizations
 */
export interface TestimonialResponseDataObjectAttributesLocalizations {
    /**
     * 
     * @type {Array<TestimonialResponseDataObjectLocalized>}
     * @memberof TestimonialResponseDataObjectAttributesLocalizations
     */
    'data'?: Array<TestimonialResponseDataObjectLocalized>;
}
/**
 * 
 * @export
 * @interface TestimonialResponseDataObjectLocalized
 */
export interface TestimonialResponseDataObjectLocalized {
    /**
     * 
     * @type {number}
     * @memberof TestimonialResponseDataObjectLocalized
     */
    'id'?: number;
    /**
     * 
     * @type {TestimonialResponseDataObjectLocalizedAttributes}
     * @memberof TestimonialResponseDataObjectLocalized
     */
    'attributes'?: TestimonialResponseDataObjectLocalizedAttributes;
}
/**
 * 
 * @export
 * @interface TestimonialResponseDataObjectLocalizedAttributes
 */
export interface TestimonialResponseDataObjectLocalizedAttributes {
    /**
     * 
     * @type {string}
     * @memberof TestimonialResponseDataObjectLocalizedAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof TestimonialResponseDataObjectLocalizedAttributes
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof TestimonialResponseDataObjectLocalizedAttributes
     */
    'comment'?: string;
    /**
     * 
     * @type {AboutUsLocalizationResponseBanner}
     * @memberof TestimonialResponseDataObjectLocalizedAttributes
     */
    'avatar'?: AboutUsLocalizationResponseBanner;
    /**
     * 
     * @type {Date}
     * @memberof TestimonialResponseDataObjectLocalizedAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TestimonialResponseDataObjectLocalizedAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TestimonialResponseDataObjectLocalizedAttributes
     */
    'publishedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof TestimonialResponseDataObjectLocalizedAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof TestimonialResponseDataObjectLocalizedAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseLocalizations}
     * @memberof TestimonialResponseDataObjectLocalizedAttributes
     */
    'localizations'?: AboutUsLocalizationResponseLocalizations;
    /**
     * 
     * @type {string}
     * @memberof TestimonialResponseDataObjectLocalizedAttributes
     */
    'locale'?: string;
}
/**
 * 
 * @export
 * @interface ThuocListResponse
 */
export interface ThuocListResponse {
    /**
     * 
     * @type {Array<ThuocListResponseDataItem>}
     * @memberof ThuocListResponse
     */
    'data'?: Array<ThuocListResponseDataItem>;
    /**
     * 
     * @type {AboutUsListResponseMeta}
     * @memberof ThuocListResponse
     */
    'meta'?: AboutUsListResponseMeta;
}
/**
 * 
 * @export
 * @interface ThuocListResponseDataItem
 */
export interface ThuocListResponseDataItem {
    /**
     * 
     * @type {number}
     * @memberof ThuocListResponseDataItem
     */
    'id'?: number;
    /**
     * 
     * @type {ThuocListResponseDataItemAttributes}
     * @memberof ThuocListResponseDataItem
     */
    'attributes'?: ThuocListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface ThuocListResponseDataItemAttributes
 */
export interface ThuocListResponseDataItemAttributes {
    /**
     * 
     * @type {string}
     * @memberof ThuocListResponseDataItemAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThuocListResponseDataItemAttributes
     */
    'form'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThuocListResponseDataItemAttributes
     */
    'packing'?: string;
    /**
     * 
     * @type {number}
     * @memberof ThuocListResponseDataItemAttributes
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof ThuocListResponseDataItemAttributes
     */
    'promotionPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof ThuocListResponseDataItemAttributes
     */
    'material'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThuocListResponseDataItemAttributes
     */
    'uses'?: string;
    /**
     * 
     * @type {ThuocListResponseDataItemAttributesImages}
     * @memberof ThuocListResponseDataItemAttributes
     */
    'images'?: ThuocListResponseDataItemAttributesImages;
    /**
     * 
     * @type {string}
     * @memberof ThuocListResponseDataItemAttributes
     */
    'status'?: ThuocListResponseDataItemAttributesStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ThuocListResponseDataItemAttributes
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThuocListResponseDataItemAttributes
     */
    'indication'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThuocListResponseDataItemAttributes
     */
    'guide'?: string;
    /**
     * 
     * @type {SectionsSubPageComponentFeaturesInnerImage}
     * @memberof ThuocListResponseDataItemAttributes
     */
    'prescription'?: SectionsSubPageComponentFeaturesInnerImage;
    /**
     * 
     * @type {string}
     * @memberof ThuocListResponseDataItemAttributes
     */
    'introduce'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThuocListResponseDataItemAttributes
     */
    'slug'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ThuocListResponseDataItemAttributes
     */
    'isHot'?: boolean;
    /**
     * 
     * @type {ThuocListResponseDataItemAttributesProductType}
     * @memberof ThuocListResponseDataItemAttributes
     */
    'product_type'?: ThuocListResponseDataItemAttributesProductType;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof ThuocListResponseDataItemAttributes
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof ThuocListResponseDataItemAttributes
     */
    'test'?: string;
    /**
     * 
     * @type {Date}
     * @memberof ThuocListResponseDataItemAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ThuocListResponseDataItemAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof ThuocListResponseDataItemAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof ThuocListResponseDataItemAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}

export const ThuocListResponseDataItemAttributesStatusEnum = {
    On: 'on',
    Off: 'off'
} as const;

export type ThuocListResponseDataItemAttributesStatusEnum = typeof ThuocListResponseDataItemAttributesStatusEnum[keyof typeof ThuocListResponseDataItemAttributesStatusEnum];

/**
 * 
 * @export
 * @interface ThuocListResponseDataItemAttributesImages
 */
export interface ThuocListResponseDataItemAttributesImages {
    /**
     * 
     * @type {Array<AboutUsLocalizationResponseBannerData>}
     * @memberof ThuocListResponseDataItemAttributesImages
     */
    'data'?: Array<AboutUsLocalizationResponseBannerData>;
}
/**
 * 
 * @export
 * @interface ThuocListResponseDataItemAttributesProductType
 */
export interface ThuocListResponseDataItemAttributesProductType {
    /**
     * 
     * @type {ThuocListResponseDataItemAttributesProductTypeData}
     * @memberof ThuocListResponseDataItemAttributesProductType
     */
    'data'?: ThuocListResponseDataItemAttributesProductTypeData;
}
/**
 * 
 * @export
 * @interface ThuocListResponseDataItemAttributesProductTypeData
 */
export interface ThuocListResponseDataItemAttributesProductTypeData {
    /**
     * 
     * @type {number}
     * @memberof ThuocListResponseDataItemAttributesProductTypeData
     */
    'id'?: number;
    /**
     * 
     * @type {ThuocListResponseDataItemAttributesProductTypeDataAttributes}
     * @memberof ThuocListResponseDataItemAttributesProductTypeData
     */
    'attributes'?: ThuocListResponseDataItemAttributesProductTypeDataAttributes;
}
/**
 * 
 * @export
 * @interface ThuocListResponseDataItemAttributesProductTypeDataAttributes
 */
export interface ThuocListResponseDataItemAttributesProductTypeDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof ThuocListResponseDataItemAttributesProductTypeDataAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ThuocListResponseDataItemAttributesProductTypeDataAttributes
     */
    'hot'?: boolean;
    /**
     * 
     * @type {SectionsSubPageComponentFeaturesInnerImage}
     * @memberof ThuocListResponseDataItemAttributesProductTypeDataAttributes
     */
    'icon'?: SectionsSubPageComponentFeaturesInnerImage;
    /**
     * 
     * @type {string}
     * @memberof ThuocListResponseDataItemAttributesProductTypeDataAttributes
     */
    'slug'?: string;
    /**
     * 
     * @type {ThuocListResponseDataItemAttributesProductTypeDataAttributesMeta}
     * @memberof ThuocListResponseDataItemAttributesProductTypeDataAttributes
     */
    'meta'?: ThuocListResponseDataItemAttributesProductTypeDataAttributesMeta;
    /**
     * 
     * @type {Date}
     * @memberof ThuocListResponseDataItemAttributesProductTypeDataAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ThuocListResponseDataItemAttributesProductTypeDataAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof ThuocListResponseDataItemAttributesProductTypeDataAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof ThuocListResponseDataItemAttributesProductTypeDataAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}
/**
 * 
 * @export
 * @interface ThuocListResponseDataItemAttributesProductTypeDataAttributesMeta
 */
export interface ThuocListResponseDataItemAttributesProductTypeDataAttributesMeta {
    /**
     * 
     * @type {number}
     * @memberof ThuocListResponseDataItemAttributesProductTypeDataAttributesMeta
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ThuocListResponseDataItemAttributesProductTypeDataAttributesMeta
     */
    'metaDescription'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThuocListResponseDataItemAttributesProductTypeDataAttributesMeta
     */
    'keywords'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThuocListResponseDataItemAttributesProductTypeDataAttributesMeta
     */
    'metaRobots'?: string;
    /**
     * 
     * @type {any}
     * @memberof ThuocListResponseDataItemAttributesProductTypeDataAttributesMeta
     */
    'structuredData'?: any;
    /**
     * 
     * @type {string}
     * @memberof ThuocListResponseDataItemAttributesProductTypeDataAttributesMeta
     */
    'metaViewport'?: string;
    /**
     * 
     * @type {SectionsSubPageComponentFeaturesInnerImage}
     * @memberof ThuocListResponseDataItemAttributesProductTypeDataAttributesMeta
     */
    'metaImage'?: SectionsSubPageComponentFeaturesInnerImage;
    /**
     * 
     * @type {string}
     * @memberof ThuocListResponseDataItemAttributesProductTypeDataAttributesMeta
     */
    'metaTitle'?: string;
}
/**
 * 
 * @export
 * @interface ThuocRequest
 */
export interface ThuocRequest {
    /**
     * 
     * @type {ThuocRequestData}
     * @memberof ThuocRequest
     */
    'data': ThuocRequestData;
}
/**
 * 
 * @export
 * @interface ThuocRequestData
 */
export interface ThuocRequestData {
    /**
     * 
     * @type {string}
     * @memberof ThuocRequestData
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThuocRequestData
     */
    'form'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThuocRequestData
     */
    'packing'?: string;
    /**
     * 
     * @type {number}
     * @memberof ThuocRequestData
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof ThuocRequestData
     */
    'promotionPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof ThuocRequestData
     */
    'material'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThuocRequestData
     */
    'uses'?: string;
    /**
     * 
     * @type {Array<AboutUsLocalizationRequestBanner>}
     * @memberof ThuocRequestData
     */
    'images'?: Array<AboutUsLocalizationRequestBanner>;
    /**
     * 
     * @type {string}
     * @memberof ThuocRequestData
     */
    'status'?: ThuocRequestDataStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ThuocRequestData
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThuocRequestData
     */
    'indication'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThuocRequestData
     */
    'guide'?: string;
    /**
     * 
     * @type {AboutUsLocalizationRequestBanner}
     * @memberof ThuocRequestData
     */
    'prescription'?: AboutUsLocalizationRequestBanner;
    /**
     * 
     * @type {string}
     * @memberof ThuocRequestData
     */
    'introduce'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThuocRequestData
     */
    'slug'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ThuocRequestData
     */
    'isHot'?: boolean;
    /**
     * 
     * @type {AboutUsLocalizationRequestBanner}
     * @memberof ThuocRequestData
     */
    'product_type'?: AboutUsLocalizationRequestBanner;
    /**
     * 
     * @type {SharedSeoComponent}
     * @memberof ThuocRequestData
     */
    'meta'?: SharedSeoComponent;
    /**
     * 
     * @type {string}
     * @memberof ThuocRequestData
     */
    'test'?: string;
}

export const ThuocRequestDataStatusEnum = {
    On: 'on',
    Off: 'off'
} as const;

export type ThuocRequestDataStatusEnum = typeof ThuocRequestDataStatusEnum[keyof typeof ThuocRequestDataStatusEnum];

/**
 * 
 * @export
 * @interface ThuocResponse
 */
export interface ThuocResponse {
    /**
     * 
     * @type {ThuocResponseDataObject}
     * @memberof ThuocResponse
     */
    'data'?: ThuocResponseDataObject;
    /**
     * 
     * @type {object}
     * @memberof ThuocResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface ThuocResponseDataObject
 */
export interface ThuocResponseDataObject {
    /**
     * 
     * @type {number}
     * @memberof ThuocResponseDataObject
     */
    'id'?: number;
    /**
     * 
     * @type {ThuocListResponseDataItemAttributes}
     * @memberof ThuocResponseDataObject
     */
    'attributes'?: ThuocListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface UploadFileListResponse
 */
export interface UploadFileListResponse {
    /**
     * 
     * @type {Array<UploadFileListResponseDataItem>}
     * @memberof UploadFileListResponse
     */
    'data'?: Array<UploadFileListResponseDataItem>;
    /**
     * 
     * @type {AboutUsListResponseMeta}
     * @memberof UploadFileListResponse
     */
    'meta'?: AboutUsListResponseMeta;
}
/**
 * 
 * @export
 * @interface UploadFileListResponseDataItem
 */
export interface UploadFileListResponseDataItem {
    /**
     * 
     * @type {number}
     * @memberof UploadFileListResponseDataItem
     */
    'id'?: number;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributes}
     * @memberof UploadFileListResponseDataItem
     */
    'attributes'?: AboutUsLocalizationResponseBannerDataAttributes;
}
/**
 * 
 * @export
 * @interface UploadFileRequest
 */
export interface UploadFileRequest {
    /**
     * 
     * @type {UploadFileRequestData}
     * @memberof UploadFileRequest
     */
    'data': UploadFileRequestData;
}
/**
 * 
 * @export
 * @interface UploadFileRequestData
 */
export interface UploadFileRequestData {
    /**
     * 
     * @type {string}
     * @memberof UploadFileRequestData
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UploadFileRequestData
     */
    'alternativeText'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFileRequestData
     */
    'caption'?: string;
    /**
     * 
     * @type {number}
     * @memberof UploadFileRequestData
     */
    'width'?: number;
    /**
     * 
     * @type {number}
     * @memberof UploadFileRequestData
     */
    'height'?: number;
    /**
     * 
     * @type {any}
     * @memberof UploadFileRequestData
     */
    'formats'?: any;
    /**
     * 
     * @type {string}
     * @memberof UploadFileRequestData
     */
    'hash': string;
    /**
     * 
     * @type {string}
     * @memberof UploadFileRequestData
     */
    'ext'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFileRequestData
     */
    'mime': string;
    /**
     * 
     * @type {number}
     * @memberof UploadFileRequestData
     */
    'size': number;
    /**
     * 
     * @type {string}
     * @memberof UploadFileRequestData
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof UploadFileRequestData
     */
    'previewUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof UploadFileRequestData
     */
    'provider': string;
    /**
     * 
     * @type {any}
     * @memberof UploadFileRequestData
     */
    'provider_metadata'?: any;
    /**
     * 
     * @type {Array<AboutUsLocalizationRequestBanner>}
     * @memberof UploadFileRequestData
     */
    'related'?: Array<AboutUsLocalizationRequestBanner>;
    /**
     * 
     * @type {AboutUsLocalizationRequestBanner}
     * @memberof UploadFileRequestData
     */
    'folder'?: AboutUsLocalizationRequestBanner;
    /**
     * 
     * @type {string}
     * @memberof UploadFileRequestData
     */
    'folderPath': string;
}
/**
 * 
 * @export
 * @interface UploadFileResponse
 */
export interface UploadFileResponse {
    /**
     * 
     * @type {UploadFileResponseDataObject}
     * @memberof UploadFileResponse
     */
    'data'?: UploadFileResponseDataObject;
    /**
     * 
     * @type {object}
     * @memberof UploadFileResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface UploadFileResponseDataObject
 */
export interface UploadFileResponseDataObject {
    /**
     * 
     * @type {number}
     * @memberof UploadFileResponseDataObject
     */
    'id'?: number;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributes}
     * @memberof UploadFileResponseDataObject
     */
    'attributes'?: AboutUsLocalizationResponseBannerDataAttributes;
}
/**
 * 
 * @export
 * @interface UploadFolderListResponse
 */
export interface UploadFolderListResponse {
    /**
     * 
     * @type {Array<UploadFolderListResponseDataItem>}
     * @memberof UploadFolderListResponse
     */
    'data'?: Array<UploadFolderListResponseDataItem>;
    /**
     * 
     * @type {AboutUsListResponseMeta}
     * @memberof UploadFolderListResponse
     */
    'meta'?: AboutUsListResponseMeta;
}
/**
 * 
 * @export
 * @interface UploadFolderListResponseDataItem
 */
export interface UploadFolderListResponseDataItem {
    /**
     * 
     * @type {number}
     * @memberof UploadFolderListResponseDataItem
     */
    'id'?: number;
    /**
     * 
     * @type {UploadFolderListResponseDataItemAttributes}
     * @memberof UploadFolderListResponseDataItem
     */
    'attributes'?: UploadFolderListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface UploadFolderListResponseDataItemAttributes
 */
export interface UploadFolderListResponseDataItemAttributes {
    /**
     * 
     * @type {string}
     * @memberof UploadFolderListResponseDataItemAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof UploadFolderListResponseDataItemAttributes
     */
    'pathId'?: number;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolder}
     * @memberof UploadFolderListResponseDataItemAttributes
     */
    'parent'?: AboutUsLocalizationResponseBannerDataAttributesFolder;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesRelated}
     * @memberof UploadFolderListResponseDataItemAttributes
     */
    'children'?: AboutUsLocalizationResponseBannerDataAttributesRelated;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesRelated}
     * @memberof UploadFolderListResponseDataItemAttributes
     */
    'files'?: AboutUsLocalizationResponseBannerDataAttributesRelated;
    /**
     * 
     * @type {string}
     * @memberof UploadFolderListResponseDataItemAttributes
     */
    'path'?: string;
    /**
     * 
     * @type {Date}
     * @memberof UploadFolderListResponseDataItemAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UploadFolderListResponseDataItemAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof UploadFolderListResponseDataItemAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof UploadFolderListResponseDataItemAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}
/**
 * 
 * @export
 * @interface UploadFolderRequest
 */
export interface UploadFolderRequest {
    /**
     * 
     * @type {UploadFolderRequestData}
     * @memberof UploadFolderRequest
     */
    'data': UploadFolderRequestData;
}
/**
 * 
 * @export
 * @interface UploadFolderRequestData
 */
export interface UploadFolderRequestData {
    /**
     * 
     * @type {string}
     * @memberof UploadFolderRequestData
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof UploadFolderRequestData
     */
    'pathId': number;
    /**
     * 
     * @type {AboutUsLocalizationRequestBanner}
     * @memberof UploadFolderRequestData
     */
    'parent'?: AboutUsLocalizationRequestBanner;
    /**
     * 
     * @type {Array<AboutUsLocalizationRequestBanner>}
     * @memberof UploadFolderRequestData
     */
    'children'?: Array<AboutUsLocalizationRequestBanner>;
    /**
     * 
     * @type {Array<AboutUsLocalizationRequestBanner>}
     * @memberof UploadFolderRequestData
     */
    'files'?: Array<AboutUsLocalizationRequestBanner>;
    /**
     * 
     * @type {string}
     * @memberof UploadFolderRequestData
     */
    'path': string;
}
/**
 * 
 * @export
 * @interface UploadFolderResponse
 */
export interface UploadFolderResponse {
    /**
     * 
     * @type {UploadFolderResponseDataObject}
     * @memberof UploadFolderResponse
     */
    'data'?: UploadFolderResponseDataObject;
    /**
     * 
     * @type {object}
     * @memberof UploadFolderResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface UploadFolderResponseDataObject
 */
export interface UploadFolderResponseDataObject {
    /**
     * 
     * @type {number}
     * @memberof UploadFolderResponseDataObject
     */
    'id'?: number;
    /**
     * 
     * @type {UploadFolderListResponseDataItemAttributes}
     * @memberof UploadFolderResponseDataObject
     */
    'attributes'?: UploadFolderListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface UsersIdDelete200Response
 */
export interface UsersIdDelete200Response {
    /**
     * 
     * @type {number}
     * @memberof UsersIdDelete200Response
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsersIdDelete200Response
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersIdDelete200Response
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersIdDelete200Response
     */
    'provider'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UsersIdDelete200Response
     */
    'confirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UsersIdDelete200Response
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof UsersIdDelete200Response
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UsersIdDelete200Response
     */
    'updatedAt'?: Date;
}
/**
 * 
 * @export
 * @interface UsersPermissionsPermissionListResponse
 */
export interface UsersPermissionsPermissionListResponse {
    /**
     * 
     * @type {Array<UsersPermissionsPermissionListResponseDataItem>}
     * @memberof UsersPermissionsPermissionListResponse
     */
    'data'?: Array<UsersPermissionsPermissionListResponseDataItem>;
    /**
     * 
     * @type {AboutUsListResponseMeta}
     * @memberof UsersPermissionsPermissionListResponse
     */
    'meta'?: AboutUsListResponseMeta;
}
/**
 * 
 * @export
 * @interface UsersPermissionsPermissionListResponseDataItem
 */
export interface UsersPermissionsPermissionListResponseDataItem {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsPermissionListResponseDataItem
     */
    'id'?: number;
    /**
     * 
     * @type {UsersPermissionsPermissionListResponseDataItemAttributes}
     * @memberof UsersPermissionsPermissionListResponseDataItem
     */
    'attributes'?: UsersPermissionsPermissionListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface UsersPermissionsPermissionListResponseDataItemAttributes
 */
export interface UsersPermissionsPermissionListResponseDataItemAttributes {
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributes
     */
    'action'?: string;
    /**
     * 
     * @type {UsersPermissionsPermissionListResponseDataItemAttributesRole}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributes
     */
    'role'?: UsersPermissionsPermissionListResponseDataItemAttributesRole;
    /**
     * 
     * @type {Date}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}
/**
 * 
 * @export
 * @interface UsersPermissionsPermissionListResponseDataItemAttributesRole
 */
export interface UsersPermissionsPermissionListResponseDataItemAttributesRole {
    /**
     * 
     * @type {UsersPermissionsPermissionListResponseDataItemAttributesRoleData}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRole
     */
    'data'?: UsersPermissionsPermissionListResponseDataItemAttributesRoleData;
}
/**
 * 
 * @export
 * @interface UsersPermissionsPermissionListResponseDataItemAttributesRoleData
 */
export interface UsersPermissionsPermissionListResponseDataItemAttributesRoleData {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleData
     */
    'id'?: number;
    /**
     * 
     * @type {UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleData
     */
    'attributes'?: UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes;
}
/**
 * 
 * @export
 * @interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes
 */
export interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes
     */
    'type'?: string;
    /**
     * 
     * @type {UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissions}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes
     */
    'permissions'?: UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissions;
    /**
     * 
     * @type {UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsers}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes
     */
    'users'?: UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsers;
    /**
     * 
     * @type {Date}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}
/**
 * 
 * @export
 * @interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissions
 */
export interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissions {
    /**
     * 
     * @type {Array<UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInner>}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissions
     */
    'data'?: Array<UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInner>;
}
/**
 * 
 * @export
 * @interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInner
 */
export interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInner {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInner
     */
    'id'?: number;
    /**
     * 
     * @type {UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributes}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInner
     */
    'attributes'?: UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributes;
}
/**
 * 
 * @export
 * @interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributes
 */
export interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributes {
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributes
     */
    'action'?: string;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributes
     */
    'role'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {Date}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesPermissionsDataInnerAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}
/**
 * 
 * @export
 * @interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsers
 */
export interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsers {
    /**
     * 
     * @type {Array<UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInner>}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsers
     */
    'data'?: Array<UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInner>;
}
/**
 * 
 * @export
 * @interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInner
 */
export interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInner {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInner
     */
    'id'?: number;
    /**
     * 
     * @type {UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInner
     */
    'attributes'?: UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes;
}
/**
 * 
 * @export
 * @interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
 */
export interface UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes {
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
     */
    'provider'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
     */
    'resetPasswordToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
     */
    'confirmationToken'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
     */
    'confirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
     */
    'role'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {Date}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof UsersPermissionsPermissionListResponseDataItemAttributesRoleDataAttributesUsersDataInnerAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}
/**
 * 
 * @export
 * @interface UsersPermissionsPermissionRequest
 */
export interface UsersPermissionsPermissionRequest {
    /**
     * 
     * @type {UsersPermissionsPermissionRequestData}
     * @memberof UsersPermissionsPermissionRequest
     */
    'data': UsersPermissionsPermissionRequestData;
}
/**
 * 
 * @export
 * @interface UsersPermissionsPermissionRequestData
 */
export interface UsersPermissionsPermissionRequestData {
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsPermissionRequestData
     */
    'action': string;
    /**
     * 
     * @type {AboutUsLocalizationRequestBanner}
     * @memberof UsersPermissionsPermissionRequestData
     */
    'role'?: AboutUsLocalizationRequestBanner;
}
/**
 * 
 * @export
 * @interface UsersPermissionsPermissionResponse
 */
export interface UsersPermissionsPermissionResponse {
    /**
     * 
     * @type {UsersPermissionsPermissionResponseDataObject}
     * @memberof UsersPermissionsPermissionResponse
     */
    'data'?: UsersPermissionsPermissionResponseDataObject;
    /**
     * 
     * @type {object}
     * @memberof UsersPermissionsPermissionResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface UsersPermissionsPermissionResponseDataObject
 */
export interface UsersPermissionsPermissionResponseDataObject {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsPermissionResponseDataObject
     */
    'id'?: number;
    /**
     * 
     * @type {UsersPermissionsPermissionListResponseDataItemAttributes}
     * @memberof UsersPermissionsPermissionResponseDataObject
     */
    'attributes'?: UsersPermissionsPermissionListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface UsersPermissionsPermissionsGet200Response
 */
export interface UsersPermissionsPermissionsGet200Response {
    /**
     * 
     * @type {{ [key: string]: UsersPermissionsPermissionsTreeValue; }}
     * @memberof UsersPermissionsPermissionsGet200Response
     */
    'permissions'?: { [key: string]: UsersPermissionsPermissionsTreeValue; };
}
/**
 * every api
 * @export
 * @interface UsersPermissionsPermissionsTreeValue
 */
export interface UsersPermissionsPermissionsTreeValue {
    /**
     * every controller of the api
     * @type {{ [key: string]: { [key: string]: UsersPermissionsPermissionsTreeValueControllersValueValue; }; }}
     * @memberof UsersPermissionsPermissionsTreeValue
     */
    'controllers'?: { [key: string]: { [key: string]: UsersPermissionsPermissionsTreeValueControllersValueValue; }; };
}
/**
 * every action of every controller
 * @export
 * @interface UsersPermissionsPermissionsTreeValueControllersValueValue
 */
export interface UsersPermissionsPermissionsTreeValueControllersValueValue {
    /**
     * 
     * @type {boolean}
     * @memberof UsersPermissionsPermissionsTreeValueControllersValueValue
     */
    'enabled'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsPermissionsTreeValueControllersValueValue
     */
    'policy'?: string;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRole
 */
export interface UsersPermissionsRole {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsRole
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRole
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRole
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRole
     */
    'type'?: string;
    /**
     * 
     * @type {Date}
     * @memberof UsersPermissionsRole
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UsersPermissionsRole
     */
    'updatedAt'?: Date;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRoleListResponse
 */
export interface UsersPermissionsRoleListResponse {
    /**
     * 
     * @type {Array<UsersPermissionsRoleListResponseDataItem>}
     * @memberof UsersPermissionsRoleListResponse
     */
    'data'?: Array<UsersPermissionsRoleListResponseDataItem>;
    /**
     * 
     * @type {AboutUsListResponseMeta}
     * @memberof UsersPermissionsRoleListResponse
     */
    'meta'?: AboutUsListResponseMeta;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRoleListResponseDataItem
 */
export interface UsersPermissionsRoleListResponseDataItem {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsRoleListResponseDataItem
     */
    'id'?: number;
    /**
     * 
     * @type {UsersPermissionsRoleListResponseDataItemAttributes}
     * @memberof UsersPermissionsRoleListResponseDataItem
     */
    'attributes'?: UsersPermissionsRoleListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRoleListResponseDataItemAttributes
 */
export interface UsersPermissionsRoleListResponseDataItemAttributes {
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributes
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributes
     */
    'type'?: string;
    /**
     * 
     * @type {UsersPermissionsRoleListResponseDataItemAttributesPermissions}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributes
     */
    'permissions'?: UsersPermissionsRoleListResponseDataItemAttributesPermissions;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesRelated}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributes
     */
    'users'?: AboutUsLocalizationResponseBannerDataAttributesRelated;
    /**
     * 
     * @type {Date}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRoleListResponseDataItemAttributesPermissions
 */
export interface UsersPermissionsRoleListResponseDataItemAttributesPermissions {
    /**
     * 
     * @type {Array<UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInner>}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissions
     */
    'data'?: Array<UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInner>;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInner
 */
export interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInner {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInner
     */
    'id'?: number;
    /**
     * 
     * @type {UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributes}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInner
     */
    'attributes'?: UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributes;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributes
 */
export interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributes {
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributes
     */
    'action'?: string;
    /**
     * 
     * @type {UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRole}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributes
     */
    'role'?: UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRole;
    /**
     * 
     * @type {Date}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRole
 */
export interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRole {
    /**
     * 
     * @type {UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleData}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRole
     */
    'data'?: UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleData;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleData
 */
export interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleData {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleData
     */
    'id'?: number;
    /**
     * 
     * @type {UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleData
     */
    'attributes'?: UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes
 */
export interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes {
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes
     */
    'type'?: string;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesRelated}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes
     */
    'permissions'?: AboutUsLocalizationResponseBannerDataAttributesRelated;
    /**
     * 
     * @type {UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsers}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes
     */
    'users'?: UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsers;
    /**
     * 
     * @type {Date}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsers
 */
export interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsers {
    /**
     * 
     * @type {Array<UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInner>}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsers
     */
    'data'?: Array<UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInner>;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInner
 */
export interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInner {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInner
     */
    'id'?: number;
    /**
     * 
     * @type {UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInner
     */
    'attributes'?: UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
 */
export interface UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes {
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
     */
    'provider'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
     */
    'resetPasswordToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
     */
    'confirmationToken'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
     */
    'confirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
     */
    'role'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {Date}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesFilesDataInnerAttributesCreatedBy;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof UsersPermissionsRoleListResponseDataItemAttributesPermissionsDataInnerAttributesRoleDataAttributesUsersDataInnerAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRoleRequest
 */
export interface UsersPermissionsRoleRequest {
    /**
     * 
     * @type {UsersPermissionsRoleRequestData}
     * @memberof UsersPermissionsRoleRequest
     */
    'data': UsersPermissionsRoleRequestData;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRoleRequestData
 */
export interface UsersPermissionsRoleRequestData {
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRoleRequestData
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRoleRequestData
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRoleRequestData
     */
    'type'?: string;
    /**
     * 
     * @type {Array<AboutUsLocalizationRequestBanner>}
     * @memberof UsersPermissionsRoleRequestData
     */
    'permissions'?: Array<AboutUsLocalizationRequestBanner>;
    /**
     * 
     * @type {Array<AboutUsLocalizationRequestBanner>}
     * @memberof UsersPermissionsRoleRequestData
     */
    'users'?: Array<AboutUsLocalizationRequestBanner>;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRoleResponse
 */
export interface UsersPermissionsRoleResponse {
    /**
     * 
     * @type {UsersPermissionsRoleResponseDataObject}
     * @memberof UsersPermissionsRoleResponse
     */
    'data'?: UsersPermissionsRoleResponseDataObject;
    /**
     * 
     * @type {object}
     * @memberof UsersPermissionsRoleResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRoleResponseDataObject
 */
export interface UsersPermissionsRoleResponseDataObject {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsRoleResponseDataObject
     */
    'id'?: number;
    /**
     * 
     * @type {UsersPermissionsRoleListResponseDataItemAttributes}
     * @memberof UsersPermissionsRoleResponseDataObject
     */
    'attributes'?: UsersPermissionsRoleListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRolesGet200Response
 */
export interface UsersPermissionsRolesGet200Response {
    /**
     * 
     * @type {Array<UsersPermissionsRolesGet200ResponseRolesInner>}
     * @memberof UsersPermissionsRolesGet200Response
     */
    'roles'?: Array<UsersPermissionsRolesGet200ResponseRolesInner>;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRolesGet200ResponseRolesInner
 */
export interface UsersPermissionsRolesGet200ResponseRolesInner {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'type'?: string;
    /**
     * 
     * @type {Date}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInner
     */
    'nb_users'?: number;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRolesGet200ResponseRolesInnerAllOf
 */
export interface UsersPermissionsRolesGet200ResponseRolesInnerAllOf {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsRolesGet200ResponseRolesInnerAllOf
     */
    'nb_users'?: number;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRolesIdGet200Response
 */
export interface UsersPermissionsRolesIdGet200Response {
    /**
     * 
     * @type {UsersPermissionsRole}
     * @memberof UsersPermissionsRolesIdGet200Response
     */
    'role'?: UsersPermissionsRole;
}
/**
 * 
 * @export
 * @interface UsersPermissionsRolesPost200Response
 */
export interface UsersPermissionsRolesPost200Response {
    /**
     * 
     * @type {Enum}
     * @memberof UsersPermissionsRolesPost200Response
     */
    'ok'?: UsersPermissionsRolesPost200ResponseOkEnum;
}

export const UsersPermissionsRolesPost200ResponseOkEnum = {
    True: 'true'
} as const;

export type UsersPermissionsRolesPost200ResponseOkEnum = typeof UsersPermissionsRolesPost200ResponseOkEnum[keyof typeof UsersPermissionsRolesPost200ResponseOkEnum];

/**
 * 
 * @export
 * @interface UsersPermissionsRolesPostRequest
 */
export interface UsersPermissionsRolesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesPostRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesPostRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsRolesPostRequest
     */
    'type'?: string;
    /**
     * 
     * @type {{ [key: string]: UsersPermissionsPermissionsTreeValue; }}
     * @memberof UsersPermissionsRolesPostRequest
     */
    'permissions'?: { [key: string]: UsersPermissionsPermissionsTreeValue; };
}
/**
 * 
 * @export
 * @interface UsersPermissionsUser
 */
export interface UsersPermissionsUser {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsUser
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUser
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUser
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUser
     */
    'provider'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UsersPermissionsUser
     */
    'confirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UsersPermissionsUser
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof UsersPermissionsUser
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UsersPermissionsUser
     */
    'updatedAt'?: Date;
}
/**
 * 
 * @export
 * @interface UsersPermissionsUserListResponse
 */
export interface UsersPermissionsUserListResponse {
    /**
     * 
     * @type {Array<UsersPermissionsUserListResponseDataItem>}
     * @memberof UsersPermissionsUserListResponse
     */
    'data'?: Array<UsersPermissionsUserListResponseDataItem>;
    /**
     * 
     * @type {AboutUsListResponseMeta}
     * @memberof UsersPermissionsUserListResponse
     */
    'meta'?: AboutUsListResponseMeta;
}
/**
 * 
 * @export
 * @interface UsersPermissionsUserListResponseDataItem
 */
export interface UsersPermissionsUserListResponseDataItem {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsUserListResponseDataItem
     */
    'id'?: number;
    /**
     * 
     * @type {UsersPermissionsUserListResponseDataItemAttributes}
     * @memberof UsersPermissionsUserListResponseDataItem
     */
    'attributes'?: UsersPermissionsUserListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface UsersPermissionsUserListResponseDataItemAttributes
 */
export interface UsersPermissionsUserListResponseDataItemAttributes {
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUserListResponseDataItemAttributes
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUserListResponseDataItemAttributes
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUserListResponseDataItemAttributes
     */
    'provider'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUserListResponseDataItemAttributes
     */
    'resetPasswordToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUserListResponseDataItemAttributes
     */
    'confirmationToken'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UsersPermissionsUserListResponseDataItemAttributes
     */
    'confirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UsersPermissionsUserListResponseDataItemAttributes
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {UsersPermissionsPermissionListResponseDataItemAttributesRole}
     * @memberof UsersPermissionsUserListResponseDataItemAttributes
     */
    'role'?: UsersPermissionsPermissionListResponseDataItemAttributesRole;
    /**
     * 
     * @type {Date}
     * @memberof UsersPermissionsUserListResponseDataItemAttributes
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UsersPermissionsUserListResponseDataItemAttributes
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof UsersPermissionsUserListResponseDataItemAttributes
     */
    'createdBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
    /**
     * 
     * @type {AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent}
     * @memberof UsersPermissionsUserListResponseDataItemAttributes
     */
    'updatedBy'?: AboutUsLocalizationResponseBannerDataAttributesFolderDataAttributesParent;
}
/**
 * 
 * @export
 * @interface UsersPermissionsUserRegistration
 */
export interface UsersPermissionsUserRegistration {
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUserRegistration
     */
    'jwt'?: string;
    /**
     * 
     * @type {UsersPermissionsUser}
     * @memberof UsersPermissionsUserRegistration
     */
    'user'?: UsersPermissionsUser;
}
/**
 * 
 * @export
 * @interface UsersPermissionsUserRequest
 */
export interface UsersPermissionsUserRequest {
    /**
     * 
     * @type {UsersPermissionsUserRequestData}
     * @memberof UsersPermissionsUserRequest
     */
    'data': UsersPermissionsUserRequestData;
}
/**
 * 
 * @export
 * @interface UsersPermissionsUserRequestData
 */
export interface UsersPermissionsUserRequestData {
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUserRequestData
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUserRequestData
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUserRequestData
     */
    'provider'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUserRequestData
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUserRequestData
     */
    'resetPasswordToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPermissionsUserRequestData
     */
    'confirmationToken'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UsersPermissionsUserRequestData
     */
    'confirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UsersPermissionsUserRequestData
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {AboutUsLocalizationRequestBanner}
     * @memberof UsersPermissionsUserRequestData
     */
    'role'?: AboutUsLocalizationRequestBanner;
}
/**
 * 
 * @export
 * @interface UsersPermissionsUserResponse
 */
export interface UsersPermissionsUserResponse {
    /**
     * 
     * @type {UsersPermissionsUserResponseDataObject}
     * @memberof UsersPermissionsUserResponse
     */
    'data'?: UsersPermissionsUserResponseDataObject;
    /**
     * 
     * @type {object}
     * @memberof UsersPermissionsUserResponse
     */
    'meta'?: object;
}
/**
 * 
 * @export
 * @interface UsersPermissionsUserResponseDataObject
 */
export interface UsersPermissionsUserResponseDataObject {
    /**
     * 
     * @type {number}
     * @memberof UsersPermissionsUserResponseDataObject
     */
    'id'?: number;
    /**
     * 
     * @type {UsersPermissionsUserListResponseDataItemAttributes}
     * @memberof UsersPermissionsUserResponseDataObject
     */
    'attributes'?: UsersPermissionsUserListResponseDataItemAttributes;
}
/**
 * 
 * @export
 * @interface UsersPost201Response
 */
export interface UsersPost201Response {
    /**
     * 
     * @type {number}
     * @memberof UsersPost201Response
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UsersPost201Response
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPost201Response
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UsersPost201Response
     */
    'provider'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UsersPost201Response
     */
    'confirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UsersPost201Response
     */
    'blocked'?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof UsersPost201Response
     */
    'createdAt'?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UsersPost201Response
     */
    'updatedAt'?: Date;
    /**
     * 
     * @type {UsersPermissionsRole}
     * @memberof UsersPost201Response
     */
    'role'?: UsersPermissionsRole;
}
/**
 * 
 * @export
 * @interface UsersPostRequest
 */
export interface UsersPostRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersPostRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UsersPostRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UsersPostRequest
     */
    'password': string;
}

/**
 * AboutUsApi - axios parameter creator
 * @export
 */
export const AboutUsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAboutUs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/about-us`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAboutUs: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/about-us`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AboutUsLocalizationRequest} aboutUsLocalizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAboutUsLocalizations: async (aboutUsLocalizationRequest: AboutUsLocalizationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'aboutUsLocalizationRequest' is not null or undefined
            assertParamExists('postAboutUsLocalizations', 'aboutUsLocalizationRequest', aboutUsLocalizationRequest)
            const localVarPath = `/about-us/localizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(aboutUsLocalizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AboutUsRequest} aboutUsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAboutUs: async (aboutUsRequest: AboutUsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'aboutUsRequest' is not null or undefined
            assertParamExists('putAboutUs', 'aboutUsRequest', aboutUsRequest)
            const localVarPath = `/about-us`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(aboutUsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AboutUsApi - functional programming interface
 * @export
 */
export const AboutUsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AboutUsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAboutUs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAboutUs(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAboutUs(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AboutUsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAboutUs(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AboutUsLocalizationRequest} aboutUsLocalizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAboutUsLocalizations(aboutUsLocalizationRequest: AboutUsLocalizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AboutUsLocalizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAboutUsLocalizations(aboutUsLocalizationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AboutUsRequest} aboutUsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAboutUs(aboutUsRequest: AboutUsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AboutUsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putAboutUs(aboutUsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AboutUsApi - factory interface
 * @export
 */
export const AboutUsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AboutUsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAboutUs(options?: AxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteAboutUs(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AboutUsApiGetAboutUsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAboutUs(requestParameters: AboutUsApiGetAboutUsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AboutUsResponse> {
            return localVarFp.getAboutUs(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AboutUsApiPostAboutUsLocalizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAboutUsLocalizations(requestParameters: AboutUsApiPostAboutUsLocalizationsRequest, options?: AxiosRequestConfig): AxiosPromise<AboutUsLocalizationResponse> {
            return localVarFp.postAboutUsLocalizations(requestParameters.aboutUsLocalizationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AboutUsApiPutAboutUsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAboutUs(requestParameters: AboutUsApiPutAboutUsRequest, options?: AxiosRequestConfig): AxiosPromise<AboutUsResponse> {
            return localVarFp.putAboutUs(requestParameters.aboutUsRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAboutUs operation in AboutUsApi.
 * @export
 * @interface AboutUsApiGetAboutUsRequest
 */
export interface AboutUsApiGetAboutUsRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof AboutUsApiGetAboutUs
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof AboutUsApiGetAboutUs
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof AboutUsApiGetAboutUs
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof AboutUsApiGetAboutUs
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof AboutUsApiGetAboutUs
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof AboutUsApiGetAboutUs
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof AboutUsApiGetAboutUs
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof AboutUsApiGetAboutUs
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof AboutUsApiGetAboutUs
     */
    readonly filters?: object

    /**
     * Locale to apply
     * @type {string}
     * @memberof AboutUsApiGetAboutUs
     */
    readonly locale?: string
}

/**
 * Request parameters for postAboutUsLocalizations operation in AboutUsApi.
 * @export
 * @interface AboutUsApiPostAboutUsLocalizationsRequest
 */
export interface AboutUsApiPostAboutUsLocalizationsRequest {
    /**
     * 
     * @type {AboutUsLocalizationRequest}
     * @memberof AboutUsApiPostAboutUsLocalizations
     */
    readonly aboutUsLocalizationRequest: AboutUsLocalizationRequest
}

/**
 * Request parameters for putAboutUs operation in AboutUsApi.
 * @export
 * @interface AboutUsApiPutAboutUsRequest
 */
export interface AboutUsApiPutAboutUsRequest {
    /**
     * 
     * @type {AboutUsRequest}
     * @memberof AboutUsApiPutAboutUs
     */
    readonly aboutUsRequest: AboutUsRequest
}

/**
 * AboutUsApi - object-oriented interface
 * @export
 * @class AboutUsApi
 * @extends {BaseAPI}
 */
export class AboutUsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AboutUsApi
     */
    public deleteAboutUs(options?: AxiosRequestConfig) {
        return AboutUsApiFp(this.configuration).deleteAboutUs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AboutUsApiGetAboutUsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AboutUsApi
     */
    public getAboutUs(requestParameters: AboutUsApiGetAboutUsRequest = {}, options?: AxiosRequestConfig) {
        return AboutUsApiFp(this.configuration).getAboutUs(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AboutUsApiPostAboutUsLocalizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AboutUsApi
     */
    public postAboutUsLocalizations(requestParameters: AboutUsApiPostAboutUsLocalizationsRequest, options?: AxiosRequestConfig) {
        return AboutUsApiFp(this.configuration).postAboutUsLocalizations(requestParameters.aboutUsLocalizationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AboutUsApiPutAboutUsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AboutUsApi
     */
    public putAboutUs(requestParameters: AboutUsApiPutAboutUsRequest, options?: AxiosRequestConfig) {
        return AboutUsApiFp(this.configuration).putAboutUs(requestParameters.aboutUsRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AgencyApi - axios parameter creator
 * @export
 */
export const AgencyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgenciesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAgenciesId', 'id', id)
            const localVarPath = `/agencies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgencies: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/agencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgenciesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAgenciesId', 'id', id)
            const localVarPath = `/agencies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AgencyRequest} agencyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAgencies: async (agencyRequest: AgencyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agencyRequest' is not null or undefined
            assertParamExists('postAgencies', 'agencyRequest', agencyRequest)
            const localVarPath = `/agencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(agencyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {AgencyRequest} agencyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAgenciesId: async (id: number, agencyRequest: AgencyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putAgenciesId', 'id', id)
            // verify required parameter 'agencyRequest' is not null or undefined
            assertParamExists('putAgenciesId', 'agencyRequest', agencyRequest)
            const localVarPath = `/agencies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(agencyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AgencyApi - functional programming interface
 * @export
 */
export const AgencyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AgencyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAgenciesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAgenciesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAgencies(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgencyListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAgencies(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAgenciesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgencyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAgenciesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AgencyRequest} agencyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAgencies(agencyRequest: AgencyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgencyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAgencies(agencyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {AgencyRequest} agencyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putAgenciesId(id: number, agencyRequest: AgencyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgencyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putAgenciesId(id, agencyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AgencyApi - factory interface
 * @export
 */
export const AgencyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AgencyApiFp(configuration)
    return {
        /**
         * 
         * @param {AgencyApiDeleteAgenciesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgenciesId(requestParameters: AgencyApiDeleteAgenciesIdRequest, options?: AxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteAgenciesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AgencyApiGetAgenciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgencies(requestParameters: AgencyApiGetAgenciesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AgencyListResponse> {
            return localVarFp.getAgencies(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AgencyApiGetAgenciesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgenciesId(requestParameters: AgencyApiGetAgenciesIdRequest, options?: AxiosRequestConfig): AxiosPromise<AgencyResponse> {
            return localVarFp.getAgenciesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AgencyApiPostAgenciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAgencies(requestParameters: AgencyApiPostAgenciesRequest, options?: AxiosRequestConfig): AxiosPromise<AgencyResponse> {
            return localVarFp.postAgencies(requestParameters.agencyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AgencyApiPutAgenciesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putAgenciesId(requestParameters: AgencyApiPutAgenciesIdRequest, options?: AxiosRequestConfig): AxiosPromise<AgencyResponse> {
            return localVarFp.putAgenciesId(requestParameters.id, requestParameters.agencyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteAgenciesId operation in AgencyApi.
 * @export
 * @interface AgencyApiDeleteAgenciesIdRequest
 */
export interface AgencyApiDeleteAgenciesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof AgencyApiDeleteAgenciesId
     */
    readonly id: number
}

/**
 * Request parameters for getAgencies operation in AgencyApi.
 * @export
 * @interface AgencyApiGetAgenciesRequest
 */
export interface AgencyApiGetAgenciesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof AgencyApiGetAgencies
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof AgencyApiGetAgencies
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof AgencyApiGetAgencies
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof AgencyApiGetAgencies
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof AgencyApiGetAgencies
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof AgencyApiGetAgencies
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof AgencyApiGetAgencies
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof AgencyApiGetAgencies
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof AgencyApiGetAgencies
     */
    readonly filters?: object

    /**
     * Locale to apply
     * @type {string}
     * @memberof AgencyApiGetAgencies
     */
    readonly locale?: string
}

/**
 * Request parameters for getAgenciesId operation in AgencyApi.
 * @export
 * @interface AgencyApiGetAgenciesIdRequest
 */
export interface AgencyApiGetAgenciesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof AgencyApiGetAgenciesId
     */
    readonly id: number
}

/**
 * Request parameters for postAgencies operation in AgencyApi.
 * @export
 * @interface AgencyApiPostAgenciesRequest
 */
export interface AgencyApiPostAgenciesRequest {
    /**
     * 
     * @type {AgencyRequest}
     * @memberof AgencyApiPostAgencies
     */
    readonly agencyRequest: AgencyRequest
}

/**
 * Request parameters for putAgenciesId operation in AgencyApi.
 * @export
 * @interface AgencyApiPutAgenciesIdRequest
 */
export interface AgencyApiPutAgenciesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof AgencyApiPutAgenciesId
     */
    readonly id: number

    /**
     * 
     * @type {AgencyRequest}
     * @memberof AgencyApiPutAgenciesId
     */
    readonly agencyRequest: AgencyRequest
}

/**
 * AgencyApi - object-oriented interface
 * @export
 * @class AgencyApi
 * @extends {BaseAPI}
 */
export class AgencyApi extends BaseAPI {
    /**
     * 
     * @param {AgencyApiDeleteAgenciesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgencyApi
     */
    public deleteAgenciesId(requestParameters: AgencyApiDeleteAgenciesIdRequest, options?: AxiosRequestConfig) {
        return AgencyApiFp(this.configuration).deleteAgenciesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AgencyApiGetAgenciesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgencyApi
     */
    public getAgencies(requestParameters: AgencyApiGetAgenciesRequest = {}, options?: AxiosRequestConfig) {
        return AgencyApiFp(this.configuration).getAgencies(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AgencyApiGetAgenciesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgencyApi
     */
    public getAgenciesId(requestParameters: AgencyApiGetAgenciesIdRequest, options?: AxiosRequestConfig) {
        return AgencyApiFp(this.configuration).getAgenciesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AgencyApiPostAgenciesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgencyApi
     */
    public postAgencies(requestParameters: AgencyApiPostAgenciesRequest, options?: AxiosRequestConfig) {
        return AgencyApiFp(this.configuration).postAgencies(requestParameters.agencyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AgencyApiPutAgenciesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgencyApi
     */
    public putAgenciesId(requestParameters: AgencyApiPutAgenciesIdRequest, options?: AxiosRequestConfig) {
        return AgencyApiFp(this.configuration).putAgenciesId(requestParameters.id, requestParameters.agencyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BlogApi - axios parameter creator
 * @export
 */
export const BlogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBlogsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBlogsId', 'id', id)
            const localVarPath = `/blogs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogs: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/blogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBlogsId', 'id', id)
            const localVarPath = `/blogs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BlogRequest} blogRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBlogs: async (blogRequest: BlogRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'blogRequest' is not null or undefined
            assertParamExists('postBlogs', 'blogRequest', blogRequest)
            const localVarPath = `/blogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(blogRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {BlogLocalizationRequest} blogLocalizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBlogsIdLocalizations: async (id: number, blogLocalizationRequest: BlogLocalizationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postBlogsIdLocalizations', 'id', id)
            // verify required parameter 'blogLocalizationRequest' is not null or undefined
            assertParamExists('postBlogsIdLocalizations', 'blogLocalizationRequest', blogLocalizationRequest)
            const localVarPath = `/blogs/{id}/localizations`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(blogLocalizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {BlogRequest} blogRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBlogsId: async (id: number, blogRequest: BlogRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putBlogsId', 'id', id)
            // verify required parameter 'blogRequest' is not null or undefined
            assertParamExists('putBlogsId', 'blogRequest', blogRequest)
            const localVarPath = `/blogs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(blogRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlogApi - functional programming interface
 * @export
 */
export const BlogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BlogApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBlogsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBlogsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlogs(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlogs(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlogsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlogsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BlogRequest} blogRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBlogs(blogRequest: BlogRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBlogs(blogRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {BlogLocalizationRequest} blogLocalizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBlogsIdLocalizations(id: number, blogLocalizationRequest: BlogLocalizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogLocalizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBlogsIdLocalizations(id, blogLocalizationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {BlogRequest} blogRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putBlogsId(id: number, blogRequest: BlogRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putBlogsId(id, blogRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BlogApi - factory interface
 * @export
 */
export const BlogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BlogApiFp(configuration)
    return {
        /**
         * 
         * @param {BlogApiDeleteBlogsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBlogsId(requestParameters: BlogApiDeleteBlogsIdRequest, options?: AxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteBlogsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BlogApiGetBlogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogs(requestParameters: BlogApiGetBlogsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BlogListResponse> {
            return localVarFp.getBlogs(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BlogApiGetBlogsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogsId(requestParameters: BlogApiGetBlogsIdRequest, options?: AxiosRequestConfig): AxiosPromise<BlogResponse> {
            return localVarFp.getBlogsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BlogApiPostBlogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBlogs(requestParameters: BlogApiPostBlogsRequest, options?: AxiosRequestConfig): AxiosPromise<BlogResponse> {
            return localVarFp.postBlogs(requestParameters.blogRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BlogApiPostBlogsIdLocalizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBlogsIdLocalizations(requestParameters: BlogApiPostBlogsIdLocalizationsRequest, options?: AxiosRequestConfig): AxiosPromise<BlogLocalizationResponse> {
            return localVarFp.postBlogsIdLocalizations(requestParameters.id, requestParameters.blogLocalizationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BlogApiPutBlogsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBlogsId(requestParameters: BlogApiPutBlogsIdRequest, options?: AxiosRequestConfig): AxiosPromise<BlogResponse> {
            return localVarFp.putBlogsId(requestParameters.id, requestParameters.blogRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteBlogsId operation in BlogApi.
 * @export
 * @interface BlogApiDeleteBlogsIdRequest
 */
export interface BlogApiDeleteBlogsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof BlogApiDeleteBlogsId
     */
    readonly id: number
}

/**
 * Request parameters for getBlogs operation in BlogApi.
 * @export
 * @interface BlogApiGetBlogsRequest
 */
export interface BlogApiGetBlogsRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof BlogApiGetBlogs
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof BlogApiGetBlogs
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof BlogApiGetBlogs
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof BlogApiGetBlogs
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof BlogApiGetBlogs
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof BlogApiGetBlogs
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof BlogApiGetBlogs
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof BlogApiGetBlogs
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof BlogApiGetBlogs
     */
    readonly filters?: object

    /**
     * Locale to apply
     * @type {string}
     * @memberof BlogApiGetBlogs
     */
    readonly locale?: string
}

/**
 * Request parameters for getBlogsId operation in BlogApi.
 * @export
 * @interface BlogApiGetBlogsIdRequest
 */
export interface BlogApiGetBlogsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof BlogApiGetBlogsId
     */
    readonly id: number
}

/**
 * Request parameters for postBlogs operation in BlogApi.
 * @export
 * @interface BlogApiPostBlogsRequest
 */
export interface BlogApiPostBlogsRequest {
    /**
     * 
     * @type {BlogRequest}
     * @memberof BlogApiPostBlogs
     */
    readonly blogRequest: BlogRequest
}

/**
 * Request parameters for postBlogsIdLocalizations operation in BlogApi.
 * @export
 * @interface BlogApiPostBlogsIdLocalizationsRequest
 */
export interface BlogApiPostBlogsIdLocalizationsRequest {
    /**
     * 
     * @type {number}
     * @memberof BlogApiPostBlogsIdLocalizations
     */
    readonly id: number

    /**
     * 
     * @type {BlogLocalizationRequest}
     * @memberof BlogApiPostBlogsIdLocalizations
     */
    readonly blogLocalizationRequest: BlogLocalizationRequest
}

/**
 * Request parameters for putBlogsId operation in BlogApi.
 * @export
 * @interface BlogApiPutBlogsIdRequest
 */
export interface BlogApiPutBlogsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof BlogApiPutBlogsId
     */
    readonly id: number

    /**
     * 
     * @type {BlogRequest}
     * @memberof BlogApiPutBlogsId
     */
    readonly blogRequest: BlogRequest
}

/**
 * BlogApi - object-oriented interface
 * @export
 * @class BlogApi
 * @extends {BaseAPI}
 */
export class BlogApi extends BaseAPI {
    /**
     * 
     * @param {BlogApiDeleteBlogsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogApi
     */
    public deleteBlogsId(requestParameters: BlogApiDeleteBlogsIdRequest, options?: AxiosRequestConfig) {
        return BlogApiFp(this.configuration).deleteBlogsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BlogApiGetBlogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogApi
     */
    public getBlogs(requestParameters: BlogApiGetBlogsRequest = {}, options?: AxiosRequestConfig) {
        return BlogApiFp(this.configuration).getBlogs(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BlogApiGetBlogsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogApi
     */
    public getBlogsId(requestParameters: BlogApiGetBlogsIdRequest, options?: AxiosRequestConfig) {
        return BlogApiFp(this.configuration).getBlogsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BlogApiPostBlogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogApi
     */
    public postBlogs(requestParameters: BlogApiPostBlogsRequest, options?: AxiosRequestConfig) {
        return BlogApiFp(this.configuration).postBlogs(requestParameters.blogRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BlogApiPostBlogsIdLocalizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogApi
     */
    public postBlogsIdLocalizations(requestParameters: BlogApiPostBlogsIdLocalizationsRequest, options?: AxiosRequestConfig) {
        return BlogApiFp(this.configuration).postBlogsIdLocalizations(requestParameters.id, requestParameters.blogLocalizationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BlogApiPutBlogsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogApi
     */
    public putBlogsId(requestParameters: BlogApiPutBlogsIdRequest, options?: AxiosRequestConfig) {
        return BlogApiFp(this.configuration).putBlogsId(requestParameters.id, requestParameters.blogRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BlogTypeApi - axios parameter creator
 * @export
 */
export const BlogTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBlogTypesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteBlogTypesId', 'id', id)
            const localVarPath = `/blog-types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogTypes: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/blog-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogTypesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBlogTypesId', 'id', id)
            const localVarPath = `/blog-types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BlogTypeRequest} blogTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBlogTypes: async (blogTypeRequest: BlogTypeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'blogTypeRequest' is not null or undefined
            assertParamExists('postBlogTypes', 'blogTypeRequest', blogTypeRequest)
            const localVarPath = `/blog-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(blogTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {BlogTypeLocalizationRequest} blogTypeLocalizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBlogTypesIdLocalizations: async (id: number, blogTypeLocalizationRequest: BlogTypeLocalizationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postBlogTypesIdLocalizations', 'id', id)
            // verify required parameter 'blogTypeLocalizationRequest' is not null or undefined
            assertParamExists('postBlogTypesIdLocalizations', 'blogTypeLocalizationRequest', blogTypeLocalizationRequest)
            const localVarPath = `/blog-types/{id}/localizations`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(blogTypeLocalizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {BlogTypeRequest} blogTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBlogTypesId: async (id: number, blogTypeRequest: BlogTypeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putBlogTypesId', 'id', id)
            // verify required parameter 'blogTypeRequest' is not null or undefined
            assertParamExists('putBlogTypesId', 'blogTypeRequest', blogTypeRequest)
            const localVarPath = `/blog-types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(blogTypeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlogTypeApi - functional programming interface
 * @export
 */
export const BlogTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BlogTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBlogTypesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBlogTypesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlogTypes(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogTypeListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlogTypes(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlogTypesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlogTypesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {BlogTypeRequest} blogTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBlogTypes(blogTypeRequest: BlogTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBlogTypes(blogTypeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {BlogTypeLocalizationRequest} blogTypeLocalizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postBlogTypesIdLocalizations(id: number, blogTypeLocalizationRequest: BlogTypeLocalizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogTypeLocalizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postBlogTypesIdLocalizations(id, blogTypeLocalizationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {BlogTypeRequest} blogTypeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putBlogTypesId(id: number, blogTypeRequest: BlogTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlogTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putBlogTypesId(id, blogTypeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BlogTypeApi - factory interface
 * @export
 */
export const BlogTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BlogTypeApiFp(configuration)
    return {
        /**
         * 
         * @param {BlogTypeApiDeleteBlogTypesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBlogTypesId(requestParameters: BlogTypeApiDeleteBlogTypesIdRequest, options?: AxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteBlogTypesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BlogTypeApiGetBlogTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogTypes(requestParameters: BlogTypeApiGetBlogTypesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<BlogTypeListResponse> {
            return localVarFp.getBlogTypes(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BlogTypeApiGetBlogTypesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlogTypesId(requestParameters: BlogTypeApiGetBlogTypesIdRequest, options?: AxiosRequestConfig): AxiosPromise<BlogTypeResponse> {
            return localVarFp.getBlogTypesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BlogTypeApiPostBlogTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBlogTypes(requestParameters: BlogTypeApiPostBlogTypesRequest, options?: AxiosRequestConfig): AxiosPromise<BlogTypeResponse> {
            return localVarFp.postBlogTypes(requestParameters.blogTypeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BlogTypeApiPostBlogTypesIdLocalizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postBlogTypesIdLocalizations(requestParameters: BlogTypeApiPostBlogTypesIdLocalizationsRequest, options?: AxiosRequestConfig): AxiosPromise<BlogTypeLocalizationResponse> {
            return localVarFp.postBlogTypesIdLocalizations(requestParameters.id, requestParameters.blogTypeLocalizationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BlogTypeApiPutBlogTypesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putBlogTypesId(requestParameters: BlogTypeApiPutBlogTypesIdRequest, options?: AxiosRequestConfig): AxiosPromise<BlogTypeResponse> {
            return localVarFp.putBlogTypesId(requestParameters.id, requestParameters.blogTypeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteBlogTypesId operation in BlogTypeApi.
 * @export
 * @interface BlogTypeApiDeleteBlogTypesIdRequest
 */
export interface BlogTypeApiDeleteBlogTypesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof BlogTypeApiDeleteBlogTypesId
     */
    readonly id: number
}

/**
 * Request parameters for getBlogTypes operation in BlogTypeApi.
 * @export
 * @interface BlogTypeApiGetBlogTypesRequest
 */
export interface BlogTypeApiGetBlogTypesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof BlogTypeApiGetBlogTypes
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof BlogTypeApiGetBlogTypes
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof BlogTypeApiGetBlogTypes
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof BlogTypeApiGetBlogTypes
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof BlogTypeApiGetBlogTypes
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof BlogTypeApiGetBlogTypes
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof BlogTypeApiGetBlogTypes
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof BlogTypeApiGetBlogTypes
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof BlogTypeApiGetBlogTypes
     */
    readonly filters?: object

    /**
     * Locale to apply
     * @type {string}
     * @memberof BlogTypeApiGetBlogTypes
     */
    readonly locale?: string
}

/**
 * Request parameters for getBlogTypesId operation in BlogTypeApi.
 * @export
 * @interface BlogTypeApiGetBlogTypesIdRequest
 */
export interface BlogTypeApiGetBlogTypesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof BlogTypeApiGetBlogTypesId
     */
    readonly id: number
}

/**
 * Request parameters for postBlogTypes operation in BlogTypeApi.
 * @export
 * @interface BlogTypeApiPostBlogTypesRequest
 */
export interface BlogTypeApiPostBlogTypesRequest {
    /**
     * 
     * @type {BlogTypeRequest}
     * @memberof BlogTypeApiPostBlogTypes
     */
    readonly blogTypeRequest: BlogTypeRequest
}

/**
 * Request parameters for postBlogTypesIdLocalizations operation in BlogTypeApi.
 * @export
 * @interface BlogTypeApiPostBlogTypesIdLocalizationsRequest
 */
export interface BlogTypeApiPostBlogTypesIdLocalizationsRequest {
    /**
     * 
     * @type {number}
     * @memberof BlogTypeApiPostBlogTypesIdLocalizations
     */
    readonly id: number

    /**
     * 
     * @type {BlogTypeLocalizationRequest}
     * @memberof BlogTypeApiPostBlogTypesIdLocalizations
     */
    readonly blogTypeLocalizationRequest: BlogTypeLocalizationRequest
}

/**
 * Request parameters for putBlogTypesId operation in BlogTypeApi.
 * @export
 * @interface BlogTypeApiPutBlogTypesIdRequest
 */
export interface BlogTypeApiPutBlogTypesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof BlogTypeApiPutBlogTypesId
     */
    readonly id: number

    /**
     * 
     * @type {BlogTypeRequest}
     * @memberof BlogTypeApiPutBlogTypesId
     */
    readonly blogTypeRequest: BlogTypeRequest
}

/**
 * BlogTypeApi - object-oriented interface
 * @export
 * @class BlogTypeApi
 * @extends {BaseAPI}
 */
export class BlogTypeApi extends BaseAPI {
    /**
     * 
     * @param {BlogTypeApiDeleteBlogTypesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogTypeApi
     */
    public deleteBlogTypesId(requestParameters: BlogTypeApiDeleteBlogTypesIdRequest, options?: AxiosRequestConfig) {
        return BlogTypeApiFp(this.configuration).deleteBlogTypesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BlogTypeApiGetBlogTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogTypeApi
     */
    public getBlogTypes(requestParameters: BlogTypeApiGetBlogTypesRequest = {}, options?: AxiosRequestConfig) {
        return BlogTypeApiFp(this.configuration).getBlogTypes(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BlogTypeApiGetBlogTypesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogTypeApi
     */
    public getBlogTypesId(requestParameters: BlogTypeApiGetBlogTypesIdRequest, options?: AxiosRequestConfig) {
        return BlogTypeApiFp(this.configuration).getBlogTypesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BlogTypeApiPostBlogTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogTypeApi
     */
    public postBlogTypes(requestParameters: BlogTypeApiPostBlogTypesRequest, options?: AxiosRequestConfig) {
        return BlogTypeApiFp(this.configuration).postBlogTypes(requestParameters.blogTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BlogTypeApiPostBlogTypesIdLocalizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogTypeApi
     */
    public postBlogTypesIdLocalizations(requestParameters: BlogTypeApiPostBlogTypesIdLocalizationsRequest, options?: AxiosRequestConfig) {
        return BlogTypeApiFp(this.configuration).postBlogTypesIdLocalizations(requestParameters.id, requestParameters.blogTypeLocalizationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BlogTypeApiPutBlogTypesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlogTypeApi
     */
    public putBlogTypesId(requestParameters: BlogTypeApiPutBlogTypesIdRequest, options?: AxiosRequestConfig) {
        return BlogTypeApiFp(this.configuration).putBlogTypesId(requestParameters.id, requestParameters.blogTypeRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FaqApi - axios parameter creator
 * @export
 */
export const FaqApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFaqsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteFaqsId', 'id', id)
            const localVarPath = `/faqs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFaqs: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/faqs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFaqsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFaqsId', 'id', id)
            const localVarPath = `/faqs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FaqRequest} faqRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFaqs: async (faqRequest: FaqRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'faqRequest' is not null or undefined
            assertParamExists('postFaqs', 'faqRequest', faqRequest)
            const localVarPath = `/faqs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(faqRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {FaqRequest} faqRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFaqsId: async (id: number, faqRequest: FaqRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putFaqsId', 'id', id)
            // verify required parameter 'faqRequest' is not null or undefined
            assertParamExists('putFaqsId', 'faqRequest', faqRequest)
            const localVarPath = `/faqs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(faqRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FaqApi - functional programming interface
 * @export
 */
export const FaqApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FaqApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFaqsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFaqsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFaqs(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FaqListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFaqs(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFaqsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FaqResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFaqsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FaqRequest} faqRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFaqs(faqRequest: FaqRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FaqResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFaqs(faqRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {FaqRequest} faqRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putFaqsId(id: number, faqRequest: FaqRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FaqResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putFaqsId(id, faqRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FaqApi - factory interface
 * @export
 */
export const FaqApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FaqApiFp(configuration)
    return {
        /**
         * 
         * @param {FaqApiDeleteFaqsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFaqsId(requestParameters: FaqApiDeleteFaqsIdRequest, options?: AxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteFaqsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FaqApiGetFaqsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFaqs(requestParameters: FaqApiGetFaqsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<FaqListResponse> {
            return localVarFp.getFaqs(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FaqApiGetFaqsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFaqsId(requestParameters: FaqApiGetFaqsIdRequest, options?: AxiosRequestConfig): AxiosPromise<FaqResponse> {
            return localVarFp.getFaqsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FaqApiPostFaqsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFaqs(requestParameters: FaqApiPostFaqsRequest, options?: AxiosRequestConfig): AxiosPromise<FaqResponse> {
            return localVarFp.postFaqs(requestParameters.faqRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FaqApiPutFaqsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putFaqsId(requestParameters: FaqApiPutFaqsIdRequest, options?: AxiosRequestConfig): AxiosPromise<FaqResponse> {
            return localVarFp.putFaqsId(requestParameters.id, requestParameters.faqRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteFaqsId operation in FaqApi.
 * @export
 * @interface FaqApiDeleteFaqsIdRequest
 */
export interface FaqApiDeleteFaqsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof FaqApiDeleteFaqsId
     */
    readonly id: number
}

/**
 * Request parameters for getFaqs operation in FaqApi.
 * @export
 * @interface FaqApiGetFaqsRequest
 */
export interface FaqApiGetFaqsRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof FaqApiGetFaqs
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof FaqApiGetFaqs
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof FaqApiGetFaqs
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof FaqApiGetFaqs
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof FaqApiGetFaqs
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof FaqApiGetFaqs
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof FaqApiGetFaqs
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof FaqApiGetFaqs
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof FaqApiGetFaqs
     */
    readonly filters?: object

    /**
     * Locale to apply
     * @type {string}
     * @memberof FaqApiGetFaqs
     */
    readonly locale?: string
}

/**
 * Request parameters for getFaqsId operation in FaqApi.
 * @export
 * @interface FaqApiGetFaqsIdRequest
 */
export interface FaqApiGetFaqsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof FaqApiGetFaqsId
     */
    readonly id: number
}

/**
 * Request parameters for postFaqs operation in FaqApi.
 * @export
 * @interface FaqApiPostFaqsRequest
 */
export interface FaqApiPostFaqsRequest {
    /**
     * 
     * @type {FaqRequest}
     * @memberof FaqApiPostFaqs
     */
    readonly faqRequest: FaqRequest
}

/**
 * Request parameters for putFaqsId operation in FaqApi.
 * @export
 * @interface FaqApiPutFaqsIdRequest
 */
export interface FaqApiPutFaqsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof FaqApiPutFaqsId
     */
    readonly id: number

    /**
     * 
     * @type {FaqRequest}
     * @memberof FaqApiPutFaqsId
     */
    readonly faqRequest: FaqRequest
}

/**
 * FaqApi - object-oriented interface
 * @export
 * @class FaqApi
 * @extends {BaseAPI}
 */
export class FaqApi extends BaseAPI {
    /**
     * 
     * @param {FaqApiDeleteFaqsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqApi
     */
    public deleteFaqsId(requestParameters: FaqApiDeleteFaqsIdRequest, options?: AxiosRequestConfig) {
        return FaqApiFp(this.configuration).deleteFaqsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FaqApiGetFaqsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqApi
     */
    public getFaqs(requestParameters: FaqApiGetFaqsRequest = {}, options?: AxiosRequestConfig) {
        return FaqApiFp(this.configuration).getFaqs(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FaqApiGetFaqsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqApi
     */
    public getFaqsId(requestParameters: FaqApiGetFaqsIdRequest, options?: AxiosRequestConfig) {
        return FaqApiFp(this.configuration).getFaqsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FaqApiPostFaqsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqApi
     */
    public postFaqs(requestParameters: FaqApiPostFaqsRequest, options?: AxiosRequestConfig) {
        return FaqApiFp(this.configuration).postFaqs(requestParameters.faqRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FaqApiPutFaqsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaqApi
     */
    public putFaqsId(requestParameters: FaqApiPutFaqsIdRequest, options?: AxiosRequestConfig) {
        return FaqApiFp(this.configuration).putFaqsId(requestParameters.id, requestParameters.faqRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GlobalApi - axios parameter creator
 * @export
 */
export const GlobalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGlobal: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/global`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGlobal: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/global`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GlobalLocalizationRequest} globalLocalizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGlobalLocalizations: async (globalLocalizationRequest: GlobalLocalizationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'globalLocalizationRequest' is not null or undefined
            assertParamExists('postGlobalLocalizations', 'globalLocalizationRequest', globalLocalizationRequest)
            const localVarPath = `/global/localizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(globalLocalizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GlobalRequest} globalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putGlobal: async (globalRequest: GlobalRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'globalRequest' is not null or undefined
            assertParamExists('putGlobal', 'globalRequest', globalRequest)
            const localVarPath = `/global`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(globalRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GlobalApi - functional programming interface
 * @export
 */
export const GlobalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GlobalApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGlobal(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGlobal(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGlobal(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGlobal(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GlobalLocalizationRequest} globalLocalizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGlobalLocalizations(globalLocalizationRequest: GlobalLocalizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalLocalizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGlobalLocalizations(globalLocalizationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GlobalRequest} globalRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putGlobal(globalRequest: GlobalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GlobalResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putGlobal(globalRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GlobalApi - factory interface
 * @export
 */
export const GlobalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GlobalApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGlobal(options?: AxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteGlobal(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GlobalApiGetGlobalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGlobal(requestParameters: GlobalApiGetGlobalRequest = {}, options?: AxiosRequestConfig): AxiosPromise<GlobalResponse> {
            return localVarFp.getGlobal(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GlobalApiPostGlobalLocalizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGlobalLocalizations(requestParameters: GlobalApiPostGlobalLocalizationsRequest, options?: AxiosRequestConfig): AxiosPromise<GlobalLocalizationResponse> {
            return localVarFp.postGlobalLocalizations(requestParameters.globalLocalizationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GlobalApiPutGlobalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putGlobal(requestParameters: GlobalApiPutGlobalRequest, options?: AxiosRequestConfig): AxiosPromise<GlobalResponse> {
            return localVarFp.putGlobal(requestParameters.globalRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getGlobal operation in GlobalApi.
 * @export
 * @interface GlobalApiGetGlobalRequest
 */
export interface GlobalApiGetGlobalRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof GlobalApiGetGlobal
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof GlobalApiGetGlobal
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof GlobalApiGetGlobal
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof GlobalApiGetGlobal
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof GlobalApiGetGlobal
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof GlobalApiGetGlobal
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof GlobalApiGetGlobal
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof GlobalApiGetGlobal
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof GlobalApiGetGlobal
     */
    readonly filters?: object

    /**
     * Locale to apply
     * @type {string}
     * @memberof GlobalApiGetGlobal
     */
    readonly locale?: string
}

/**
 * Request parameters for postGlobalLocalizations operation in GlobalApi.
 * @export
 * @interface GlobalApiPostGlobalLocalizationsRequest
 */
export interface GlobalApiPostGlobalLocalizationsRequest {
    /**
     * 
     * @type {GlobalLocalizationRequest}
     * @memberof GlobalApiPostGlobalLocalizations
     */
    readonly globalLocalizationRequest: GlobalLocalizationRequest
}

/**
 * Request parameters for putGlobal operation in GlobalApi.
 * @export
 * @interface GlobalApiPutGlobalRequest
 */
export interface GlobalApiPutGlobalRequest {
    /**
     * 
     * @type {GlobalRequest}
     * @memberof GlobalApiPutGlobal
     */
    readonly globalRequest: GlobalRequest
}

/**
 * GlobalApi - object-oriented interface
 * @export
 * @class GlobalApi
 * @extends {BaseAPI}
 */
export class GlobalApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalApi
     */
    public deleteGlobal(options?: AxiosRequestConfig) {
        return GlobalApiFp(this.configuration).deleteGlobal(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GlobalApiGetGlobalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalApi
     */
    public getGlobal(requestParameters: GlobalApiGetGlobalRequest = {}, options?: AxiosRequestConfig) {
        return GlobalApiFp(this.configuration).getGlobal(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GlobalApiPostGlobalLocalizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalApi
     */
    public postGlobalLocalizations(requestParameters: GlobalApiPostGlobalLocalizationsRequest, options?: AxiosRequestConfig) {
        return GlobalApiFp(this.configuration).postGlobalLocalizations(requestParameters.globalLocalizationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GlobalApiPutGlobalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalApi
     */
    public putGlobal(requestParameters: GlobalApiPutGlobalRequest, options?: AxiosRequestConfig) {
        return GlobalApiFp(this.configuration).putGlobal(requestParameters.globalRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HomePageApi - axios parameter creator
 * @export
 */
export const HomePageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHomePage: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/home-page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomePage: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/home-page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {HomePageLocalizationRequest} homePageLocalizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postHomePageLocalizations: async (homePageLocalizationRequest: HomePageLocalizationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'homePageLocalizationRequest' is not null or undefined
            assertParamExists('postHomePageLocalizations', 'homePageLocalizationRequest', homePageLocalizationRequest)
            const localVarPath = `/home-page/localizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(homePageLocalizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {HomePageRequest} homePageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putHomePage: async (homePageRequest: HomePageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'homePageRequest' is not null or undefined
            assertParamExists('putHomePage', 'homePageRequest', homePageRequest)
            const localVarPath = `/home-page`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(homePageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HomePageApi - functional programming interface
 * @export
 */
export const HomePageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HomePageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHomePage(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHomePage(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHomePage(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HomePageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHomePage(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {HomePageLocalizationRequest} homePageLocalizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postHomePageLocalizations(homePageLocalizationRequest: HomePageLocalizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HomePageLocalizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postHomePageLocalizations(homePageLocalizationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {HomePageRequest} homePageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putHomePage(homePageRequest: HomePageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HomePageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putHomePage(homePageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HomePageApi - factory interface
 * @export
 */
export const HomePageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HomePageApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHomePage(options?: AxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteHomePage(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HomePageApiGetHomePageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomePage(requestParameters: HomePageApiGetHomePageRequest = {}, options?: AxiosRequestConfig): AxiosPromise<HomePageResponse> {
            return localVarFp.getHomePage(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HomePageApiPostHomePageLocalizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postHomePageLocalizations(requestParameters: HomePageApiPostHomePageLocalizationsRequest, options?: AxiosRequestConfig): AxiosPromise<HomePageLocalizationResponse> {
            return localVarFp.postHomePageLocalizations(requestParameters.homePageLocalizationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HomePageApiPutHomePageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putHomePage(requestParameters: HomePageApiPutHomePageRequest, options?: AxiosRequestConfig): AxiosPromise<HomePageResponse> {
            return localVarFp.putHomePage(requestParameters.homePageRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getHomePage operation in HomePageApi.
 * @export
 * @interface HomePageApiGetHomePageRequest
 */
export interface HomePageApiGetHomePageRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof HomePageApiGetHomePage
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof HomePageApiGetHomePage
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof HomePageApiGetHomePage
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof HomePageApiGetHomePage
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof HomePageApiGetHomePage
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof HomePageApiGetHomePage
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof HomePageApiGetHomePage
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof HomePageApiGetHomePage
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof HomePageApiGetHomePage
     */
    readonly filters?: object

    /**
     * Locale to apply
     * @type {string}
     * @memberof HomePageApiGetHomePage
     */
    readonly locale?: string
}

/**
 * Request parameters for postHomePageLocalizations operation in HomePageApi.
 * @export
 * @interface HomePageApiPostHomePageLocalizationsRequest
 */
export interface HomePageApiPostHomePageLocalizationsRequest {
    /**
     * 
     * @type {HomePageLocalizationRequest}
     * @memberof HomePageApiPostHomePageLocalizations
     */
    readonly homePageLocalizationRequest: HomePageLocalizationRequest
}

/**
 * Request parameters for putHomePage operation in HomePageApi.
 * @export
 * @interface HomePageApiPutHomePageRequest
 */
export interface HomePageApiPutHomePageRequest {
    /**
     * 
     * @type {HomePageRequest}
     * @memberof HomePageApiPutHomePage
     */
    readonly homePageRequest: HomePageRequest
}

/**
 * HomePageApi - object-oriented interface
 * @export
 * @class HomePageApi
 * @extends {BaseAPI}
 */
export class HomePageApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomePageApi
     */
    public deleteHomePage(options?: AxiosRequestConfig) {
        return HomePageApiFp(this.configuration).deleteHomePage(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HomePageApiGetHomePageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomePageApi
     */
    public getHomePage(requestParameters: HomePageApiGetHomePageRequest = {}, options?: AxiosRequestConfig) {
        return HomePageApiFp(this.configuration).getHomePage(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HomePageApiPostHomePageLocalizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomePageApi
     */
    public postHomePageLocalizations(requestParameters: HomePageApiPostHomePageLocalizationsRequest, options?: AxiosRequestConfig) {
        return HomePageApiFp(this.configuration).postHomePageLocalizations(requestParameters.homePageLocalizationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HomePageApiPutHomePageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HomePageApi
     */
    public putHomePage(requestParameters: HomePageApiPutHomePageRequest, options?: AxiosRequestConfig) {
        return HomePageApiFp(this.configuration).putHomePage(requestParameters.homePageRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PartnerApi - axios parameter creator
 * @export
 */
export const PartnerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePartnersId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deletePartnersId', 'id', id)
            const localVarPath = `/partners/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartners: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/partners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartnersId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPartnersId', 'id', id)
            const localVarPath = `/partners/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PartnerRequest} partnerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPartners: async (partnerRequest: PartnerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partnerRequest' is not null or undefined
            assertParamExists('postPartners', 'partnerRequest', partnerRequest)
            const localVarPath = `/partners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(partnerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {PartnerRequest} partnerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPartnersId: async (id: number, partnerRequest: PartnerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putPartnersId', 'id', id)
            // verify required parameter 'partnerRequest' is not null or undefined
            assertParamExists('putPartnersId', 'partnerRequest', partnerRequest)
            const localVarPath = `/partners/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(partnerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PartnerApi - functional programming interface
 * @export
 */
export const PartnerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PartnerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePartnersId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePartnersId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPartners(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPartners(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPartnersId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPartnersId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {PartnerRequest} partnerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPartners(partnerRequest: PartnerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPartners(partnerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {PartnerRequest} partnerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putPartnersId(id: number, partnerRequest: PartnerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putPartnersId(id, partnerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PartnerApi - factory interface
 * @export
 */
export const PartnerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PartnerApiFp(configuration)
    return {
        /**
         * 
         * @param {PartnerApiDeletePartnersIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePartnersId(requestParameters: PartnerApiDeletePartnersIdRequest, options?: AxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deletePartnersId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PartnerApiGetPartnersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartners(requestParameters: PartnerApiGetPartnersRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PartnerListResponse> {
            return localVarFp.getPartners(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PartnerApiGetPartnersIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartnersId(requestParameters: PartnerApiGetPartnersIdRequest, options?: AxiosRequestConfig): AxiosPromise<PartnerResponse> {
            return localVarFp.getPartnersId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PartnerApiPostPartnersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPartners(requestParameters: PartnerApiPostPartnersRequest, options?: AxiosRequestConfig): AxiosPromise<PartnerResponse> {
            return localVarFp.postPartners(requestParameters.partnerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PartnerApiPutPartnersIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putPartnersId(requestParameters: PartnerApiPutPartnersIdRequest, options?: AxiosRequestConfig): AxiosPromise<PartnerResponse> {
            return localVarFp.putPartnersId(requestParameters.id, requestParameters.partnerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deletePartnersId operation in PartnerApi.
 * @export
 * @interface PartnerApiDeletePartnersIdRequest
 */
export interface PartnerApiDeletePartnersIdRequest {
    /**
     * 
     * @type {number}
     * @memberof PartnerApiDeletePartnersId
     */
    readonly id: number
}

/**
 * Request parameters for getPartners operation in PartnerApi.
 * @export
 * @interface PartnerApiGetPartnersRequest
 */
export interface PartnerApiGetPartnersRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof PartnerApiGetPartners
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof PartnerApiGetPartners
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof PartnerApiGetPartners
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof PartnerApiGetPartners
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof PartnerApiGetPartners
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof PartnerApiGetPartners
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof PartnerApiGetPartners
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof PartnerApiGetPartners
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof PartnerApiGetPartners
     */
    readonly filters?: object

    /**
     * Locale to apply
     * @type {string}
     * @memberof PartnerApiGetPartners
     */
    readonly locale?: string
}

/**
 * Request parameters for getPartnersId operation in PartnerApi.
 * @export
 * @interface PartnerApiGetPartnersIdRequest
 */
export interface PartnerApiGetPartnersIdRequest {
    /**
     * 
     * @type {number}
     * @memberof PartnerApiGetPartnersId
     */
    readonly id: number
}

/**
 * Request parameters for postPartners operation in PartnerApi.
 * @export
 * @interface PartnerApiPostPartnersRequest
 */
export interface PartnerApiPostPartnersRequest {
    /**
     * 
     * @type {PartnerRequest}
     * @memberof PartnerApiPostPartners
     */
    readonly partnerRequest: PartnerRequest
}

/**
 * Request parameters for putPartnersId operation in PartnerApi.
 * @export
 * @interface PartnerApiPutPartnersIdRequest
 */
export interface PartnerApiPutPartnersIdRequest {
    /**
     * 
     * @type {number}
     * @memberof PartnerApiPutPartnersId
     */
    readonly id: number

    /**
     * 
     * @type {PartnerRequest}
     * @memberof PartnerApiPutPartnersId
     */
    readonly partnerRequest: PartnerRequest
}

/**
 * PartnerApi - object-oriented interface
 * @export
 * @class PartnerApi
 * @extends {BaseAPI}
 */
export class PartnerApi extends BaseAPI {
    /**
     * 
     * @param {PartnerApiDeletePartnersIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerApi
     */
    public deletePartnersId(requestParameters: PartnerApiDeletePartnersIdRequest, options?: AxiosRequestConfig) {
        return PartnerApiFp(this.configuration).deletePartnersId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PartnerApiGetPartnersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerApi
     */
    public getPartners(requestParameters: PartnerApiGetPartnersRequest = {}, options?: AxiosRequestConfig) {
        return PartnerApiFp(this.configuration).getPartners(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PartnerApiGetPartnersIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerApi
     */
    public getPartnersId(requestParameters: PartnerApiGetPartnersIdRequest, options?: AxiosRequestConfig) {
        return PartnerApiFp(this.configuration).getPartnersId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PartnerApiPostPartnersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerApi
     */
    public postPartners(requestParameters: PartnerApiPostPartnersRequest, options?: AxiosRequestConfig) {
        return PartnerApiFp(this.configuration).postPartners(requestParameters.partnerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PartnerApiPutPartnersIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnerApi
     */
    public putPartnersId(requestParameters: PartnerApiPutPartnersIdRequest, options?: AxiosRequestConfig) {
        return PartnerApiFp(this.configuration).putPartnersId(requestParameters.id, requestParameters.partnerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProductCategoryApi - axios parameter creator
 * @export
 */
export const ProductCategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductCategoriesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteProductCategoriesId', 'id', id)
            const localVarPath = `/product-categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCategories: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/product-categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCategoriesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProductCategoriesId', 'id', id)
            const localVarPath = `/product-categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ProductCategoryRequest} productCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProductCategories: async (productCategoryRequest: ProductCategoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productCategoryRequest' is not null or undefined
            assertParamExists('postProductCategories', 'productCategoryRequest', productCategoryRequest)
            const localVarPath = `/product-categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productCategoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductCategoryRequest} productCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProductCategoriesId: async (id: number, productCategoryRequest: ProductCategoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putProductCategoriesId', 'id', id)
            // verify required parameter 'productCategoryRequest' is not null or undefined
            assertParamExists('putProductCategoriesId', 'productCategoryRequest', productCategoryRequest)
            const localVarPath = `/product-categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productCategoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductCategoryApi - functional programming interface
 * @export
 */
export const ProductCategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductCategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductCategoriesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProductCategoriesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductCategories(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCategoryListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductCategories(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProductCategoriesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProductCategoriesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ProductCategoryRequest} productCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProductCategories(productCategoryRequest: ProductCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProductCategories(productCategoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ProductCategoryRequest} productCategoryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putProductCategoriesId(id: number, productCategoryRequest: ProductCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putProductCategoriesId(id, productCategoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductCategoryApi - factory interface
 * @export
 */
export const ProductCategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductCategoryApiFp(configuration)
    return {
        /**
         * 
         * @param {ProductCategoryApiDeleteProductCategoriesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductCategoriesId(requestParameters: ProductCategoryApiDeleteProductCategoriesIdRequest, options?: AxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteProductCategoriesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductCategoryApiGetProductCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCategories(requestParameters: ProductCategoryApiGetProductCategoriesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ProductCategoryListResponse> {
            return localVarFp.getProductCategories(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductCategoryApiGetProductCategoriesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductCategoriesId(requestParameters: ProductCategoryApiGetProductCategoriesIdRequest, options?: AxiosRequestConfig): AxiosPromise<ProductCategoryResponse> {
            return localVarFp.getProductCategoriesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductCategoryApiPostProductCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProductCategories(requestParameters: ProductCategoryApiPostProductCategoriesRequest, options?: AxiosRequestConfig): AxiosPromise<ProductCategoryResponse> {
            return localVarFp.postProductCategories(requestParameters.productCategoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ProductCategoryApiPutProductCategoriesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putProductCategoriesId(requestParameters: ProductCategoryApiPutProductCategoriesIdRequest, options?: AxiosRequestConfig): AxiosPromise<ProductCategoryResponse> {
            return localVarFp.putProductCategoriesId(requestParameters.id, requestParameters.productCategoryRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteProductCategoriesId operation in ProductCategoryApi.
 * @export
 * @interface ProductCategoryApiDeleteProductCategoriesIdRequest
 */
export interface ProductCategoryApiDeleteProductCategoriesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductCategoryApiDeleteProductCategoriesId
     */
    readonly id: number
}

/**
 * Request parameters for getProductCategories operation in ProductCategoryApi.
 * @export
 * @interface ProductCategoryApiGetProductCategoriesRequest
 */
export interface ProductCategoryApiGetProductCategoriesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof ProductCategoryApiGetProductCategories
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof ProductCategoryApiGetProductCategories
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof ProductCategoryApiGetProductCategories
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof ProductCategoryApiGetProductCategories
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof ProductCategoryApiGetProductCategories
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof ProductCategoryApiGetProductCategories
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof ProductCategoryApiGetProductCategories
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof ProductCategoryApiGetProductCategories
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof ProductCategoryApiGetProductCategories
     */
    readonly filters?: object

    /**
     * Locale to apply
     * @type {string}
     * @memberof ProductCategoryApiGetProductCategories
     */
    readonly locale?: string
}

/**
 * Request parameters for getProductCategoriesId operation in ProductCategoryApi.
 * @export
 * @interface ProductCategoryApiGetProductCategoriesIdRequest
 */
export interface ProductCategoryApiGetProductCategoriesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductCategoryApiGetProductCategoriesId
     */
    readonly id: number
}

/**
 * Request parameters for postProductCategories operation in ProductCategoryApi.
 * @export
 * @interface ProductCategoryApiPostProductCategoriesRequest
 */
export interface ProductCategoryApiPostProductCategoriesRequest {
    /**
     * 
     * @type {ProductCategoryRequest}
     * @memberof ProductCategoryApiPostProductCategories
     */
    readonly productCategoryRequest: ProductCategoryRequest
}

/**
 * Request parameters for putProductCategoriesId operation in ProductCategoryApi.
 * @export
 * @interface ProductCategoryApiPutProductCategoriesIdRequest
 */
export interface ProductCategoryApiPutProductCategoriesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ProductCategoryApiPutProductCategoriesId
     */
    readonly id: number

    /**
     * 
     * @type {ProductCategoryRequest}
     * @memberof ProductCategoryApiPutProductCategoriesId
     */
    readonly productCategoryRequest: ProductCategoryRequest
}

/**
 * ProductCategoryApi - object-oriented interface
 * @export
 * @class ProductCategoryApi
 * @extends {BaseAPI}
 */
export class ProductCategoryApi extends BaseAPI {
    /**
     * 
     * @param {ProductCategoryApiDeleteProductCategoriesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApi
     */
    public deleteProductCategoriesId(requestParameters: ProductCategoryApiDeleteProductCategoriesIdRequest, options?: AxiosRequestConfig) {
        return ProductCategoryApiFp(this.configuration).deleteProductCategoriesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductCategoryApiGetProductCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApi
     */
    public getProductCategories(requestParameters: ProductCategoryApiGetProductCategoriesRequest = {}, options?: AxiosRequestConfig) {
        return ProductCategoryApiFp(this.configuration).getProductCategories(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductCategoryApiGetProductCategoriesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApi
     */
    public getProductCategoriesId(requestParameters: ProductCategoryApiGetProductCategoriesIdRequest, options?: AxiosRequestConfig) {
        return ProductCategoryApiFp(this.configuration).getProductCategoriesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductCategoryApiPostProductCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApi
     */
    public postProductCategories(requestParameters: ProductCategoryApiPostProductCategoriesRequest, options?: AxiosRequestConfig) {
        return ProductCategoryApiFp(this.configuration).postProductCategories(requestParameters.productCategoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ProductCategoryApiPutProductCategoriesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductCategoryApi
     */
    public putProductCategoriesId(requestParameters: ProductCategoryApiPutProductCategoriesIdRequest, options?: AxiosRequestConfig) {
        return ProductCategoryApiFp(this.configuration).putProductCategoriesId(requestParameters.id, requestParameters.productCategoryRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TagApi - axios parameter creator
 * @export
 */
export const TagApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTagsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTagsId', 'id', id)
            const localVarPath = `/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTags: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTagsId', 'id', id)
            const localVarPath = `/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TagRequest} tagRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTags: async (tagRequest: TagRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagRequest' is not null or undefined
            assertParamExists('postTags', 'tagRequest', tagRequest)
            const localVarPath = `/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tagRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TagRequest} tagRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTagsId: async (id: number, tagRequest: TagRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putTagsId', 'id', id)
            // verify required parameter 'tagRequest' is not null or undefined
            assertParamExists('putTagsId', 'tagRequest', tagRequest)
            const localVarPath = `/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tagRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagApi - functional programming interface
 * @export
 */
export const TagApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TagApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTagsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTagsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTags(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTags(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTagsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTagsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TagRequest} tagRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTags(tagRequest: TagRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTags(tagRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TagRequest} tagRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTagsId(id: number, tagRequest: TagRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTagsId(id, tagRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TagApi - factory interface
 * @export
 */
export const TagApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TagApiFp(configuration)
    return {
        /**
         * 
         * @param {TagApiDeleteTagsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTagsId(requestParameters: TagApiDeleteTagsIdRequest, options?: AxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteTagsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TagApiGetTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTags(requestParameters: TagApiGetTagsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TagListResponse> {
            return localVarFp.getTags(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TagApiGetTagsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTagsId(requestParameters: TagApiGetTagsIdRequest, options?: AxiosRequestConfig): AxiosPromise<TagResponse> {
            return localVarFp.getTagsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TagApiPostTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTags(requestParameters: TagApiPostTagsRequest, options?: AxiosRequestConfig): AxiosPromise<TagResponse> {
            return localVarFp.postTags(requestParameters.tagRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TagApiPutTagsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTagsId(requestParameters: TagApiPutTagsIdRequest, options?: AxiosRequestConfig): AxiosPromise<TagResponse> {
            return localVarFp.putTagsId(requestParameters.id, requestParameters.tagRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteTagsId operation in TagApi.
 * @export
 * @interface TagApiDeleteTagsIdRequest
 */
export interface TagApiDeleteTagsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TagApiDeleteTagsId
     */
    readonly id: number
}

/**
 * Request parameters for getTags operation in TagApi.
 * @export
 * @interface TagApiGetTagsRequest
 */
export interface TagApiGetTagsRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof TagApiGetTags
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof TagApiGetTags
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof TagApiGetTags
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof TagApiGetTags
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof TagApiGetTags
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof TagApiGetTags
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof TagApiGetTags
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof TagApiGetTags
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof TagApiGetTags
     */
    readonly filters?: object

    /**
     * Locale to apply
     * @type {string}
     * @memberof TagApiGetTags
     */
    readonly locale?: string
}

/**
 * Request parameters for getTagsId operation in TagApi.
 * @export
 * @interface TagApiGetTagsIdRequest
 */
export interface TagApiGetTagsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TagApiGetTagsId
     */
    readonly id: number
}

/**
 * Request parameters for postTags operation in TagApi.
 * @export
 * @interface TagApiPostTagsRequest
 */
export interface TagApiPostTagsRequest {
    /**
     * 
     * @type {TagRequest}
     * @memberof TagApiPostTags
     */
    readonly tagRequest: TagRequest
}

/**
 * Request parameters for putTagsId operation in TagApi.
 * @export
 * @interface TagApiPutTagsIdRequest
 */
export interface TagApiPutTagsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TagApiPutTagsId
     */
    readonly id: number

    /**
     * 
     * @type {TagRequest}
     * @memberof TagApiPutTagsId
     */
    readonly tagRequest: TagRequest
}

/**
 * TagApi - object-oriented interface
 * @export
 * @class TagApi
 * @extends {BaseAPI}
 */
export class TagApi extends BaseAPI {
    /**
     * 
     * @param {TagApiDeleteTagsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public deleteTagsId(requestParameters: TagApiDeleteTagsIdRequest, options?: AxiosRequestConfig) {
        return TagApiFp(this.configuration).deleteTagsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TagApiGetTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public getTags(requestParameters: TagApiGetTagsRequest = {}, options?: AxiosRequestConfig) {
        return TagApiFp(this.configuration).getTags(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TagApiGetTagsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public getTagsId(requestParameters: TagApiGetTagsIdRequest, options?: AxiosRequestConfig) {
        return TagApiFp(this.configuration).getTagsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TagApiPostTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public postTags(requestParameters: TagApiPostTagsRequest, options?: AxiosRequestConfig) {
        return TagApiFp(this.configuration).postTags(requestParameters.tagRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TagApiPutTagsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public putTagsId(requestParameters: TagApiPutTagsIdRequest, options?: AxiosRequestConfig) {
        return TagApiFp(this.configuration).putTagsId(requestParameters.id, requestParameters.tagRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TeamApi - axios parameter creator
 * @export
 */
export const TeamApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeamsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTeamsId', 'id', id)
            const localVarPath = `/teams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeams: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTeamsId', 'id', id)
            const localVarPath = `/teams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TeamRequest} teamRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeams: async (teamRequest: TeamRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teamRequest' is not null or undefined
            assertParamExists('postTeams', 'teamRequest', teamRequest)
            const localVarPath = `/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teamRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TeamRequest} teamRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTeamsId: async (id: number, teamRequest: TeamRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putTeamsId', 'id', id)
            // verify required parameter 'teamRequest' is not null or undefined
            assertParamExists('putTeamsId', 'teamRequest', teamRequest)
            const localVarPath = `/teams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teamRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamApi - functional programming interface
 * @export
 */
export const TeamApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTeamsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTeamsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeams(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeams(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeamsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TeamRequest} teamRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTeams(teamRequest: TeamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTeams(teamRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TeamRequest} teamRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTeamsId(id: number, teamRequest: TeamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTeamsId(id, teamRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeamApi - factory interface
 * @export
 */
export const TeamApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamApiFp(configuration)
    return {
        /**
         * 
         * @param {TeamApiDeleteTeamsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeamsId(requestParameters: TeamApiDeleteTeamsIdRequest, options?: AxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteTeamsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TeamApiGetTeamsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeams(requestParameters: TeamApiGetTeamsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TeamListResponse> {
            return localVarFp.getTeams(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TeamApiGetTeamsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamsId(requestParameters: TeamApiGetTeamsIdRequest, options?: AxiosRequestConfig): AxiosPromise<TeamResponse> {
            return localVarFp.getTeamsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TeamApiPostTeamsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeams(requestParameters: TeamApiPostTeamsRequest, options?: AxiosRequestConfig): AxiosPromise<TeamResponse> {
            return localVarFp.postTeams(requestParameters.teamRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TeamApiPutTeamsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTeamsId(requestParameters: TeamApiPutTeamsIdRequest, options?: AxiosRequestConfig): AxiosPromise<TeamResponse> {
            return localVarFp.putTeamsId(requestParameters.id, requestParameters.teamRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteTeamsId operation in TeamApi.
 * @export
 * @interface TeamApiDeleteTeamsIdRequest
 */
export interface TeamApiDeleteTeamsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TeamApiDeleteTeamsId
     */
    readonly id: number
}

/**
 * Request parameters for getTeams operation in TeamApi.
 * @export
 * @interface TeamApiGetTeamsRequest
 */
export interface TeamApiGetTeamsRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof TeamApiGetTeams
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof TeamApiGetTeams
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof TeamApiGetTeams
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof TeamApiGetTeams
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof TeamApiGetTeams
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof TeamApiGetTeams
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof TeamApiGetTeams
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof TeamApiGetTeams
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof TeamApiGetTeams
     */
    readonly filters?: object

    /**
     * Locale to apply
     * @type {string}
     * @memberof TeamApiGetTeams
     */
    readonly locale?: string
}

/**
 * Request parameters for getTeamsId operation in TeamApi.
 * @export
 * @interface TeamApiGetTeamsIdRequest
 */
export interface TeamApiGetTeamsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TeamApiGetTeamsId
     */
    readonly id: number
}

/**
 * Request parameters for postTeams operation in TeamApi.
 * @export
 * @interface TeamApiPostTeamsRequest
 */
export interface TeamApiPostTeamsRequest {
    /**
     * 
     * @type {TeamRequest}
     * @memberof TeamApiPostTeams
     */
    readonly teamRequest: TeamRequest
}

/**
 * Request parameters for putTeamsId operation in TeamApi.
 * @export
 * @interface TeamApiPutTeamsIdRequest
 */
export interface TeamApiPutTeamsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TeamApiPutTeamsId
     */
    readonly id: number

    /**
     * 
     * @type {TeamRequest}
     * @memberof TeamApiPutTeamsId
     */
    readonly teamRequest: TeamRequest
}

/**
 * TeamApi - object-oriented interface
 * @export
 * @class TeamApi
 * @extends {BaseAPI}
 */
export class TeamApi extends BaseAPI {
    /**
     * 
     * @param {TeamApiDeleteTeamsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public deleteTeamsId(requestParameters: TeamApiDeleteTeamsIdRequest, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).deleteTeamsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TeamApiGetTeamsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public getTeams(requestParameters: TeamApiGetTeamsRequest = {}, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).getTeams(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TeamApiGetTeamsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public getTeamsId(requestParameters: TeamApiGetTeamsIdRequest, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).getTeamsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TeamApiPostTeamsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public postTeams(requestParameters: TeamApiPostTeamsRequest, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).postTeams(requestParameters.teamRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TeamApiPutTeamsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public putTeamsId(requestParameters: TeamApiPutTeamsIdRequest, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).putTeamsId(requestParameters.id, requestParameters.teamRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TestimonialApi - axios parameter creator
 * @export
 */
export const TestimonialApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTestimonialsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTestimonialsId', 'id', id)
            const localVarPath = `/testimonials/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestimonials: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/testimonials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestimonialsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTestimonialsId', 'id', id)
            const localVarPath = `/testimonials/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TestimonialRequest} testimonialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTestimonials: async (testimonialRequest: TestimonialRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testimonialRequest' is not null or undefined
            assertParamExists('postTestimonials', 'testimonialRequest', testimonialRequest)
            const localVarPath = `/testimonials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testimonialRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TestimonialLocalizationRequest} testimonialLocalizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTestimonialsIdLocalizations: async (id: number, testimonialLocalizationRequest: TestimonialLocalizationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('postTestimonialsIdLocalizations', 'id', id)
            // verify required parameter 'testimonialLocalizationRequest' is not null or undefined
            assertParamExists('postTestimonialsIdLocalizations', 'testimonialLocalizationRequest', testimonialLocalizationRequest)
            const localVarPath = `/testimonials/{id}/localizations`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testimonialLocalizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TestimonialRequest} testimonialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTestimonialsId: async (id: number, testimonialRequest: TestimonialRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putTestimonialsId', 'id', id)
            // verify required parameter 'testimonialRequest' is not null or undefined
            assertParamExists('putTestimonialsId', 'testimonialRequest', testimonialRequest)
            const localVarPath = `/testimonials/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testimonialRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestimonialApi - functional programming interface
 * @export
 */
export const TestimonialApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestimonialApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTestimonialsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTestimonialsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestimonials(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestimonialListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTestimonials(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestimonialsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestimonialResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTestimonialsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {TestimonialRequest} testimonialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTestimonials(testimonialRequest: TestimonialRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestimonialResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTestimonials(testimonialRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TestimonialLocalizationRequest} testimonialLocalizationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTestimonialsIdLocalizations(id: number, testimonialLocalizationRequest: TestimonialLocalizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestimonialLocalizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTestimonialsIdLocalizations(id, testimonialLocalizationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {TestimonialRequest} testimonialRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTestimonialsId(id: number, testimonialRequest: TestimonialRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestimonialResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTestimonialsId(id, testimonialRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TestimonialApi - factory interface
 * @export
 */
export const TestimonialApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestimonialApiFp(configuration)
    return {
        /**
         * 
         * @param {TestimonialApiDeleteTestimonialsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTestimonialsId(requestParameters: TestimonialApiDeleteTestimonialsIdRequest, options?: AxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteTestimonialsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TestimonialApiGetTestimonialsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestimonials(requestParameters: TestimonialApiGetTestimonialsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TestimonialListResponse> {
            return localVarFp.getTestimonials(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TestimonialApiGetTestimonialsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestimonialsId(requestParameters: TestimonialApiGetTestimonialsIdRequest, options?: AxiosRequestConfig): AxiosPromise<TestimonialResponse> {
            return localVarFp.getTestimonialsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TestimonialApiPostTestimonialsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTestimonials(requestParameters: TestimonialApiPostTestimonialsRequest, options?: AxiosRequestConfig): AxiosPromise<TestimonialResponse> {
            return localVarFp.postTestimonials(requestParameters.testimonialRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TestimonialApiPostTestimonialsIdLocalizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTestimonialsIdLocalizations(requestParameters: TestimonialApiPostTestimonialsIdLocalizationsRequest, options?: AxiosRequestConfig): AxiosPromise<TestimonialLocalizationResponse> {
            return localVarFp.postTestimonialsIdLocalizations(requestParameters.id, requestParameters.testimonialLocalizationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TestimonialApiPutTestimonialsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTestimonialsId(requestParameters: TestimonialApiPutTestimonialsIdRequest, options?: AxiosRequestConfig): AxiosPromise<TestimonialResponse> {
            return localVarFp.putTestimonialsId(requestParameters.id, requestParameters.testimonialRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteTestimonialsId operation in TestimonialApi.
 * @export
 * @interface TestimonialApiDeleteTestimonialsIdRequest
 */
export interface TestimonialApiDeleteTestimonialsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TestimonialApiDeleteTestimonialsId
     */
    readonly id: number
}

/**
 * Request parameters for getTestimonials operation in TestimonialApi.
 * @export
 * @interface TestimonialApiGetTestimonialsRequest
 */
export interface TestimonialApiGetTestimonialsRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof TestimonialApiGetTestimonials
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof TestimonialApiGetTestimonials
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof TestimonialApiGetTestimonials
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof TestimonialApiGetTestimonials
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof TestimonialApiGetTestimonials
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof TestimonialApiGetTestimonials
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof TestimonialApiGetTestimonials
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof TestimonialApiGetTestimonials
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof TestimonialApiGetTestimonials
     */
    readonly filters?: object

    /**
     * Locale to apply
     * @type {string}
     * @memberof TestimonialApiGetTestimonials
     */
    readonly locale?: string
}

/**
 * Request parameters for getTestimonialsId operation in TestimonialApi.
 * @export
 * @interface TestimonialApiGetTestimonialsIdRequest
 */
export interface TestimonialApiGetTestimonialsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TestimonialApiGetTestimonialsId
     */
    readonly id: number
}

/**
 * Request parameters for postTestimonials operation in TestimonialApi.
 * @export
 * @interface TestimonialApiPostTestimonialsRequest
 */
export interface TestimonialApiPostTestimonialsRequest {
    /**
     * 
     * @type {TestimonialRequest}
     * @memberof TestimonialApiPostTestimonials
     */
    readonly testimonialRequest: TestimonialRequest
}

/**
 * Request parameters for postTestimonialsIdLocalizations operation in TestimonialApi.
 * @export
 * @interface TestimonialApiPostTestimonialsIdLocalizationsRequest
 */
export interface TestimonialApiPostTestimonialsIdLocalizationsRequest {
    /**
     * 
     * @type {number}
     * @memberof TestimonialApiPostTestimonialsIdLocalizations
     */
    readonly id: number

    /**
     * 
     * @type {TestimonialLocalizationRequest}
     * @memberof TestimonialApiPostTestimonialsIdLocalizations
     */
    readonly testimonialLocalizationRequest: TestimonialLocalizationRequest
}

/**
 * Request parameters for putTestimonialsId operation in TestimonialApi.
 * @export
 * @interface TestimonialApiPutTestimonialsIdRequest
 */
export interface TestimonialApiPutTestimonialsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TestimonialApiPutTestimonialsId
     */
    readonly id: number

    /**
     * 
     * @type {TestimonialRequest}
     * @memberof TestimonialApiPutTestimonialsId
     */
    readonly testimonialRequest: TestimonialRequest
}

/**
 * TestimonialApi - object-oriented interface
 * @export
 * @class TestimonialApi
 * @extends {BaseAPI}
 */
export class TestimonialApi extends BaseAPI {
    /**
     * 
     * @param {TestimonialApiDeleteTestimonialsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestimonialApi
     */
    public deleteTestimonialsId(requestParameters: TestimonialApiDeleteTestimonialsIdRequest, options?: AxiosRequestConfig) {
        return TestimonialApiFp(this.configuration).deleteTestimonialsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TestimonialApiGetTestimonialsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestimonialApi
     */
    public getTestimonials(requestParameters: TestimonialApiGetTestimonialsRequest = {}, options?: AxiosRequestConfig) {
        return TestimonialApiFp(this.configuration).getTestimonials(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TestimonialApiGetTestimonialsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestimonialApi
     */
    public getTestimonialsId(requestParameters: TestimonialApiGetTestimonialsIdRequest, options?: AxiosRequestConfig) {
        return TestimonialApiFp(this.configuration).getTestimonialsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TestimonialApiPostTestimonialsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestimonialApi
     */
    public postTestimonials(requestParameters: TestimonialApiPostTestimonialsRequest, options?: AxiosRequestConfig) {
        return TestimonialApiFp(this.configuration).postTestimonials(requestParameters.testimonialRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TestimonialApiPostTestimonialsIdLocalizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestimonialApi
     */
    public postTestimonialsIdLocalizations(requestParameters: TestimonialApiPostTestimonialsIdLocalizationsRequest, options?: AxiosRequestConfig) {
        return TestimonialApiFp(this.configuration).postTestimonialsIdLocalizations(requestParameters.id, requestParameters.testimonialLocalizationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TestimonialApiPutTestimonialsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestimonialApi
     */
    public putTestimonialsId(requestParameters: TestimonialApiPutTestimonialsIdRequest, options?: AxiosRequestConfig) {
        return TestimonialApiFp(this.configuration).putTestimonialsId(requestParameters.id, requestParameters.testimonialRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ThuocApi - axios parameter creator
 * @export
 */
export const ThuocApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteThuocsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteThuocsId', 'id', id)
            const localVarPath = `/thuocs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThuocs: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/thuocs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThuocsId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getThuocsId', 'id', id)
            const localVarPath = `/thuocs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ThuocRequest} thuocRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postThuocs: async (thuocRequest: ThuocRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'thuocRequest' is not null or undefined
            assertParamExists('postThuocs', 'thuocRequest', thuocRequest)
            const localVarPath = `/thuocs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(thuocRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ThuocRequest} thuocRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putThuocsId: async (id: number, thuocRequest: ThuocRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putThuocsId', 'id', id)
            // verify required parameter 'thuocRequest' is not null or undefined
            assertParamExists('putThuocsId', 'thuocRequest', thuocRequest)
            const localVarPath = `/thuocs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(thuocRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ThuocApi - functional programming interface
 * @export
 */
export const ThuocApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ThuocApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteThuocsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteThuocsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getThuocs(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThuocListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getThuocs(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getThuocsId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThuocResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getThuocsId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ThuocRequest} thuocRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postThuocs(thuocRequest: ThuocRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThuocResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postThuocs(thuocRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {ThuocRequest} thuocRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putThuocsId(id: number, thuocRequest: ThuocRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ThuocResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putThuocsId(id, thuocRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ThuocApi - factory interface
 * @export
 */
export const ThuocApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ThuocApiFp(configuration)
    return {
        /**
         * 
         * @param {ThuocApiDeleteThuocsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteThuocsId(requestParameters: ThuocApiDeleteThuocsIdRequest, options?: AxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteThuocsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ThuocApiGetThuocsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThuocs(requestParameters: ThuocApiGetThuocsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ThuocListResponse> {
            return localVarFp.getThuocs(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ThuocApiGetThuocsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getThuocsId(requestParameters: ThuocApiGetThuocsIdRequest, options?: AxiosRequestConfig): AxiosPromise<ThuocResponse> {
            return localVarFp.getThuocsId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ThuocApiPostThuocsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postThuocs(requestParameters: ThuocApiPostThuocsRequest, options?: AxiosRequestConfig): AxiosPromise<ThuocResponse> {
            return localVarFp.postThuocs(requestParameters.thuocRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ThuocApiPutThuocsIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putThuocsId(requestParameters: ThuocApiPutThuocsIdRequest, options?: AxiosRequestConfig): AxiosPromise<ThuocResponse> {
            return localVarFp.putThuocsId(requestParameters.id, requestParameters.thuocRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteThuocsId operation in ThuocApi.
 * @export
 * @interface ThuocApiDeleteThuocsIdRequest
 */
export interface ThuocApiDeleteThuocsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ThuocApiDeleteThuocsId
     */
    readonly id: number
}

/**
 * Request parameters for getThuocs operation in ThuocApi.
 * @export
 * @interface ThuocApiGetThuocsRequest
 */
export interface ThuocApiGetThuocsRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof ThuocApiGetThuocs
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof ThuocApiGetThuocs
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof ThuocApiGetThuocs
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof ThuocApiGetThuocs
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof ThuocApiGetThuocs
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof ThuocApiGetThuocs
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof ThuocApiGetThuocs
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof ThuocApiGetThuocs
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof ThuocApiGetThuocs
     */
    readonly filters?: object

    /**
     * Locale to apply
     * @type {string}
     * @memberof ThuocApiGetThuocs
     */
    readonly locale?: string
}

/**
 * Request parameters for getThuocsId operation in ThuocApi.
 * @export
 * @interface ThuocApiGetThuocsIdRequest
 */
export interface ThuocApiGetThuocsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ThuocApiGetThuocsId
     */
    readonly id: number
}

/**
 * Request parameters for postThuocs operation in ThuocApi.
 * @export
 * @interface ThuocApiPostThuocsRequest
 */
export interface ThuocApiPostThuocsRequest {
    /**
     * 
     * @type {ThuocRequest}
     * @memberof ThuocApiPostThuocs
     */
    readonly thuocRequest: ThuocRequest
}

/**
 * Request parameters for putThuocsId operation in ThuocApi.
 * @export
 * @interface ThuocApiPutThuocsIdRequest
 */
export interface ThuocApiPutThuocsIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ThuocApiPutThuocsId
     */
    readonly id: number

    /**
     * 
     * @type {ThuocRequest}
     * @memberof ThuocApiPutThuocsId
     */
    readonly thuocRequest: ThuocRequest
}

/**
 * ThuocApi - object-oriented interface
 * @export
 * @class ThuocApi
 * @extends {BaseAPI}
 */
export class ThuocApi extends BaseAPI {
    /**
     * 
     * @param {ThuocApiDeleteThuocsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThuocApi
     */
    public deleteThuocsId(requestParameters: ThuocApiDeleteThuocsIdRequest, options?: AxiosRequestConfig) {
        return ThuocApiFp(this.configuration).deleteThuocsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ThuocApiGetThuocsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThuocApi
     */
    public getThuocs(requestParameters: ThuocApiGetThuocsRequest = {}, options?: AxiosRequestConfig) {
        return ThuocApiFp(this.configuration).getThuocs(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ThuocApiGetThuocsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThuocApi
     */
    public getThuocsId(requestParameters: ThuocApiGetThuocsIdRequest, options?: AxiosRequestConfig) {
        return ThuocApiFp(this.configuration).getThuocsId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ThuocApiPostThuocsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThuocApi
     */
    public postThuocs(requestParameters: ThuocApiPostThuocsRequest, options?: AxiosRequestConfig) {
        return ThuocApiFp(this.configuration).postThuocs(requestParameters.thuocRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ThuocApiPutThuocsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ThuocApi
     */
    public putThuocsId(requestParameters: ThuocApiPutThuocsIdRequest, options?: AxiosRequestConfig) {
        return ThuocApiFp(this.configuration).putThuocsId(requestParameters.id, requestParameters.thuocRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UploadFileApi - axios parameter creator
 * @export
 */
export const UploadFileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUploadFilesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUploadFilesId', 'id', id)
            const localVarPath = `/upload/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadFiles: async (sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/upload/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (paginationWithCount !== undefined) {
                localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
            }

            if (paginationPage !== undefined) {
                localVarQueryParameter['pagination[page]'] = paginationPage;
            }

            if (paginationPageSize !== undefined) {
                localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
            }

            if (paginationStart !== undefined) {
                localVarQueryParameter['pagination[start]'] = paginationStart;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination[limit]'] = paginationLimit;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (populate !== undefined) {
                localVarQueryParameter['populate'] = populate;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadFilesId: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUploadFilesId', 'id', id)
            const localVarPath = `/upload/files/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UploadFileApi - functional programming interface
 * @export
 */
export const UploadFileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UploadFileApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUploadFilesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUploadFilesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
         * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
         * @param {number} [paginationPage] Page number (default: 0)
         * @param {number} [paginationPageSize] Page size (default: 25)
         * @param {number} [paginationStart] Offset value (default: 0)
         * @param {number} [paginationLimit] Number of entities to return (default: 25)
         * @param {string} [fields] Fields to return (ex: title,author)
         * @param {string} [populate] Relations to return
         * @param {object} [filters] Filters to apply
         * @param {string} [locale] Locale to apply
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUploadFiles(sort?: string, paginationWithCount?: boolean, paginationPage?: number, paginationPageSize?: number, paginationStart?: number, paginationLimit?: number, fields?: string, populate?: string, filters?: object, locale?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadFileListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUploadFiles(sort, paginationWithCount, paginationPage, paginationPageSize, paginationStart, paginationLimit, fields, populate, filters, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUploadFilesId(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadFileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUploadFilesId(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UploadFileApi - factory interface
 * @export
 */
export const UploadFileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UploadFileApiFp(configuration)
    return {
        /**
         * 
         * @param {UploadFileApiDeleteUploadFilesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUploadFilesId(requestParameters: UploadFileApiDeleteUploadFilesIdRequest, options?: AxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.deleteUploadFilesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UploadFileApiGetUploadFilesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadFiles(requestParameters: UploadFileApiGetUploadFilesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<UploadFileListResponse> {
            return localVarFp.getUploadFiles(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UploadFileApiGetUploadFilesIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUploadFilesId(requestParameters: UploadFileApiGetUploadFilesIdRequest, options?: AxiosRequestConfig): AxiosPromise<UploadFileResponse> {
            return localVarFp.getUploadFilesId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteUploadFilesId operation in UploadFileApi.
 * @export
 * @interface UploadFileApiDeleteUploadFilesIdRequest
 */
export interface UploadFileApiDeleteUploadFilesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof UploadFileApiDeleteUploadFilesId
     */
    readonly id: number
}

/**
 * Request parameters for getUploadFiles operation in UploadFileApi.
 * @export
 * @interface UploadFileApiGetUploadFilesRequest
 */
export interface UploadFileApiGetUploadFilesRequest {
    /**
     * Sort by attributes ascending (asc) or descending (desc)
     * @type {string}
     * @memberof UploadFileApiGetUploadFiles
     */
    readonly sort?: string

    /**
     * Return page/pageSize (default: true)
     * @type {boolean}
     * @memberof UploadFileApiGetUploadFiles
     */
    readonly paginationWithCount?: boolean

    /**
     * Page number (default: 0)
     * @type {number}
     * @memberof UploadFileApiGetUploadFiles
     */
    readonly paginationPage?: number

    /**
     * Page size (default: 25)
     * @type {number}
     * @memberof UploadFileApiGetUploadFiles
     */
    readonly paginationPageSize?: number

    /**
     * Offset value (default: 0)
     * @type {number}
     * @memberof UploadFileApiGetUploadFiles
     */
    readonly paginationStart?: number

    /**
     * Number of entities to return (default: 25)
     * @type {number}
     * @memberof UploadFileApiGetUploadFiles
     */
    readonly paginationLimit?: number

    /**
     * Fields to return (ex: title,author)
     * @type {string}
     * @memberof UploadFileApiGetUploadFiles
     */
    readonly fields?: string

    /**
     * Relations to return
     * @type {string}
     * @memberof UploadFileApiGetUploadFiles
     */
    readonly populate?: string

    /**
     * Filters to apply
     * @type {object}
     * @memberof UploadFileApiGetUploadFiles
     */
    readonly filters?: object

    /**
     * Locale to apply
     * @type {string}
     * @memberof UploadFileApiGetUploadFiles
     */
    readonly locale?: string
}

/**
 * Request parameters for getUploadFilesId operation in UploadFileApi.
 * @export
 * @interface UploadFileApiGetUploadFilesIdRequest
 */
export interface UploadFileApiGetUploadFilesIdRequest {
    /**
     * 
     * @type {number}
     * @memberof UploadFileApiGetUploadFilesId
     */
    readonly id: number
}

/**
 * UploadFileApi - object-oriented interface
 * @export
 * @class UploadFileApi
 * @extends {BaseAPI}
 */
export class UploadFileApi extends BaseAPI {
    /**
     * 
     * @param {UploadFileApiDeleteUploadFilesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadFileApi
     */
    public deleteUploadFilesId(requestParameters: UploadFileApiDeleteUploadFilesIdRequest, options?: AxiosRequestConfig) {
        return UploadFileApiFp(this.configuration).deleteUploadFilesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UploadFileApiGetUploadFilesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadFileApi
     */
    public getUploadFiles(requestParameters: UploadFileApiGetUploadFilesRequest = {}, options?: AxiosRequestConfig) {
        return UploadFileApiFp(this.configuration).getUploadFiles(requestParameters.sort, requestParameters.paginationWithCount, requestParameters.paginationPage, requestParameters.paginationPageSize, requestParameters.paginationStart, requestParameters.paginationLimit, requestParameters.fields, requestParameters.populate, requestParameters.filters, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UploadFileApiGetUploadFilesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UploadFileApi
     */
    public getUploadFilesId(requestParameters: UploadFileApiGetUploadFilesIdRequest, options?: AxiosRequestConfig) {
        return UploadFileApiFp(this.configuration).getUploadFilesId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersPermissionsAuthApi - axios parameter creator
 * @export
 */
export const UsersPermissionsAuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Update user\'s own password
         * @param {AuthChangePasswordPostRequest} authChangePasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authChangePasswordPost: async (authChangePasswordPostRequest: AuthChangePasswordPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authChangePasswordPostRequest' is not null or undefined
            assertParamExists('authChangePasswordPost', 'authChangePasswordPostRequest', authChangePasswordPostRequest)
            const localVarPath = `/auth/change-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authChangePasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Confirm user email
         * @param {string} [confirmation] confirmation token received by email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authEmailConfirmationGet: async (confirmation?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/email-confirmation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (confirmation !== undefined) {
                localVarQueryParameter['confirmation'] = confirmation;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send rest password email
         * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authForgotPasswordPost: async (authForgotPasswordPostRequest: AuthForgotPasswordPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authForgotPasswordPostRequest' is not null or undefined
            assertParamExists('authForgotPasswordPost', 'authForgotPasswordPostRequest', authForgotPasswordPostRequest)
            const localVarPath = `/auth/forgot-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authForgotPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a jwt token and user info
         * @summary Local login
         * @param {AuthLocalPostRequest} authLocalPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLocalPost: async (authLocalPostRequest: AuthLocalPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authLocalPostRequest' is not null or undefined
            assertParamExists('authLocalPost', 'authLocalPostRequest', authLocalPostRequest)
            const localVarPath = `/auth/local`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authLocalPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a jwt token and user info
         * @summary Register a user
         * @param {AuthLocalRegisterPostRequest} authLocalRegisterPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLocalRegisterPost: async (authLocalRegisterPostRequest: AuthLocalRegisterPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authLocalRegisterPostRequest' is not null or undefined
            assertParamExists('authLocalRegisterPost', 'authLocalRegisterPostRequest', authLocalRegisterPostRequest)
            const localVarPath = `/auth/local/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authLocalRegisterPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Default Callback from provider auth
         * @param {string} provider Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authProviderCallbackGet: async (provider: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            assertParamExists('authProviderCallbackGet', 'provider', provider)
            const localVarPath = `/auth/{provider}/callback`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rest user password
         * @param {AuthResetPasswordPostRequest} authResetPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authResetPasswordPost: async (authResetPasswordPostRequest: AuthResetPasswordPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authResetPasswordPostRequest' is not null or undefined
            assertParamExists('authResetPasswordPost', 'authResetPasswordPostRequest', authResetPasswordPostRequest)
            const localVarPath = `/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authResetPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send confirmation email
         * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSendEmailConfirmationPost: async (authForgotPasswordPostRequest: AuthForgotPasswordPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authForgotPasswordPostRequest' is not null or undefined
            assertParamExists('authSendEmailConfirmationPost', 'authForgotPasswordPostRequest', authForgotPasswordPostRequest)
            const localVarPath = `/auth/send-email-confirmation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authForgotPasswordPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Redirects to provider login before being redirect to /auth/{provider}/callback
         * @summary Login with a provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/connect/(.*)`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersPermissionsAuthApi - functional programming interface
 * @export
 */
export const UsersPermissionsAuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersPermissionsAuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Update user\'s own password
         * @param {AuthChangePasswordPostRequest} authChangePasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authChangePasswordPost(authChangePasswordPostRequest: AuthChangePasswordPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authChangePasswordPost(authChangePasswordPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Confirm user email
         * @param {string} [confirmation] confirmation token received by email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authEmailConfirmationGet(confirmation?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authEmailConfirmationGet(confirmation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send rest password email
         * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authForgotPasswordPost(authForgotPasswordPostRequest: AuthForgotPasswordPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsRolesPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authForgotPasswordPost(authForgotPasswordPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a jwt token and user info
         * @summary Local login
         * @param {AuthLocalPostRequest} authLocalPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLocalPost(authLocalPostRequest: AuthLocalPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLocalPost(authLocalPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a jwt token and user info
         * @summary Register a user
         * @param {AuthLocalRegisterPostRequest} authLocalRegisterPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLocalRegisterPost(authLocalRegisterPostRequest: AuthLocalRegisterPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLocalRegisterPost(authLocalRegisterPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Default Callback from provider auth
         * @param {string} provider Provider name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authProviderCallbackGet(provider: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authProviderCallbackGet(provider, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Rest user password
         * @param {AuthResetPasswordPostRequest} authResetPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authResetPasswordPost(authResetPasswordPostRequest: AuthResetPasswordPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authResetPasswordPost(authResetPasswordPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send confirmation email
         * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSendEmailConfirmationPost(authForgotPasswordPostRequest: AuthForgotPasswordPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSendEmailConfirmationPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authSendEmailConfirmationPost(authForgotPasswordPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Redirects to provider login before being redirect to /auth/{provider}/callback
         * @summary Login with a provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async connectGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.connectGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersPermissionsAuthApi - factory interface
 * @export
 */
export const UsersPermissionsAuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersPermissionsAuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Update user\'s own password
         * @param {UsersPermissionsAuthApiAuthChangePasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authChangePasswordPost(requestParameters: UsersPermissionsAuthApiAuthChangePasswordPostRequest, options?: AxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration> {
            return localVarFp.authChangePasswordPost(requestParameters.authChangePasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Confirm user email
         * @param {UsersPermissionsAuthApiAuthEmailConfirmationGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authEmailConfirmationGet(requestParameters: UsersPermissionsAuthApiAuthEmailConfirmationGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Error> {
            return localVarFp.authEmailConfirmationGet(requestParameters.confirmation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send rest password email
         * @param {UsersPermissionsAuthApiAuthForgotPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authForgotPasswordPost(requestParameters: UsersPermissionsAuthApiAuthForgotPasswordPostRequest, options?: AxiosRequestConfig): AxiosPromise<UsersPermissionsRolesPost200Response> {
            return localVarFp.authForgotPasswordPost(requestParameters.authForgotPasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a jwt token and user info
         * @summary Local login
         * @param {UsersPermissionsAuthApiAuthLocalPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLocalPost(requestParameters: UsersPermissionsAuthApiAuthLocalPostRequest, options?: AxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration> {
            return localVarFp.authLocalPost(requestParameters.authLocalPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a jwt token and user info
         * @summary Register a user
         * @param {UsersPermissionsAuthApiAuthLocalRegisterPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLocalRegisterPost(requestParameters: UsersPermissionsAuthApiAuthLocalRegisterPostRequest, options?: AxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration> {
            return localVarFp.authLocalRegisterPost(requestParameters.authLocalRegisterPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Default Callback from provider auth
         * @param {UsersPermissionsAuthApiAuthProviderCallbackGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authProviderCallbackGet(requestParameters: UsersPermissionsAuthApiAuthProviderCallbackGetRequest, options?: AxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration> {
            return localVarFp.authProviderCallbackGet(requestParameters.provider, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rest user password
         * @param {UsersPermissionsAuthApiAuthResetPasswordPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authResetPasswordPost(requestParameters: UsersPermissionsAuthApiAuthResetPasswordPostRequest, options?: AxiosRequestConfig): AxiosPromise<UsersPermissionsUserRegistration> {
            return localVarFp.authResetPasswordPost(requestParameters.authResetPasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send confirmation email
         * @param {UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSendEmailConfirmationPost(requestParameters: UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest, options?: AxiosRequestConfig): AxiosPromise<AuthSendEmailConfirmationPost200Response> {
            return localVarFp.authSendEmailConfirmationPost(requestParameters.authForgotPasswordPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Redirects to provider login before being redirect to /auth/{provider}/callback
         * @summary Login with a provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        connectGet(options?: AxiosRequestConfig): AxiosPromise<Error> {
            return localVarFp.connectGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authChangePasswordPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthChangePasswordPostRequest
 */
export interface UsersPermissionsAuthApiAuthChangePasswordPostRequest {
    /**
     * 
     * @type {AuthChangePasswordPostRequest}
     * @memberof UsersPermissionsAuthApiAuthChangePasswordPost
     */
    readonly authChangePasswordPostRequest: AuthChangePasswordPostRequest
}

/**
 * Request parameters for authEmailConfirmationGet operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthEmailConfirmationGetRequest
 */
export interface UsersPermissionsAuthApiAuthEmailConfirmationGetRequest {
    /**
     * confirmation token received by email
     * @type {string}
     * @memberof UsersPermissionsAuthApiAuthEmailConfirmationGet
     */
    readonly confirmation?: string
}

/**
 * Request parameters for authForgotPasswordPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthForgotPasswordPostRequest
 */
export interface UsersPermissionsAuthApiAuthForgotPasswordPostRequest {
    /**
     * 
     * @type {AuthForgotPasswordPostRequest}
     * @memberof UsersPermissionsAuthApiAuthForgotPasswordPost
     */
    readonly authForgotPasswordPostRequest: AuthForgotPasswordPostRequest
}

/**
 * Request parameters for authLocalPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthLocalPostRequest
 */
export interface UsersPermissionsAuthApiAuthLocalPostRequest {
    /**
     * 
     * @type {AuthLocalPostRequest}
     * @memberof UsersPermissionsAuthApiAuthLocalPost
     */
    readonly authLocalPostRequest: AuthLocalPostRequest
}

/**
 * Request parameters for authLocalRegisterPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthLocalRegisterPostRequest
 */
export interface UsersPermissionsAuthApiAuthLocalRegisterPostRequest {
    /**
     * 
     * @type {AuthLocalRegisterPostRequest}
     * @memberof UsersPermissionsAuthApiAuthLocalRegisterPost
     */
    readonly authLocalRegisterPostRequest: AuthLocalRegisterPostRequest
}

/**
 * Request parameters for authProviderCallbackGet operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthProviderCallbackGetRequest
 */
export interface UsersPermissionsAuthApiAuthProviderCallbackGetRequest {
    /**
     * Provider name
     * @type {string}
     * @memberof UsersPermissionsAuthApiAuthProviderCallbackGet
     */
    readonly provider: string
}

/**
 * Request parameters for authResetPasswordPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthResetPasswordPostRequest
 */
export interface UsersPermissionsAuthApiAuthResetPasswordPostRequest {
    /**
     * 
     * @type {AuthResetPasswordPostRequest}
     * @memberof UsersPermissionsAuthApiAuthResetPasswordPost
     */
    readonly authResetPasswordPostRequest: AuthResetPasswordPostRequest
}

/**
 * Request parameters for authSendEmailConfirmationPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest
 */
export interface UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest {
    /**
     * 
     * @type {AuthForgotPasswordPostRequest}
     * @memberof UsersPermissionsAuthApiAuthSendEmailConfirmationPost
     */
    readonly authForgotPasswordPostRequest: AuthForgotPasswordPostRequest
}

/**
 * UsersPermissionsAuthApi - object-oriented interface
 * @export
 * @class UsersPermissionsAuthApi
 * @extends {BaseAPI}
 */
export class UsersPermissionsAuthApi extends BaseAPI {
    /**
     * 
     * @summary Update user\'s own password
     * @param {UsersPermissionsAuthApiAuthChangePasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authChangePasswordPost(requestParameters: UsersPermissionsAuthApiAuthChangePasswordPostRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authChangePasswordPost(requestParameters.authChangePasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Confirm user email
     * @param {UsersPermissionsAuthApiAuthEmailConfirmationGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authEmailConfirmationGet(requestParameters: UsersPermissionsAuthApiAuthEmailConfirmationGetRequest = {}, options?: AxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authEmailConfirmationGet(requestParameters.confirmation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send rest password email
     * @param {UsersPermissionsAuthApiAuthForgotPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authForgotPasswordPost(requestParameters: UsersPermissionsAuthApiAuthForgotPasswordPostRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authForgotPasswordPost(requestParameters.authForgotPasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a jwt token and user info
     * @summary Local login
     * @param {UsersPermissionsAuthApiAuthLocalPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authLocalPost(requestParameters: UsersPermissionsAuthApiAuthLocalPostRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authLocalPost(requestParameters.authLocalPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a jwt token and user info
     * @summary Register a user
     * @param {UsersPermissionsAuthApiAuthLocalRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authLocalRegisterPost(requestParameters: UsersPermissionsAuthApiAuthLocalRegisterPostRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authLocalRegisterPost(requestParameters.authLocalRegisterPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Default Callback from provider auth
     * @param {UsersPermissionsAuthApiAuthProviderCallbackGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authProviderCallbackGet(requestParameters: UsersPermissionsAuthApiAuthProviderCallbackGetRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authProviderCallbackGet(requestParameters.provider, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rest user password
     * @param {UsersPermissionsAuthApiAuthResetPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authResetPasswordPost(requestParameters: UsersPermissionsAuthApiAuthResetPasswordPostRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authResetPasswordPost(requestParameters.authResetPasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send confirmation email
     * @param {UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public authSendEmailConfirmationPost(requestParameters: UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).authSendEmailConfirmationPost(requestParameters.authForgotPasswordPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Redirects to provider login before being redirect to /auth/{provider}/callback
     * @summary Login with a provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsAuthApi
     */
    public connectGet(options?: AxiosRequestConfig) {
        return UsersPermissionsAuthApiFp(this.configuration).connectGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersPermissionsUsersRolesApi - axios parameter creator
 * @export
 */
export const UsersPermissionsUsersRolesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get user count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCountGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get list of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} id user Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdDelete', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a user
         * @param {string} id user Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdGet', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a user
         * @param {string} id user Id
         * @param {UsersPostRequest} usersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut: async (id: string, usersPostRequest: UsersPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdPut', 'id', id)
            // verify required parameter 'usersPostRequest' is not null or undefined
            assertParamExists('usersIdPut', 'usersPostRequest', usersPostRequest)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get authenticated user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get default generated permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsPermissionsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users-permissions/permissions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users-permissions/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a role
         * @param {string} id role Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersPermissionsRolesIdGet', 'id', id)
            const localVarPath = `/users-permissions/roles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a role
         * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesPost: async (usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usersPermissionsRolesPostRequest' is not null or undefined
            assertParamExists('usersPermissionsRolesPost', 'usersPermissionsRolesPostRequest', usersPermissionsRolesPostRequest)
            const localVarPath = `/users-permissions/roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersPermissionsRolesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a role
         * @param {string} role role Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesRoleDelete: async (role: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'role' is not null or undefined
            assertParamExists('usersPermissionsRolesRoleDelete', 'role', role)
            const localVarPath = `/users-permissions/roles/{role}`
                .replace(`{${"role"}}`, encodeURIComponent(String(role)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a role
         * @param {string} role role Id
         * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesRolePut: async (role: string, usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'role' is not null or undefined
            assertParamExists('usersPermissionsRolesRolePut', 'role', role)
            // verify required parameter 'usersPermissionsRolesPostRequest' is not null or undefined
            assertParamExists('usersPermissionsRolesRolePut', 'usersPermissionsRolesPostRequest', usersPermissionsRolesPostRequest)
            const localVarPath = `/users-permissions/roles/{role}`
                .replace(`{${"role"}}`, encodeURIComponent(String(role)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersPermissionsRolesPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a user
         * @param {UsersPostRequest} usersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost: async (usersPostRequest: UsersPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usersPostRequest' is not null or undefined
            assertParamExists('usersPost', 'usersPostRequest', usersPostRequest)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(usersPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersPermissionsUsersRolesApi - functional programming interface
 * @export
 */
export const UsersPermissionsUsersRolesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersPermissionsUsersRolesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get user count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersCountGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersCountGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get list of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UsersPermissionsUser>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a user
         * @param {string} id user Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a user
         * @param {string} id user Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a user
         * @param {string} id user Id
         * @param {UsersPostRequest} usersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdPut(id: string, usersPostRequest: UsersPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdPut(id, usersPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get authenticated user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersMeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersMeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get default generated permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPermissionsPermissionsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsPermissionsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsPermissionsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPermissionsRolesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsRolesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsRolesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a role
         * @param {string} id role Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPermissionsRolesIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsRolesIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsRolesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a role
         * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPermissionsRolesPost(usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsRolesPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsRolesPost(usersPermissionsRolesPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a role
         * @param {string} role role Id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPermissionsRolesRoleDelete(role: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsRolesPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsRolesRoleDelete(role, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a role
         * @param {string} role role Id
         * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPermissionsRolesRolePut(role: string, usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsRolesPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsRolesRolePut(role, usersPermissionsRolesPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a user
         * @param {UsersPostRequest} usersPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPost(usersPostRequest: UsersPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPost(usersPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersPermissionsUsersRolesApi - factory interface
 * @export
 */
export const UsersPermissionsUsersRolesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersPermissionsUsersRolesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get user count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCountGet(options?: AxiosRequestConfig): AxiosPromise<number> {
            return localVarFp.usersCountGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get list of users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(options?: AxiosRequestConfig): AxiosPromise<Array<UsersPermissionsUser>> {
            return localVarFp.usersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a user
         * @param {UsersPermissionsUsersRolesApiUsersIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdDelete(requestParameters: UsersPermissionsUsersRolesApiUsersIdDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<UsersIdDelete200Response> {
            return localVarFp.usersIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a user
         * @param {UsersPermissionsUsersRolesApiUsersIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet(requestParameters: UsersPermissionsUsersRolesApiUsersIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<UsersPermissionsUser> {
            return localVarFp.usersIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a user
         * @param {UsersPermissionsUsersRolesApiUsersIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPut(requestParameters: UsersPermissionsUsersRolesApiUsersIdPutRequest, options?: AxiosRequestConfig): AxiosPromise<UsersPost201Response> {
            return localVarFp.usersIdPut(requestParameters.id, requestParameters.usersPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get authenticated user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet(options?: AxiosRequestConfig): AxiosPromise<UsersPermissionsUser> {
            return localVarFp.usersMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get default generated permissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsPermissionsGet(options?: AxiosRequestConfig): AxiosPromise<UsersPermissionsPermissionsGet200Response> {
            return localVarFp.usersPermissionsPermissionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List roles
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesGet(options?: AxiosRequestConfig): AxiosPromise<UsersPermissionsRolesGet200Response> {
            return localVarFp.usersPermissionsRolesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a role
         * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesIdGet(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<UsersPermissionsRolesIdGet200Response> {
            return localVarFp.usersPermissionsRolesIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a role
         * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesPost(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest, options?: AxiosRequestConfig): AxiosPromise<UsersPermissionsRolesPost200Response> {
            return localVarFp.usersPermissionsRolesPost(requestParameters.usersPermissionsRolesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a role
         * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesRoleDelete(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<UsersPermissionsRolesPost200Response> {
            return localVarFp.usersPermissionsRolesRoleDelete(requestParameters.role, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a role
         * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPermissionsRolesRolePut(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest, options?: AxiosRequestConfig): AxiosPromise<UsersPermissionsRolesPost200Response> {
            return localVarFp.usersPermissionsRolesRolePut(requestParameters.role, requestParameters.usersPermissionsRolesPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a user
         * @param {UsersPermissionsUsersRolesApiUsersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost(requestParameters: UsersPermissionsUsersRolesApiUsersPostRequest, options?: AxiosRequestConfig): AxiosPromise<UsersPost201Response> {
            return localVarFp.usersPost(requestParameters.usersPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for usersIdDelete operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersIdDeleteRequest
 */
export interface UsersPermissionsUsersRolesApiUsersIdDeleteRequest {
    /**
     * user Id
     * @type {string}
     * @memberof UsersPermissionsUsersRolesApiUsersIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for usersIdGet operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersIdGetRequest
 */
export interface UsersPermissionsUsersRolesApiUsersIdGetRequest {
    /**
     * user Id
     * @type {string}
     * @memberof UsersPermissionsUsersRolesApiUsersIdGet
     */
    readonly id: string
}

/**
 * Request parameters for usersIdPut operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersIdPutRequest
 */
export interface UsersPermissionsUsersRolesApiUsersIdPutRequest {
    /**
     * user Id
     * @type {string}
     * @memberof UsersPermissionsUsersRolesApiUsersIdPut
     */
    readonly id: string

    /**
     * 
     * @type {UsersPostRequest}
     * @memberof UsersPermissionsUsersRolesApiUsersIdPut
     */
    readonly usersPostRequest: UsersPostRequest
}

/**
 * Request parameters for usersPermissionsRolesIdGet operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest
 */
export interface UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest {
    /**
     * role Id
     * @type {string}
     * @memberof UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGet
     */
    readonly id: string
}

/**
 * Request parameters for usersPermissionsRolesPost operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest
 */
export interface UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest {
    /**
     * 
     * @type {UsersPermissionsRolesPostRequest}
     * @memberof UsersPermissionsUsersRolesApiUsersPermissionsRolesPost
     */
    readonly usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest
}

/**
 * Request parameters for usersPermissionsRolesRoleDelete operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest
 */
export interface UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest {
    /**
     * role Id
     * @type {string}
     * @memberof UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDelete
     */
    readonly role: string
}

/**
 * Request parameters for usersPermissionsRolesRolePut operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest
 */
export interface UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest {
    /**
     * role Id
     * @type {string}
     * @memberof UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePut
     */
    readonly role: string

    /**
     * 
     * @type {UsersPermissionsRolesPostRequest}
     * @memberof UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePut
     */
    readonly usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest
}

/**
 * Request parameters for usersPost operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersPostRequest
 */
export interface UsersPermissionsUsersRolesApiUsersPostRequest {
    /**
     * 
     * @type {UsersPostRequest}
     * @memberof UsersPermissionsUsersRolesApiUsersPost
     */
    readonly usersPostRequest: UsersPostRequest
}

/**
 * UsersPermissionsUsersRolesApi - object-oriented interface
 * @export
 * @class UsersPermissionsUsersRolesApi
 * @extends {BaseAPI}
 */
export class UsersPermissionsUsersRolesApi extends BaseAPI {
    /**
     * 
     * @summary Get user count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersCountGet(options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersCountGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get list of users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersGet(options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a user
     * @param {UsersPermissionsUsersRolesApiUsersIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersIdDelete(requestParameters: UsersPermissionsUsersRolesApiUsersIdDeleteRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a user
     * @param {UsersPermissionsUsersRolesApiUsersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersIdGet(requestParameters: UsersPermissionsUsersRolesApiUsersIdGetRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a user
     * @param {UsersPermissionsUsersRolesApiUsersIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersIdPut(requestParameters: UsersPermissionsUsersRolesApiUsersIdPutRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersIdPut(requestParameters.id, requestParameters.usersPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get authenticated user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersMeGet(options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get default generated permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPermissionsPermissionsGet(options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPermissionsPermissionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPermissionsRolesGet(options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPermissionsRolesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a role
     * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPermissionsRolesIdGet(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPermissionsRolesIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a role
     * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPermissionsRolesPost(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPermissionsRolesPost(requestParameters.usersPermissionsRolesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a role
     * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPermissionsRolesRoleDelete(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPermissionsRolesRoleDelete(requestParameters.role, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a role
     * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPermissionsRolesRolePut(requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPermissionsRolesRolePut(requestParameters.role, requestParameters.usersPermissionsRolesPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a user
     * @param {UsersPermissionsUsersRolesApiUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersPermissionsUsersRolesApi
     */
    public usersPost(requestParameters: UsersPermissionsUsersRolesApiUsersPostRequest, options?: AxiosRequestConfig) {
        return UsersPermissionsUsersRolesApiFp(this.configuration).usersPost(requestParameters.usersPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


